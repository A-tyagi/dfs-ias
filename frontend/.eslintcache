[{"/app/src/index.js":"1","/app/src/App.js":"2","/app/src/serviceWorker.js":"3","/app/src/pages/SchoolHomePage.js":"4","/app/src/pages/LoginPage.js":"5","/app/src/pages/SpheroHomePage.js":"6","/app/src/pages/AppjamHomePage.js":"7","/app/src/pages/ResetPassword.js":"8","/app/src/pages/UploadInstitutionPage.js":"9","/app/src/pages/TemplatePage.js":"10","/app/src/pages/WebjamHomePage.js":"11","/app/src/pages/AddInstructorPage.js":"12","/app/src/pages/schoolPages/DeleteSchoolPage.js":"13","/app/src/pages/schoolPages/AddSchoolPage.js":"14","/app/src/pages/schoolPages/SchoolRosterPage.js":"15","/app/src/pages/schoolPages/SchoolAddRosterForm.js":"16","/app/src/config/fire.js":"17","/app/src/pages/sortingPages/appjam/AppjamUploadInstitution.js":"18","/app/src/pages/sortingPages/appjam/AppjamSortedRosterPage.js":"19","/app/src/pages/sortingPages/appjam/AppjamShirtPage.js":"20","/app/src/pages/sortingPages/appjam/AppjamRosterPage.js":"21","/app/src/pages/sortingPages/appjam/AppjamAddRosterForm.js":"22","/app/src/pages/sortingPages/sphero/SpheroShirtPage.js":"23","/app/src/pages/sortingPages/sphero/SpheroRosterPage.js":"24","/app/src/pages/sortingPages/sphero/SpheroSortedRosterPage.js":"25","/app/src/pages/sortingPages/webjam/WebjamShirtPage.js":"26","/app/src/pages/sortingPages/sphero/SpheroAddRosterForm.js":"27","/app/src/pages/sortingPages/appjam/AppjamUploadRoster.js":"28","/app/src/pages/sortingPages/sphero/SpheroUploadInstitution.js":"29","/app/src/pages/sortingPages/sphero/SpheroUploadRoster.js":"30","/app/src/pages/sortingPages/webjam/WebjamUploadRoster.js":"31","/app/src/pages/sortingPages/webjam/WebjamRosterPage.js":"32","/app/src/pages/sortingPages/webjam/WebjamSortedRosterPage.js":"33","/app/src/pages/sortingPages/webjam/WebjamAddRosterForm.js":"34","/app/src/pages/sortingPages/webjam/WebjamUploadInstitution.js":"35","/app/src/components/schoolPagesComponents/ProgramSchoolRosterTable.js":"36","/app/src/components/sortingPagesComponents/SortingPagesNavbar.js":"37","/app/src/components/sortingPagesComponents/TitleToolbar.js":"38","/app/src/components/sidebar/SideNavBar.js":"39","/app/src/components/sortingPagesComponents/SortedInstructorsCard.js":"40","/app/src/components/sortingPagesComponents/LockedList.js":"41","/app/src/components/sortingPagesComponents/PendingList.js":"42","/app/src/pages/sortingPages/SaveAsPDF/GeneratePDF.js":"43","/app/src/components/sortingPagesComponents/PendingListNameButton.js":"44","/app/src/components/sortingPagesComponents/HoveredInstructorInfo.js":"45","/app/src/components/sortingPagesComponents/DropdownInstructorInfo.js":"46","/app/src/components/sortingPagesComponents/MoveInstructor.js":"47"},{"size":481,"mtime":1611219189854,"results":"48","hashOfConfig":"49"},{"size":7329,"mtime":1611219190023,"results":"50","hashOfConfig":"49"},{"size":5086,"mtime":1611219189839,"results":"51","hashOfConfig":"49"},{"size":5405,"mtime":1611219189852,"results":"52","hashOfConfig":"49"},{"size":6568,"mtime":1611219189853,"results":"53","hashOfConfig":"49"},{"size":5405,"mtime":1611219189852,"results":"54","hashOfConfig":"49"},{"size":5552,"mtime":1611219189853,"results":"55","hashOfConfig":"49"},{"size":3791,"mtime":1611219189852,"results":"56","hashOfConfig":"49"},{"size":5835,"mtime":1611219189851,"results":"57","hashOfConfig":"49"},{"size":885,"mtime":1611219189851,"results":"58","hashOfConfig":"49"},{"size":5405,"mtime":1611219189850,"results":"59","hashOfConfig":"49"},{"size":18038,"mtime":1611219189854,"results":"60","hashOfConfig":"49"},{"size":5242,"mtime":1611219189849,"results":"61","hashOfConfig":"49"},{"size":21029,"mtime":1611219189849,"results":"62","hashOfConfig":"49"},{"size":3071,"mtime":1611219189848,"results":"63","hashOfConfig":"49"},{"size":5732,"mtime":1611219189849,"results":"64","hashOfConfig":"49"},{"size":520,"mtime":1611219189588,"results":"65","hashOfConfig":"49"},{"size":5855,"mtime":1611219189846,"results":"66","hashOfConfig":"49"},{"size":17558,"mtime":1611219189846,"results":"67","hashOfConfig":"49"},{"size":4940,"mtime":1611219189846,"results":"68","hashOfConfig":"49"},{"size":15452,"mtime":1611219189847,"results":"69","hashOfConfig":"49"},{"size":9518,"mtime":1611219189847,"results":"70","hashOfConfig":"49"},{"size":4959,"mtime":1611219189844,"results":"71","hashOfConfig":"49"},{"size":13297,"mtime":1611219189844,"results":"72","hashOfConfig":"49"},{"size":17611,"mtime":1611219189843,"results":"73","hashOfConfig":"49"},{"size":4930,"mtime":1611219189841,"results":"74","hashOfConfig":"49"},{"size":9185,"mtime":1611219189845,"results":"75","hashOfConfig":"49"},{"size":6101,"mtime":1611219189845,"results":"76","hashOfConfig":"49"},{"size":5890,"mtime":1611219189843,"results":"77","hashOfConfig":"49"},{"size":6114,"mtime":1611219189842,"results":"78","hashOfConfig":"49"},{"size":6103,"mtime":1611219189839,"results":"79","hashOfConfig":"49"},{"size":13979,"mtime":1611219189842,"results":"80","hashOfConfig":"49"},{"size":17551,"mtime":1611219189840,"results":"81","hashOfConfig":"49"},{"size":9187,"mtime":1611219189842,"results":"82","hashOfConfig":"49"},{"size":5890,"mtime":1611219189840,"results":"83","hashOfConfig":"49"},{"size":6919,"mtime":1611219189887,"results":"84","hashOfConfig":"49"},{"size":5574,"mtime":1611219189855,"results":"85","hashOfConfig":"49"},{"size":2514,"mtime":1611219189855,"results":"86","hashOfConfig":"49"},{"size":3243,"mtime":1611219189886,"results":"87","hashOfConfig":"49"},{"size":10170,"mtime":1611219189875,"results":"88","hashOfConfig":"49"},{"size":5045,"mtime":1611219189881,"results":"89","hashOfConfig":"49"},{"size":3487,"mtime":1611219189876,"results":"90","hashOfConfig":"49"},{"size":2309,"mtime":1611219189848,"results":"91","hashOfConfig":"49"},{"size":2704,"mtime":1611219189876,"results":"92","hashOfConfig":"49"},{"size":8232,"mtime":1611219189883,"results":"93","hashOfConfig":"49"},{"size":6101,"mtime":1611219189885,"results":"94","hashOfConfig":"49"},{"size":4558,"mtime":1611219189879,"results":"95","hashOfConfig":"49"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"4619vp",{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"100"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"100"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"100"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"100"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"100"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"100"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"100"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"100"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"100"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"100"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"100"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"100"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"100"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"100"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"100"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"100"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"100"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"100"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"100"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"100"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"100"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"100"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"100"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"100"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"100"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"100"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"100"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"100"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"100"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"100"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"100"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"100"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"100"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"100"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"100"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"100"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"100"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"100"},"/app/src/index.js",[],"/app/src/App.js",[],["229","230"],"/app/src/serviceWorker.js",[],"/app/src/pages/SchoolHomePage.js",["231"],"import React from 'react'\nimport add from '.././assets/add.svg'\nimport groupIcon2 from '.././assets/groupIcon2.svg';\n\nimport SideNavBar from '../components/sidebar/SideNavBar';\nimport { useHistory } from \"react-router-dom\";\nimport { useState, useEffect } from 'react';\n\nimport fire from '.././config/fire';\n\n// This page/component serves as all the school's home page\nexport default function SchoolHomePage() {\n\n    //auth variable\n    const [user, setUser] = useState(null);\n\n    //checks if the user is logged in\n    useEffect(() => {\n        fire.auth().onAuthStateChanged(user => {\n            if (user){\n                setUser(user);\n            }else{\n                history.push('/');\n            }\n            \n          })\n      });\n    //navigation variable to naviagate to other pages\n    let history = useHistory();\n\n    //variable for toggling the modal to ask user if they really want to replace the existing roster\n    const [showNewRostertModal, setShowNewRosterModal] = useState(false)\n\n    //what happens when add roster button is clicked, \n    //it toggles the showNewRostertModal variable where a \n    //prompt will ask the user if they really want a new roster\n    const addRoster = () => {\n        console.log(\"Add New Roster!\");\n        setShowNewRosterModal(!showNewRostertModal);\n    }\n\n    //Prompt yes button, if the user chooses to add a new roster,\n    //they will be taken to the new roster form page\n    const newRosterYes = () => {\n        console.log(\"YES NEW ROSTER!\");\n        setShowNewRosterModal(!showNewRostertModal);\n\n        fire.auth().onAuthStateChanged(user => {\n            if (user){\n                history.push('/schoolhome/addrosterform');\n            }else{\n                history.push('/');\n            }\n            \n          })\n    }\n\n    //Prompt yes button, if the user chooses to not add a new roster,\n    //the prompt will disappear and the user will stay on the same page\n    const newRosterNo = () => {\n        console.log(\"DONT NEW ROSTER!\");\n        setShowNewRosterModal(!showNewRostertModal);\n    }\n\n    //what happens when check existing roster button is clicked, \n    //it navigates to appjam's current instuctor roster\n    const currentRoster = () => {\n        fire.auth().onAuthStateChanged(user => {\n            if (user){\n                history.push('/schoolhome/roster');\n                // history.push('/appjamhome/roster');\n            }else{\n                history.push('/');\n            }\n            \n          })\n\n    }\n\n    return (\n        <div>\n            <SideNavBar chosen=\"school\"/>\n\n            <div className=\"programPageContainer\">\n                <h1 className=\"programPageTitle\">school</h1>\n\n                <div className=\"hozLineDivider\"></div>\n\n                <div style={buttonsContainer}>\n                    <button onClick={currentRoster} className=\"programPageAddRosterBtn1\">\n                        <img src={groupIcon2} className=\"addLogo1\" alt=\"logo\"/>\n                        <h4 className=\"addRosterLaber1\">Check Existing Roster</h4>\n                    </button>\n\n                    <button onClick={addRoster} className=\"programPageAddRosterBtn\">\n                        <img src={add} className=\"addLogo\" alt=\"logo\"/>\n                        <h4 className=\"addRosterLaber\">New Roster</h4>\n                    </button>\n                    {showNewRostertModal?(\n                        <div style={modalContainer}>\n                            <div style={modal}>\n                                <h4>Are you sure you want to make a new roster?</h4>\n                                <h5>This will delete the current institutions roster.</h5>\n                                <div style={modalOptions}>\n                                    <button onClick={newRosterNo} style={noBtn}>NO</button>\n                                    <button onClick={newRosterYes} style={yesBtn}>Yes</button>\n                                </div>\n                            </div>\n                        </div>\n                    ):null}\n                </div>\n\n            </div>\n\n        </div>\n    )\n}\n\nconst buttonsContainer = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    marginLeft: \"51px\"\n}\n\nconst modalContainer = {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    position: \"fixed\",\n    width: \"100vw\",\n    height: \"100vh\",\n    backgroundColor: \"rgb(0, 0, 0, 0.5)\",\n    bottom: 0,\n    right: 0,\n    \n}\n\nconst modal = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    // justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"25vw\",\n    height: \"20vh\",\n    backgroundColor: \"white\",\n    borderRadius: \"10px\",\n    padding: \"45px\"\n}\n\nconst modalOptions = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: \"25px\"\n}\n\nconst yesBtn = {\n    fontSize: \"14px\",\n    color: \"#49479D\",\n    backgroundColor: \"white\",\n    border: \"0.5px solid #49479D\",\n    borderRadius: \"28px\",\n    height: \"46px\",\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"5vw\",\n    marginLeft: \"5vw\"\n\n}\n\nconst noBtn = {\n    fontSize: \"14px\",\n    color: \"white\",\n    backgroundColor: \"#49479D\",\n    // border: \"0.5px solid #49479D\",\n    borderRadius: \"28px\",\n    height: \"46px\",\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    width: \"5vw\",\n}","/app/src/pages/LoginPage.js",["232","233"],"import React from 'react';\nimport dfs_logo_fullcolor_320x132_google from './../assets/dfs_logo_fullcolor_320x132_google.png';\nimport fire from '.././config/fire';\n\n// import {useHistory} from 'react-router-dom';\n\n\nclass LoginPage extends React.Component {\n  \n    \n    constructor(props){\n        super(props)\n        this.state={\n            email: \"\",\n            password: \"\",\n            invalidEmail: \"\",\n            invalidCredentialstyle : {\n                invalidEmail: {\n                    color: \"white\",\n                    fontSize: 8\n                },\n                wrongPassword: {\n                    color: \"white\",\n                    fontSize: 8,\n                },\n            }\n        }\n    }\n\n    componentDidMount(){\n        fire.auth().onAuthStateChanged(user => {\n            if (user){\n                this.props.history.push('/schoolhome');\n            }else{\n                this.props.history.push('/');\n            }\n            \n          })\n    }\n\n    // on change handler for email and password input fields\n    onChange = (e) => this.setState({[e.target.name]: e.target.value});\n\n    // what happens when \"login\" button is clicked\n    onSubmit = (e) => {\n        e.preventDefault();\n\n        fire.auth().signInWithEmailAndPassword(this.state.email, this.state.password).then((u)=>{\n            console.log(u);\n            this.props.history.push('/schoolhome');\n        }).catch((err)=>{\n            if (err.code === \"auth/invalid-email\" || err.code === \"auth/user-not-found\"){\n                console.log(\"Invalid Email. Please try again.\")\n                this.setState({invalidEmail: \"Invalid Email. Please try again.\"});\n                if (err.code === \"auth/user-not-found\"){\n                    console.log(\"User does not exist. Please try again.\")\n                    this.setState({invalidEmail: \"User does not exist. Please try again.\"});\n                }\n                this.setState({\n                    invalidCredentialstyle : {\n                        invalidEmail: {\n                            color: \"red\",\n                            fontSize: 8\n                        },\n                        wrongPassword: {\n                            color: \"white\",\n                            fontSize: 8,\n                        },\n                    }\n                  });\n\n            }else if (err.code === \"auth/wrong-password\"){\n                console.log(\"Wrong Password. Please try again.\")\n\n                this.setState({\n                    invalidCredentialstyle : {\n                        invalidEmail: {\n                            color: \"white\",\n                            fontSize: 8\n                        },\n                        wrongPassword: {\n                            color: \"red\",\n                            fontSize: 8,\n                        },\n                    }\n                  });\n            }\n        });\n    }\n  \n    clickedForgotPassword = (e) => {\n        console.log(\"clicked forgot password\");\n        this.props.history.push('/resetpassword');\n    }\n\n    render() {\n    return (\n\n        <div className = \"mainContainer\" style = {mainContainerStyle}>\n            <div className=\"flex-container\" style = {flexContainerStyle}>\n                \n                <div style ={iconRow}>\n\n                    <img src={dfs_logo_fullcolor_320x132_google} alt=\"Logo\" style={logoStyle}/>\n\n                </div>\n\n                <form onSubmit = {this.onSubmit} style = {formStyle}>\n                    <input \n                        type = \"text\"\n                        name = \"email\"\n                        placeholder = \"Email...\"\n                        style ={usernameRow}\n                        value = {this.state.email}\n                        onChange = {this.onChange}\n                    />\n\n                    <h3 style={this.state.invalidCredentialstyle.invalidEmail}>{this.state.invalidEmail}</h3>  {/* Invalid Email. Please try again. */}\n\n                    <input \n                        type = \"password\"\n                        name = \"password\"\n                        placeholder = \"Password...\"\n                        style ={passwordRow}\n                        value = {this.state.password}\n                        onChange = {this.onChange}\n                    />\n                    <h3 style={this.state.invalidCredentialstyle.wrongPassword}>Wrong Password. Please try again.</h3>\n\n                    <h3 onClick={this.clickedForgotPassword} style={forgotPassword}>Forgot Password?</h3>\n\n                    <input \n                        type = 'submit'\n                        value = 'Submit'\n                        className = 'button'\n                        style ={loginBtnRow}\n                    />\n                </form>\n\n            </div>\n        </div>\n    )\n  }\n}\n\nconst tempUsername = \"temp\";\nconst tempPass = \"123abc\"\n\nconst mainContainerStyle = {\n    width: '100vw',\n    height: '100vh',\n    display: \"flex\",\n    flexDirection: 'column',\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    backgroundColor: '#CCEAFF'\n}\n\nconst flexContainerStyle = {\n    display: \"flex\",\n    flexDirection: 'column',\n    // justifyContent: \"center\",\n    alignItems: \"center\",\n    backgroundColor: \"white\",\n    height: \"35%\",\n    width: \"25%\",\n    borderRadius: \"29px\"\n\n}\n\nconst iconRow = {\n    display: \"flex\",\n    flexDirection: 'column',\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"100%\",\n    // backgroundColor: \"red\",\n    padding: 10,\n    margin: 15\n}\n\nconst logoStyle = {\n    width: \"40%\"\n}\n\nconst formStyle = {\n    display: \"flex\",\n    flexDirection: 'column',\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"60%\"\n}\n\nconst usernameRow = {\n    width: \"100%\",\n    // backgroundColor: \"yellow\",\n    margin: 5,\n    padding: 10,\n    borderColor: \"#5B7082\",\n    borderRadius: 3,\n    borderWidth: 0.5,\n    fontSize: 12\n}\n\nconst passwordRow = {\n    width: \"100%\",\n    // backgroundColor: \"blue\",\n    margin: 10,\n    padding: 10,\n    borderColor: \"#5B7082\",\n    borderRadius: 3,\n    borderWidth: 0.5,\n    fontSize: 12\n}\n\nconst loginBtnRow = {\n    width: \"30%\",\n    // backgroundColor: \"green\",\n    marginTop: 10,\n    marginBottom: 10,\n    alignItems: \"right\",\n    marginLeft: \"auto\",\n    padding: 8,\n    borderRadius: 3,\n    borderWidth: 0,\n    backgroundColor: \"#0099FF\",\n    color: \"#FFFFFF\",\n    fontSize: 12,\n\n}\n\nconst forgotPassword = {\n    fontSize: \"12px\",\n    fontWeight: \"400\",\n    color: \"#0099FF\",\n    cursor: \"pointer\",\n    marginTop: \"10px\"\n}\n\nexport default LoginPage;","/app/src/pages/SpheroHomePage.js",["234"],"import React from 'react'\nimport add from '.././assets/add.svg'\nimport groupIcon2 from '.././assets/groupIcon2.svg';\n\nimport SideNavBar from '../components/sidebar/SideNavBar';\nimport { useHistory } from \"react-router-dom\";\nimport { useState, useEffect } from 'react';\n\nimport fire from '.././config/fire';\n\n// This page/component serves as sphero's home page\nexport default function SpheroHomePage() {\n\n    //auth variable\n    const [user, setUser] = useState(null);\n\n    //checks if the user is logged in\n    useEffect(() => {\n        fire.auth().onAuthStateChanged(user => {\n            if (user){\n                setUser(user);\n            }else{\n                history.push('/');\n            }\n            \n          })\n      });\n\n    //navigation variable to naviagate to other pages\n    let history = useHistory();\n\n    //variable for toggling the modal to ask user if they really want to replace the existing roster\n    const [showNewRostertModal, setShowNewRosterModal] = useState(false)\n\n    //what happens when add roster button is clicked, \n    //it toggles the showNewRostertModal variable where a \n    //prompt will ask the user if they really want a new roster\n    const addRoster = () => {\n        console.log(\"Add New Roster!\");\n        setShowNewRosterModal(!showNewRostertModal);\n    }\n\n    //Prompt yes button, if the user chooses to add a new roster,\n    //they will be taken to the new roster form page\n    const newRosterYes = () => {\n        console.log(\"YES NEW ROSTER!\");\n        setShowNewRosterModal(!showNewRostertModal);\n\n        fire.auth().onAuthStateChanged(user => {\n            if (user){\n                history.push('/spherohome/addrosterform');\n            }else{\n                history.push('/');\n            }\n            \n          })\n    }\n\n    //Prompt yes button, if the user chooses to not add a new roster,\n    //the prompt will disappear and the user will stay on the same page\n    const newRosterNo = () => {\n        console.log(\"DONT NEW ROSTER!\");\n        setShowNewRosterModal(!showNewRostertModal);\n    }\n\n    //what happens when check existing roster button is clicked, \n    //it navigates to appjam's current instuctor roster\n    const currentRoster = () => {\n        fire.auth().onAuthStateChanged(user => {\n            if (user){\n                history.push('/spherohome/roster');\n                // history.push('/appjamhome/roster');\n            }else{\n                history.push('/');\n            }\n            \n          })\n\n    }\n\n\n\n    return (\n        <div>\n            <SideNavBar chosen=\"sphero\"/>\n\n            <div className=\"programPageContainer\">\n                <h1 className=\"programPageTitle\">sphero</h1>\n\n                <div className=\"hozLineDivider\"></div>\n\n                <div style={buttonsContainer}>\n                    <button onClick={currentRoster} className=\"programPageAddRosterBtn1\">\n                        <img src={groupIcon2} className=\"addLogo1\" alt=\"logo\"/>\n                        <h4 className=\"addRosterLaber1\">Check Existing Roster</h4>\n                    </button>\n\n                    <button onClick={addRoster} className=\"programPageAddRosterBtn\">\n                        <img src={add} className=\"addLogo\" alt=\"logo\"/>\n                        <h4 className=\"addRosterLaber\">New Roster</h4>\n                    </button>\n                    {showNewRostertModal?(\n                        <div style={modalContainer}>\n                            <div style={modal}>\n                                <h4>Are you sure you want to make a new roster?</h4>\n                                <h5>This will delete the current shpero instructor roster.</h5>\n                                <div style={modalOptions}>\n                                    <button onClick={newRosterNo} style={noBtn}>NO</button>\n                                    <button onClick={newRosterYes} style={yesBtn}>Yes</button>\n                                </div>\n                            </div>\n                        </div>\n                    ):null}\n                </div>\n\n            </div>\n\n        </div>\n    )\n}\n\nconst buttonsContainer = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    marginLeft: \"51px\"\n}\n\nconst modalContainer = {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    position: \"fixed\",\n    width: \"100vw\",\n    height: \"100vh\",\n    backgroundColor: \"rgb(0, 0, 0, 0.5)\",\n    bottom: 0,\n    right: 0,\n    \n}\n\nconst modal = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    // justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"25vw\",\n    height: \"20vh\",\n    backgroundColor: \"white\",\n    borderRadius: \"10px\",\n    padding: \"45px\"\n}\n\nconst modalOptions = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: \"25px\"\n}\n\nconst yesBtn = {\n    fontSize: \"14px\",\n    color: \"#49479D\",\n    backgroundColor: \"white\",\n    border: \"0.5px solid #49479D\",\n    borderRadius: \"28px\",\n    height: \"46px\",\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"5vw\",\n    marginLeft: \"5vw\"\n\n}\n\nconst noBtn = {\n    fontSize: \"14px\",\n    color: \"white\",\n    backgroundColor: \"#49479D\",\n    // border: \"0.5px solid #49479D\",\n    borderRadius: \"28px\",\n    height: \"46px\",\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    width: \"5vw\",\n}","/app/src/pages/AppjamHomePage.js",["235"],"import React from 'react'\nimport add from '.././assets/add.svg'\nimport groupIcon2 from '.././assets/groupIcon2.svg';\n\nimport SideNavBar from '../components/sidebar/SideNavBar';\nimport { useHistory } from \"react-router-dom\";\nimport { useState, useEffect } from 'react';\n\nimport fire from '.././config/fire';\n\n// This page/component serves as appjam+'s home page\nexport default function AppjamHomePage() {\n\n    //auth variable\n    const [user, setUser] = useState(null);\n\n    //checks if the user is logged in\n    useEffect(() => {\n        fire.auth().onAuthStateChanged(user => {\n            if (user){\n                setUser(user);\n            }else{\n                history.push('/');\n            }\n            \n          })\n      });\n\n    //variable for toggling the modal to ask user if they really want to replace the existing roster\n    const [showNewRostertModal, setShowNewRosterModal] = useState(false)\n\n    //navigation variable to naviagate to other pages\n    let history = useHistory();\n\n    //what happens when add roster button is clicked, \n    //it toggles the showNewRostertModal variable where a \n    //prompt will ask the user if they really want a new roster\n    const addRoster = () => {\n        console.log(\"Add New Roster!\");\n        setShowNewRosterModal(!showNewRostertModal);\n    }\n\n    //Prompt yes button, if the user chooses to add a new roster,\n    //they will be taken to the new roster form page\n    const newRosterYes = () => {\n        console.log(\"YES NEW ROSTER!\");\n        setShowNewRosterModal(!showNewRostertModal);\n        fire.auth().onAuthStateChanged(user => {\n            if (user){\n                history.push('/appjamhome/addrosterform');\n                // history.push('/appjamhome/roster');\n            }else{\n                history.push('/');\n            }\n            \n          })\n    }\n\n    //Prompt yes button, if the user chooses to not add a new roster,\n    //the prompt will disappear and the user will stay on the same page\n    const newRosterNo = () => {\n        console.log(\"DONT NEW ROSTER!\");\n        setShowNewRosterModal(!showNewRostertModal);\n    }\n\n    //what happens when check existing roster button is clicked, \n    //it navigates to appjam's current instuctor roster\n    const currentRoster = () => {\n        fire.auth().onAuthStateChanged(user => {\n            if (user){\n                history.push('/appjamhome/roster');\n                // history.push('/appjamhome/roster');\n            }else{\n                history.push('/');\n            }\n            \n          })\n\n    }\n\n    return (\n        <div>\n            <SideNavBar chosen=\"appjam\"/>\n\n            <div className=\"programPageContainer\">\n                <h1 className=\"programPageTitle\">appjam+</h1>\n\n                <div className=\"hozLineDivider\"></div>\n\n                <div style={buttonsContainer}>\n                    <button onClick={currentRoster} className=\"programPageAddRosterBtn1\">\n                        <img src={groupIcon2} className=\"addLogo1\" alt=\"logo\"/>\n                        <h4 className=\"addRosterLaber1\">Check Existing Roster</h4>\n                    </button>\n\n                    <button onClick={addRoster} className=\"programPageAddRosterBtn\">\n                        <img src={add} className=\"addLogo\" alt=\"logo\"/>\n                        <h4 className=\"addRosterLaber\">New Roster</h4>\n                    </button>\n                    {showNewRostertModal?(\n                        <div style={modalContainer}>\n                            <div style={modal}>\n                                <h4 style = {text}>Are you sure you want to make a new roster?</h4>\n                                <h5 style = {text}>This will delete the current appjam+ instructor roster.</h5>\n                                <div style={modalOptions}>\n                                    <button onClick={newRosterNo} style={noBtn}>NO</button>\n                                    <button onClick={newRosterYes} style={yesBtn}>Yes</button>\n                                </div>\n                            </div>\n                        </div>\n                    ):null}\n                </div>\n\n            </div>\n\n        </div>\n    )\n}\n\nconst text = {\n    fontSize: \"14px\",\n    fontWeight: \"500\"\n}\n\nconst buttonsContainer = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    marginLeft: \"51px\"\n}\n\nconst modalContainer = {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    position: \"fixed\",\n    width: \"100vw\",\n    height: \"100vh\",\n    backgroundColor: \"rgb(0, 0, 0, 0.5)\",\n    bottom: 0,\n    right: 0,\n    \n}\n\nconst modal = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    // justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"25vw\",\n    height: \"20vh\",\n    backgroundColor: \"white\",\n    borderRadius: \"10px\",\n    padding: \"45px\"\n}\n\nconst modalOptions = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: \"25px\"\n}\n\nconst yesBtn = {\n    fontSize: \"14px\",\n    color: \"#49479D\",\n    backgroundColor: \"white\",\n    border: \"0.5px solid #49479D\",\n    borderRadius: \"28px\",\n    height: \"46px\",\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"5vw\",\n    marginLeft: \"5vw\"\n\n}\n\nconst noBtn = {\n    fontSize: \"14px\",\n    color: \"white\",\n    backgroundColor: \"#49479D\",\n    // border: \"0.5px solid #49479D\",\n    borderRadius: \"28px\",\n    height: \"46px\",\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    width: \"5vw\",\n}","/app/src/pages/ResetPassword.js",[],"/app/src/pages/UploadInstitutionPage.js",["236","237"],"import React, {Component} from 'react';\nimport Dropzone from 'react-dropzone';\nimport csv from 'csv';\n\n// Page for uploading a csv file institution roster\nclass UploadInstitutionsPage extends Component {\n\n    // Splits the strings that are read from csv file and returns array with first and third token. Used mainly for the schedule (Monday: 10:00-12:00 returns [10:00, 12:00]\n    splitString = (string) => {\n        if (string == \"\") {\n            return \"\";\n        }\n        else {\n            var tokens = string.split(\" \");\n            return [tokens[0], tokens[2]];\n        }\n    }\n\n    // Given a program(Appjam, Webjam, Sphero), checks to see if a school for that program has already been uploaded to the database. We do this since we need to change the \"New\" boolean JSON value for the API to operate properly.\n    checkNew = (program, programList) => {\n        if (programList.includes(program)) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n\n    // Handles looping through the csv file for the data entries and calling the API to upload to the database\n    onDrop(files) {\n        this.setState({ files });\n\n        var file = files[0];\n\n        const reader = new FileReader();\n        reader.onload = () => {\n            csv.parse(reader.result, (err, data) => {\n\n                var programList = [];\n                \n                const firstInstitution = {\"Name\": data[1][0], \"Address\": data[1][1], \"Program\": [data[1][3]], \"County\": data[1][2], \"Instructors\": parseInt(data[1][4]),\n                                            \"Monday\": this.splitString(data[1][5]), \"Tuesday\": this.splitString(data[1][6]), \"Wednesday\": this.splitString(data[1][7]),\n                                            \"Thursday\": this.splitString(data[1][8]), \"Friday\": this.splitString(data[1][9]), \"New\": true};\n\n                programList.push(data[1][3]);\n\n                fetch('https://apurva29.pythonanywhere.com/uploadinstitutions', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n\n                    },\n                    body: JSON.stringify(firstInstitution)\n                })\n\n                for (var i = 2; i < data.length; i++) {\n                    const name = data[i][0];\n                    const address = data[i][1];\n                    const county = data[i][2];\n                    const program = data[i][3];\n                    const instructors = data[i][4];\n                    const monday = data[i][5];\n                    const tuesday = data[i][6];\n                    const wednesday = data[i][7];\n                    const thursday = data[i][8];\n                    const friday = data[i][9];\n                    \n                    const newInstitution = {\"Name\": name, \"Address\": address, \"Program\": [program], \"County\" : county, \"Instructors\": parseInt(instructors), \"Monday\": this.splitString(monday),\n                                            \"Tuesday\": this.splitString(tuesday), \"Wednesday\": this.splitString(wednesday), \"Thursday\": this.splitString(thursday), \"Friday\": this.splitString(friday), \"New\": this.checkNew(program, programList)};\n\n                    fetch('https://apurva29.pythonanywhere.com/uploadinstitutions', {\n                        method: 'POST',\n                        headers: {\n                        'Content-Type': 'application/json',\n\n                        },\n                        body: JSON.stringify(newInstitution)\n                    })\n\n                    if (programList.includes(program) == false) {\n                        programList.push(program);\n                    }\n                };\n            });\n        };\n\n        reader.readAsBinaryString(file);\n    }\n\n    // Routing for the Next button to go to the correct page\n    goNext=()=> {\n        this.props.history.push(\"/schoolhome/roster\");\n    }\n\n    render() {\n        const fontSize = \"18px\";\n\n        return (\n            <div style={mainContainerStyle} align = \"center\" oncontextmenu=\"return false\">\n                <br /><br /><br />\n                <div style={dropZoneStyle} className = \"dropzone\">\n                    <h2 style={h2Style}>Please upload your <font size={fontSize} color=\"#0099FF\">CSV </font>institution roster...</h2>\n                    <Dropzone accept=\".csv\" onDropAccepted={this.onDrop.bind(this)} style={dropBoxStyle}>upload new..</Dropzone>\n                    <br /><br /><br />\n                    <button onClick={this.goNext} style={nextButtonStyle}>Next</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mainContainerStyle = {\n    width: \"100vw\",\n    height: \"100vh\",\n    backgroundColor: \"#D2D5DA\",\n}\n\nconst dropZoneStyle = {\n    position: \"relative\",\n    backgroundColor: \"white\",\n    borderRadius: '29px',\n    display: \"inline-block\",\n    boxShadow: '0 4px 4px rgba(0,0,0,0.25)',\n    top: \"25%\",\n    width: \"30%\"\n}\n\nconst dropBoxStyle = {\n    width: \"40%\",\n    borderStyle: \"solid\",\n    borderWidth: \"1px\",\n    borderRadius: \"4px\",\n    borderColor: \"#9097A3\",\n    fontFamily: \"Rubik\",\n    color: \"#5B7082\",\n    cursor: \"pointer\",\n    marginTop: \"40px\",\n    paddingTop: \"8px\",\n    paddingBottom: \"8px\"\n}\n\nconst h2Style = {\n    fontFamily: \"Rubik\",\n    fontWeight: \"normal\",\n    fontStyle: \"normal\",\n    fontSize: \"18px\",\n    lineHeight: \"21px\",\n    paddingTop: \"50px\"\n}\n\nconst nextButtonStyle = {\n    backgroundColor: \"#0099FF\",\n    border: \"none\",\n    color: \"white\",\n    fontFamily: \"Rubik\",\n    fontSize: \"1vw\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n    paddingTop: \"10px\",\n    paddingBottom: \"10px\",\n    position: \"relative\",\n    left: \"120px\",\n    bottom: \"10px\",\n    borderRadius: \"3px\",\n    marginBottom: \"45px\",\n    cursor: \"pointer\"\n}\n\nexport default UploadInstitutionsPage;","/app/src/pages/TemplatePage.js",["238"],"import React from 'react'\n\nimport SideNavBar from '../components/sidebar/SideNavBar';\nimport { useHistory } from \"react-router-dom\";\nimport { useState, useEffect } from 'react';\n\nimport fire from '.././config/fire';\n\nexport default function TemplatePage() {\n\n    const [user, setUser] = useState(null);\n\n    let history = useHistory();\n\n    //checks if user is currently logged in\n    useEffect(() => {\n        fire.auth().onAuthStateChanged(user => {\n            if (user){\n                setUser(user);\n            }else{\n                history.push('/');\n            }\n            \n          })\n      });\n\n\n    return (\n        <div>\n            <SideNavBar />\n\n            <div className=\"programPageContainer\">\n                <h1 className=\"programPageTitle\">template page</h1>\n\n                <div className=\"hozLineDivider\"></div>\n\n            </div>\n\n        </div>\n    )\n}","/app/src/pages/WebjamHomePage.js",["239"],"import React from 'react'\nimport add from '.././assets/add.svg'\nimport groupIcon2 from '.././assets/groupIcon2.svg';\n\nimport SideNavBar from '../components/sidebar/SideNavBar';\nimport { useHistory } from \"react-router-dom\";\nimport { useState, useEffect } from 'react';\n\nimport fire from '.././config/fire';\n\n// This page/component serves as webjam's home page\nexport default function WebjamHomePage() {\n\n    //auth variable\n    const [user, setUser] = useState(null);\n\n    //checks if the user is logged in\n    useEffect(() => {\n        fire.auth().onAuthStateChanged(user => {\n            if (user){\n                setUser(user);\n            }else{\n                history.push('/');\n            }\n            \n          })\n      });\n\n    //navigation variable to naviagate to other pages\n    let history = useHistory();\n\n    //variable for toggling the modal to ask user if they really want to replace the existing roster\n    const [showNewRostertModal, setShowNewRosterModal] = useState(false)\n\n    //what happens when add roster button is clicked, \n    //it toggles the showNewRostertModal variable where a \n    //prompt will ask the user if they really want a new roster\n    const addRoster = () => {\n        console.log(\"Add New Roster!\");\n        setShowNewRosterModal(!showNewRostertModal);\n    }\n\n    //Prompt yes button, if the user chooses to add a new roster,\n    //they will be taken to the new roster form page\n    const newRosterYes = () => {\n        console.log(\"YES NEW ROSTER!\");\n        setShowNewRosterModal(!showNewRostertModal);\n\n        fire.auth().onAuthStateChanged(user => {\n            if (user){\n                history.push('/webjamhome/addrosterform');\n            }else{\n                history.push('/');\n            }\n            \n          })\n    }\n\n    //Prompt yes button, if the user chooses to not add a new roster,\n    //the prompt will disappear and the user will stay on the same page\n    const newRosterNo = () => {\n        console.log(\"DONT NEW ROSTER!\");\n        setShowNewRosterModal(!showNewRostertModal);\n    }\n\n    //what happens when check existing roster button is clicked, \n    //it navigates to appjam's current instuctor roster\n    const currentRoster = () => {\n        fire.auth().onAuthStateChanged(user => {\n            if (user){\n                history.push('/webjamhome/roster');\n                // history.push('/appjamhome/roster');\n            }else{\n                history.push('/');\n            }\n            \n          })\n\n    }\n\n\n\n    return (\n        <div>\n            <SideNavBar chosen=\"webjam\"/>\n\n            <div className=\"programPageContainer\">\n                <h1 className=\"programPageTitle\">webjam</h1>\n\n                <div className=\"hozLineDivider\"></div>\n\n                <div style={buttonsContainer}>\n                    <button onClick={currentRoster} className=\"programPageAddRosterBtn1\">\n                        <img src={groupIcon2} className=\"addLogo1\" alt=\"logo\"/>\n                        <h4 className=\"addRosterLaber1\">Check Existing Roster</h4>\n                    </button>\n\n                    <button onClick={addRoster} className=\"programPageAddRosterBtn\">\n                        <img src={add} className=\"addLogo\" alt=\"logo\"/>\n                        <h4 className=\"addRosterLaber\">New Roster</h4>\n                    </button>\n                    {showNewRostertModal?(\n                        <div style={modalContainer}>\n                            <div style={modal}>\n                                <h4>Are you sure you want to make a new roster?</h4>\n                                <h5>This will delete the current webjam instructor roster.</h5>\n                                <div style={modalOptions}>\n                                    <button onClick={newRosterNo} style={noBtn}>NO</button>\n                                    <button onClick={newRosterYes} style={yesBtn}>Yes</button>\n                                </div>\n                            </div>\n                        </div>\n                    ):null}\n                </div>\n\n            </div>\n\n        </div>\n    )\n}\n\nconst buttonsContainer = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    marginLeft: \"51px\"\n}\n\nconst modalContainer = {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    position: \"fixed\",\n    width: \"100vw\",\n    height: \"100vh\",\n    backgroundColor: \"rgb(0, 0, 0, 0.5)\",\n    bottom: 0,\n    right: 0,\n    \n}\n\nconst modal = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    // justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"25vw\",\n    height: \"20vh\",\n    backgroundColor: \"white\",\n    borderRadius: \"10px\",\n    padding: \"45px\"\n}\n\nconst modalOptions = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: \"25px\"\n}\n\nconst yesBtn = {\n    fontSize: \"14px\",\n    color: \"#49479D\",\n    backgroundColor: \"white\",\n    border: \"0.5px solid #49479D\",\n    borderRadius: \"28px\",\n    height: \"46px\",\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"5vw\",\n    marginLeft: \"5vw\"\n\n}\n\nconst noBtn = {\n    fontSize: \"14px\",\n    color: \"white\",\n    backgroundColor: \"#49479D\",\n    // border: \"0.5px solid #49479D\",\n    borderRadius: \"28px\",\n    height: \"46px\",\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    width: \"5vw\",\n}","/app/src/pages/AddInstructorPage.js",[],"/app/src/pages/schoolPages/DeleteSchoolPage.js",["240","241"],"import React, {Component} from 'react';\nimport TimeRangePicker from '@wojtekmaj/react-timerange-picker';\nimport '../manual.css';\n\n//page for deleting the school\n\nclass DeleteSchoolPage extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            name: '',\n            gender: '',\n            ethnicity: '',\n            region: '',\n            univ: '',\n            year: '',\n            returner: '',\n            car: '',\n            language: '',\n            shirtsize: '',\n            multipledays: '',\n            monday: '',\n            tuesday: '',\n            wednesday: '',\n            thursday: '',\n            friday: '',\n            programs: []\n        };\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleCheck = this.handleCheck.bind(this);\n    }\n\n    // Alters state when an input field is changed\n    handleChange(e) {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    }\n\n    // Handles the toggle checkbox buttons for programs\n    handleCheck(e) {\n        if (this.state.programs.includes(e.target.value)) {\n            console.log(this.state.programs, e.target.value);\n            var idx = this.state.programs.indexOf(e.target.value);\n            this.state.programs.splice(idx, 1);\n        }\n        else {\n            this.state.programs.push(e.target.value);\n        }\n        this.setState({\n            [e.target.name]: this.state.programs\n        });\n    }\n\n    // These functions could definitely be optimized, but I couldn't figure out how to use the time range picker that I installed. These just alter the schedule sections of the state.\n    onMonday = monday => {\n        this.setState({\n            monday\n        });\n    }\n\n    onTuesday = tuesday => {\n        this.setState({\n            tuesday\n        });\n    }\n\n    onWednesday = wednesday => {\n        this.setState({\n            wednesday\n        });\n    }\n\n    onThursday = thursday => {\n        this.setState({\n            thursday\n        });\n    }\n\n    onFriday = friday => {\n        this.setState({\n            friday\n        });\n    }\n\n    // Calls the API with the current state to push data to database and then resets the state.\n    handleSubmit(e) {\n        e.preventDefault();\n        const delete_this_school = {\n            \"Season\": 'fall2020',\n            \"School\": this.state.school,\n            \"Region\": this.state.region,\n        }\n\n        console.log(JSON.stringify(delete_this_school));\n\n        fetch('https://apurva29.pythonanywhere.com/deleteschool', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(delete_this_school)\n        })\n\n        this.setState({\n            school: '',\n            region: '',\n        });\n    }\n\n    // Routing for the page\n    goBack=()=> {\n        // this.props.history.push(\"/schoolhome\");\n        // console.log(this.props.location.state.isNewRoster)\n        this.props.history.push(\"/schoolhome/roster\");\n    }\n\n    render() {\n        const {value} = this.state;\n        return (\n            <React.Fragment>\n                <div className=\"app\" align=\"center\">\n                    <div className=\"container\">\n                        <div className=\"title\">\n                            <h1>Delete School</h1>\n                        </div>\n                        <div className=\"info_container\">\n                            <section className=\"column\">\n                                <form onSubmit={this.handleSubmit}>\n                                    <div className = \"form-row\">\n                                        \n                                        <h2>School</h2>\n                                    \n                                        <div className=\"inputs\">\n                                            <label>Name</label>\n                                            <input type=\"text\" name=\"school\" placeholder=\"University of California Irvine\"onChange={this.handleChange} value={this.state.school}/>\n                                        </div>\n                                        <div className=\"inputs\">\n                                            <label>Region</label>\n                                            <input id=\"region-input\" type=\"text\" name=\"region\" placeholder=\"Orange County\"onChange={this.handleChange} value={this.state.region}/>\n                                        </div>\n                                     \n                                    </div>\n                                    <button type=\"submit\" className=\"deletebtn\">\n                                        Delete School \n                                    </button>\n                                    <button onClick={this.goBack} className=\"nextbtn\">\n                                        Back\n                                    </button>\n                                </form>\n                            </section>\n                           \n                        </div>\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default DeleteSchoolPage;","/app/src/pages/schoolPages/AddSchoolPage.js",["242"],"\nimport React, {Component} from 'react';\nimport TimeRangePicker from '@wojtekmaj/react-timerange-picker';\nimport '../manual.css';\n\n// Page for manually uploading instructors to database. Currently not in use, but is fully functional a definite future implementation into the web app.\nclass AddSchoolPage extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            season: '', \n            name: '',\n            address: '', \n            programs: [],\n            number_of_instructors: '',\n            program_time_flexibility: '',\n            special_language_request: [],\n            is_virtual: '',\n            region: '',\n            location_preferences:[], \n            \n\n\n\n//            name: '',\n //           gender: '',\n//            ethnicity: '',\n//            region: '',\n//            univ: '',\n//            year: '',\n//            returner: '',\n//            car: '',\n//            language: '',\n//            shirtsize: '',\n//            multipledays: '',\n//            monday: '',\n//           tuesday: '',\n//            wednesday: '',\n//            thursday: '',\n//            friday: '',\n//            programs: []\n        };\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleCheckPrograms = this.handleCheckPrograms.bind(this);\n        this.handleCheckLanguages = this.handleCheckLanguages.bind(this);\n    }\n\n    // Alters state when an input field is changed\n    handleChange(e) {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    }\n\n    // Handles the toggle checkbox buttons for programs\n    handleCheckPrograms(e) {\n        if (this.state.programs.includes(e.target.value)) {\n            console.log(this.state.programs, e.target.value);\n            var idx = this.state.programs.indexOf(e.target.value);\n            this.state.programs.splice(idx, 1);\n        }\n        else {\n            this.state.programs.push(e.target.value);\n        }\n        this.setState({\n            [e.target.name]: this.state.programs\n        });\n    }\n    \n    handleCheckLanguages(e) {\n        if (this.state.special_language_request.includes(e.target.value)) {\n            console.log(this.state.special_language_request, e.target.value);\n            var idx = this.state.special_language_request.indexOf(e.target.value);\n            this.state.special_language_request.splice(idx, 1);\n        }\n        else {\n            this.state.special_language_request.push(e.target.value);\n        }\n        this.setState({\n            [e.target.name]: this.state.special_language_request\n        });\n    }\n\n\n    //create another handlecheck for the locations array\n\n    // These functions could definitely be optimized, but I couldn't figure out how to use the time range picker that I installed. These just alter the schedule sections of the state.\n    onMonday = monday => {\n        this.setState({\n            monday\n        });\n    }\n\n    onTuesday = tuesday => {\n        this.setState({\n            tuesday\n        });\n    }\n\n    onWednesday = wednesday => {\n        this.setState({\n            wednesday\n        });\n    }\n\n    onThursday = thursday => {\n        this.setState({\n            thursday\n        });\n    }\n\n    onFriday = friday => {\n        this.setState({\n            friday\n        });\n    }\n\n    // Calls the API with the current state to push data to database and then resets the state.\n    handleSubmit(e) {\n        e.preventDefault();\n        var program_map = {}\n        var i;\n        for (i = 0; i < this.state.programs.length; i++)\n        {\n            program_map[this.state.programs[i]] = 1;    \n        }\n      //  var objectMap = new Map(this.state.programs.map(obj => [obj, 1]));\n        //program_dict = new Map(objects.map(this.state.programs => [this.state.programs.id, this.state.programs]));\n        const instructor = {\n            \"Season\" : 'fall2020',\n            \"Name\": this.state.name,\n            \"Address\": this.state.address, \n            \"Program\": program_map,\n            \"Number_of_instructors\": this.state.number_of_instructors,\n            \"Program_time_flexibility\": this.state.program_time_flexibility,\n            \"Special_language_request\": this.state.special_language_request,\n            \"Is_virtual\": this.state.is_virtual,\n            \"Region\": this.state.region,\n            \"Location_preferences\": this.state.location_preferences,\n\n        }\n\n        console.log(JSON.stringify(instructor));\n\n        fetch('https://apurva29.pythonanywhere.com/uploadschool', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(instructor)\n        })\n\n        this.setState({\n            season: '',\n            name: '',\n            address: '', \n            programs: [],\n            number_of_instructors: '',\n            program_time_flexibility: '',\n            special_language_request: [],\n            is_virtual: '',\n            region: '',\n            location_preferences:[] \n        });\n    }\n\n    // Routing for the page\n    goNext=()=> {\n        // this.props.history.push(\"/schoolhome\");\n        // console.log(this.props.location.state.isNewRoster)\n        this.props.history.push(\"/schoolhome/roster\");\n    }\n\n    render() {\n        const {value} = this.state;\n        return (\n            <React.Fragment>\n                <div className=\"app\" align=\"center\">\n                    <div className=\"container\">\n                        <div className=\"title\">\n                            <h1>Add New School</h1>\n                        </div>\n                        <div className=\"info_container\">\n                            <section className=\"column\">\n                                <form onSubmit={this.handleSubmit}>\n                                    <div className = \"form-row\">\n                                        <div className=\"inputs\">\n                                            <label>Name</label>\n                                            <input type=\"text\" name=\"name\" placeholder=\"University of California Irvine\" onChange={this.handleChange} value={this.state.name}/>\n                                        </div>\n                                        <div className=\"inputs\">\n                                            <label>Address</label>\n                                            <input id=\"region-input\" type=\"text\" name=\"address\" placeholder=\"Street address, City, State, Zip\" onChange={this.handleChange} value={this.state.address}/>\n                                        </div> \n                                        <div className=\"inputs\">\n                                        <label>Virtual</label>\n                                        <div className = \"radio-toolbar\">\n                                            <input id=\"yes-virtual-btn\" type=\"radio\" name=\"is_virtual\" value=\"Yes\" checked={value} onChange={this.handleChange}/>\n                                                <label for=\"yes-virtual-btn\">Yes</label>\n                                            <input id=\"no-virtual-btn\" type=\"radio\" name=\"is_virtual\" value=\"No\" checked={value} onChange={this.handleChange}/>\n                                                <label for=\"no-virtual-btn\">No</label>\n\n                                        </div>\n                                        </div>  \n                                        <div className = \"inputs\">\n                                        <label>Program Time Flexibility</label>\n                                        <div className = \"radio-toolbar\">\n                                            <input id=\"yes-prgm-flex-btn\" type=\"radio\" name=\"program_time_flexibility\" value=\"Yes\" checked={value} onChange={this.handleChange}/>\n                                            <label for=\"yes-prgm-flex-btn\">Yes</label>\n                                            <input id=\"no-prgm-flex-btn\" type=\"radio\" name=\"program_time_flexibility\" value=\"No\" checked={value} onChange={this.handleChange}/>\n                                            <label for=\"no-prgm-flex-btn\">No</label>\n                                        </div>\n                                        </div>\n\n                                        <div className=\"inputs\">\n                                            <label>Number of Instructors</label>\n                                            <input id=\"number-of-instructor-input\" type=\"text\" name=\"number_of_instructors\" placeholder=\"54\" onChange={this.handleChange} value={this.state.number_of_instructors}/>\n                                        </div> \n\n                                        <div className=\"inputs\">\n                                            <label>Languages</label>\n                                            <div className=\"radio-toolbar\">\n                                                <input id=\"English\" type=\"checkbox\" name=\"special_language_request\" value=\"English\" checked={value} onChange={this.handleCheckLanguages}/>\n                                                <label for=\"English\">English</label>\n                                                <input id=\"Spanish\" type=\"checkbox\" name=\"special_language_request\" value=\"Spanish\" checked={value} onChange={this.handleCheckLanguages}/>\n                                                <label for=\"Spanish\">Spanish</label>\n                                                <input id=\"Mandarin\" type=\"checkbox\" name=\"special_language_request\" value=\"Mandarin\" checked={value} onChange={this.handleCheckLanguages}/>\n                                                <label for=\"Mandarin\">Mandarin</label>\n                                                <input id=\"Hindi\" type=\"checkbox\" name=\"special_language_request\" value=\"Hindi\" checked={value} onChange={this.handleCheckLanguages}/>\n                                                <label for=\"Hindi\">Hindi</label>\n                                                <input id=\"French\" type=\"checkbox\" name=\"special_language_request\" value=\"French\" checked={value} onChange={this.handleCheckLanguages}/>\n                                                <label for=\"French\">French</label>\n                                                <input id=\"German\" type=\"checkbox\" name=\"special_language_request\" value=\"German\" checked={value} onChange={this.handleCheckLanguages}/>\n                                                <label for=\"German\">German</label>\n                                                <input id=\"Korean\" type=\"checkbox\" name=\"special_language_request\" value=\"Korean\" checked={value} onChange={this.handleCheckLanguages}/>\n                                                <label for=\"Korean\">Korean</label>\n                                            </div>\n                                        </div>\n                                        <div className=\"inputs\">\n                                                <label>Program(s)</label>\n                                                <div className=\"radio-toolbar\">\n                                                    <input id=\"Sphero-btn\" type=\"checkbox\" name=\"programs\" value=\"SpheroElementary\" checked={value} onChange={this.handleCheckPrograms}/>\n                                                    <label for=\"Sphero-btn\">Sphero</label>\n                                                    <input id=\"appjam-btn\" type=\"checkbox\" name=\"programs\" value=\"AppJam+\" checked={value} onChange={this.handleCheckPrograms}/>\n                                                    <label for=\"appjam-btn\">Appjam+</label>\n                                                    <input id=\"webjam-btn\" type=\"checkbox\" name=\"programs\" value=\"WebJam\" checked={value} onChange={this.handleCheckPrograms}/>\n                                                    <label for=\"webjam-btn\">Webjam</label>\n                                                </div>\n                                            </div>\n                                    </div>\n                                    <button type=\"submit\" className=\"submitbtn\">\n                                        Save & Add another\n                                    </button>\n                                    <button onClick={this.goNext} className=\"nextbtn\">\n                                        Back\n                                    </button> \n                                </form>\n                            </section>\n{/*\n                            <section className=\"column\">\n                                <form onSubmit={this.handleSubmit}>\n                                    <h2>Schedule</h2>\n                                    <div className = \"form-row\">\n                                        <div className=\"inputs\">\n                                            <label>Monday</label>\n                                            <TimeRangePicker\n                                                name=\"monday\"\n                                                value={this.state.monday}\n                                                onChange={this.onMonday}\n                                            />\n                                        </div>\n                                        <div className=\"inputs\">\n                                            <label>Tuesday</label>\n                                            <TimeRangePicker\n                                                name=\"tuesday\"\n                                                value={this.state.tuesday}\n                                                onChange={this.onTuesday}\n                                            />\n                                        </div>\n                                        <div className=\"inputs\">\n                                            <label>Wednesday</label>\n                                            <TimeRangePicker\n                                                name=\"wednesday\"\n                                                value={this.state.wednesday}\n                                                onChange={this.onWednesday}\n                                            />\n                                        </div>\n                                        <div className=\"inputs\">\n                                            <label>Thursday</label>\n                                            <TimeRangePicker\n                                                name=\"thursday\"\n                                                value={this.state.thursday}\n                                                onChange={this.onThursday}\n                                            />\n                                        </div>\n                                        <div className=\"inputs\">\n                                            <label>Friday</label>\n                                            <TimeRangePicker\n                                                name=\"friday\"\n                                                value={this.state.friday}\n                                                onChange={this.onFriday}\n                                            />\n                                        </div>\n                                        <h2>Other</h2>\n                                        <div className=\"col2-row2\">\n                                            <div className=\"inputs\">\n                                                <label>Previous Mentor</label>\n                                                <div className=\"radio-toolbar\">\n                                                    <input id=\"yes-returner-btn\" type=\"radio\" name=\"returner\" value=\"Yes\" checked={value} onChange={this.handleChange}/>\n                                                    <label for=\"yes-returner-btn\">Yes</label>\n                                                    <input id=\"no-returner-btn\" type=\"radio\" name=\"returner\" value=\"No\" checked={value} onChange={this.handleChange}/>\n                                                    <label for=\"no-returner-btn\">No</label>\n                                                </div>\n                                            </div>\n                                            <div className=\"inputs\">\n                                                <label>Car</label>\n                                                <div className=\"radio-toolbar\">\n                                                    <input id=\"yes-car-btn\" type=\"radio\" name=\"car\" value=\"Yes\" checked={value} onChange={this.handleChange}/>\n                                                    <label for=\"yes-car-btn\">Yes</label>\n                                                    <input id=\"no-car-btn\" type=\"radio\" name=\"car\" value=\"No\" checked={value} onChange={this.handleChange}/>\n                                                    <label for=\"no-car-btn\">No</label>\n                                                </div>\n                                            </div>\n                                            <div className=\"inputs\">\n                                                <label>Multiple Days</label>\n                                                <div className=\"radio-toolbar\">\n                                                    <input id=\"yes-multipledays-btn\" type=\"radio\" name=\"multipledays\" value=\"Yes\" checked={value} onChange={this.handleChange}/>\n                                                    <label for=\"yes-multipledays-btn\">Yes</label>\n                                                    <input id=\"no-multipledays-btn\" type=\"radio\" name=\"multipledays\" value=\"No\" checked={value} onChange={this.handleChange}/>\n                                                    <label for=\"no-multipledays-btn\">No</label>\n                                                </div>\n                                            </div>\n                                        </div>\n                                        <div className=\"col2-row3\">\n                                            <div className=\"inputs\">\n                                                <label>Shirt Size</label>\n                                                <div className=\"radio-toolbar\">\n                                                    <input id=\"S-btn\" type=\"radio\" name=\"shirtsize\" value=\"S\" checked={value} onChange={this.handleChange}/>\n                                                    <label for=\"S-btn\">S</label>\n                                                    <input id=\"M-btn\" type=\"radio\" name=\"shirtsize\" value=\"M\" checked={value} onChange={this.handleChange}/>\n                                                    <label for=\"M-btn\">M</label>\n                                                    <input id=\"L-btn\" type=\"radio\" name=\"shirtsize\" value=\"L\" checked={value} onChange={this.handleChange}/>\n                                                    <label for=\"L-btn\">L</label>\n                                                    <input id=\"XL-btn\" type=\"radio\" name=\"shirtsize\" value=\"XL\" checked={value} onChange={this.handleChange}/>\n                                                    <label for=\"XL-btn\">XL</label>\n                                                    <input id=\"XXL-btn\" type=\"radio\" name=\"shirtsize\" value=\"XXL\" checked={value} onChange={this.handleChange}/>\n                                                    <label for=\"XXL-btn\">XXL</label>\n                                                </div>\n                                            </div>\n                                            <div className=\"inputs\">\n                                                <label>Program(s)</label>\n                                                <div className=\"radio-toolbar\">\n                                                    <input id=\"Sphero-btn\" type=\"checkbox\" name=\"programs\" value=\"SpheroElementary\" checked={value} onChange={this.handleCheck}/>\n                                                    <label for=\"Sphero-btn\">Sphero</label>\n                                                    <input id=\"appjam-btn\" type=\"checkbox\" name=\"programs\" value=\"AppJam+\" checked={value} onChange={this.handleCheck}/>\n                                                    <label for=\"appjam-btn\">Appjam+</label>\n                                                    <input id=\"webjam-btn\" type=\"checkbox\" name=\"programs\" value=\"WebJam\" checked={value} onChange={this.handleCheck}/>\n                                                    <label for=\"webjam-btn\">Webjam</label>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    \n                                </form>\n</section>*/}\n                        </div>\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\n\nexport default AddSchoolPage;\n\n","/app/src/pages/schoolPages/SchoolRosterPage.js",["243","244"],"import React from 'react'\n\nimport SideNavBar from '../.././components/sidebar/SideNavBar';\nimport { useHistory } from \"react-router-dom\";\nimport { useState, useEffect, useRef } from 'react';\n\nimport ProgramSchoolRosterTable from '../../components/schoolPagesComponents/ProgramSchoolRosterTable'\n\nimport fire from '../.././config/fire';\n\n/*\n    This page shows the schools available from each program\n    in a table\n */\nexport default function SchoolRosterPage() {\n\n    const [user, setUser] = useState(null);\n\n    let history = useHistory();\n\n    //checks if user is currently logged in\n    useEffect(() => {\n        fire.auth().onAuthStateChanged(user => {\n            if (user){\n                setUser(user);\n            }else{\n                history.push('/');\n            }\n            \n          })\n      });\n      const deleteSchoolBtnPressed = (e) => {\n        // history.push('/appjamhome/sortedroster');\n        history.push({\n            pathname: \"/DeleteSchoolPage\",\n            state: {isNewRoster: false, program:\"sphero\"}\n        });\n    } \n    const addSchoolBtnPressed = (e) => {\n        // history.push('/appjamhome/sortedroster');\n        history.push({\n            pathname: \"/AddSchoolPage\",\n            state: {isNewRoster: false, program:\"sphero\"}\n        });\n    } \n\n    return (\n        <div>\n            <SideNavBar />\n\n            <div className=\"programPageContainer\">\n                <h1 className=\"programPageTitle\">school rosters </h1>\n\n                <div className=\"hozLineDivider\"></div>\n\n                <div style={buttonContainer}>\n                    <div style={sortBtnContainer}>\n                        <button onClick={addSchoolBtnPressed} style={addBtn}>Add School</button>\n                    </div>\n                    <div style={sortBtnContainer}>\n                        <button onClick={deleteSchoolBtnPressed} style={addBtn}>Delete School</button>\n                    </div>\n                </div> \n                    \n                <ProgramSchoolRosterTable program=\"AppJam+\" databaseName=\"AppJam+\"/>\n\n                <div style={fixMargin}>\n                    <ProgramSchoolRosterTable program=\"Sphero\" databaseName=\"SpheroElementary\" />\n                </div>\n\n                <div style={fixMargin}>\n                    <ProgramSchoolRosterTable program=\"WebJam\" databaseName=\"WebJam\"/>\n                </div>\n\n            </div>\n\n        </div>\n    )\n}\n\nconst fixMargin = {\n    marginTop: \"-380px\"\n}\n\n\n\nconst buttonContainer = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n}\n\n\nconst sortBtnContainer = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    // marginLeft: \"50vw\"\n}\nconst addBtn = {\n    fontSize: \"18px\",\n    fontWeight: \"500\",\n    color: \"#49479D\",\n    backgroundColor: \"white\",\n    borderRadius: \"28px\",\n    height: \"46px\",\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    marginLeft: \"10px\",\n    marginBottom: \"20px\",\n    width: \"300px\",\n    border: \"1px solid #49479D\"\n}\n","/app/src/pages/schoolPages/SchoolAddRosterForm.js",["245","246","247","248","249"],"import React from 'react'\n\nimport { useHistory } from \"react-router-dom\";\nimport { useState, useEffect, useRef } from 'react';\nimport person from '../.././assets/person.svg'\n\nimport fire from '../.././config/fire';\n\n/* \n    form that asks whether the user wants to upload schools manually or through a file\n*/\nexport default function SchoolAddRosterForm() {\n\n    //auth variable\n    const [user, setUser] = useState(null);\n    \n    //variable for capturing whether the user chooses\n    //manual upload of file upload\n    const [input, setInput] = useState(\"\");\n\n    //navigation variable to naviagate to other pages\n    let history = useHistory();\n\n    //checks if user is currently logged in\n    useEffect(() => {\n        fire.auth().onAuthStateChanged(user => {\n            if (user){\n                setUser(user);\n            }else{\n                history.push('/');\n            }\n            \n          })\n      });\n\n    //handles the state change everytime the user toggles \n    //between manual vs file upload\n    const onChangeRadio = (e) => {\n        setInput(e.target.value);\n        console.log(e.target.value);\n    }\n\n    //function then the next button is clicked\n    //validates user input\n    const nextClicked = () => {\n        console.log(\"submit\");\n\n        if (input === \"\"){\n            alert(\"Please select how to input your roster\")\n        }\n\n        if (input === \"file\"){\n            history.push('/schoolhome/uploadinstitution');\n        }else if (input === \"manual\"){\n            alert('manual chosen (not yet implemented)')\n        } \n    }\n\n\n    return (\n        <div style={mainContainer}>\n\n            <div style={leftHalf}>\n\n                <div style={formContainer}>\n\n                    <h3 style={textStyle}>New School Roster</h3>\n                    \n                    <form onSubmit={nextClicked} style = {formStyle}>\n                        \n                        <div style={radioButtonsContainer}>\n                       \n                            <h3 style={radiotitleText}>How do you want to add your roster?</h3>\n\n                            <div onChange={onChangeRadio}>\n\n                                {/* THIS IS A MANUAL INPUT OPTION \n                                we had planned on adding manual input to add a new roster but the way\n                                the code is implemented right, it's a little complicated and\n                                we kind of ran out of time but it's something that the future team \n                                should consider*/}\n\n                                {/* <div style={radioItem}>\n                                    <input type=\"radio\" value=\"manual\" name=\"input\"/> <p style={radioChoice}>Manual Input</p>\n                                </div> */}\n\n                                <div style={radioItem}>\n                                    <input type=\"radio\" value=\"file\" name=\"input\"/> <p style={radioChoice} >File Upload</p>\n                                </div>\n                                \n                            </div>\n\n                        </div>\n\n                        <input \n                            type = 'submit'\n                            value = 'Next'\n                            className = 'button'\n                            style= {nextBtn}\n                        />\n                    </form>\n\n                </div>\n\n            </div>\n\n            <div style={rightHalf}>\n                <img style={personIcon} src={person} alt=\"person icon\"/>\n                <div style={square}></div>\n            </div>\n\n        </div>\n    )\n}\n\nconst mainContainer = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n\n}\n\nconst leftHalf = {\n    height: \"100vh\",\n    width: \"50vw\",\n}\n\nconst rightHalf = {\n    height: \"100vh\",\n    width: \"50vw\",\n    backgroundColor: \"white\"\n}\n\nconst formContainer = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: \"20%\"\n}\n\nconst formStyle = {\n    display: \"flex\",\n    flexDirection: 'column',\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"60%\",\n    marginTop: \"30px\"\n}\n\nconst dropdowns = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n}\n\nconst textStyle = {\n    fontSize: \"48px\",\n    fontWeight: \"400\",\n    color: \"#202E47\",\n    // marginLeft: \"auto\"\n}\n\nconst radioButtonsContainer = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"left\",\n    marginTop: \"30px\"\n}\n\nconst radiotitleText = {\n    fontSize: \"18px\",\n    fontWeight: \"400\",\n    color: \"#202E47\"\n}\n\nconst radioItem = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"left\",\n    alignItems: \"center\",\n    marginTop: \"20px\"\n}\n\nconst radioChoice = {\n    fontSize: \"16px\",\n    fontWeight: \"400\",\n    color: \"#5B7082\",\n    marginLeft: \"10px\"\n}\n\nconst radioStyle = {\n    backgroundColor: \"#49479D\",\n    color: \"#49479D\"\n}\n\nconst dropdownStyle = {\n    width: \"214px\",\n    height: \"66px\",\n    marginLeft: \"5px\",\n    marginRight: \"5px\",\n    fontSize: \"18px\",\n    border: \"0px solid\",\n    boxShadow: \"1px 1px 10px #E6E6E8\"\n}\n\nconst square = {\n    width: \"50%\",\n    height: \"100vh\",\n    backgroundColor: \"#0099FF\",\n    marginLeft: \"auto\"\n}\n\nconst personIcon = {\n    position: \"absolute\",\n    height: \"300px\",\n    width: \"300px\",\n    right: \"17%\",\n    top: \"68%\"\n}\n\nconst nextBtn = {\n    width: \"105px\",\n    height: \"45px\",\n    backgroundColor: \"#0099FF\",\n    fontSize: \"18px\",\n    color: \"white\",\n    border: \"0px solid\",\n    marginTop: \"50px\",\n    marginLeft: \"auto\",\n    marginRight: \"15%\",\n    borderRadius: \"3px\"\n\n}","/app/src/config/fire.js",[],"/app/src/pages/sortingPages/appjam/AppjamUploadInstitution.js",["250","251"],"import React, {Component} from 'react';\nimport Dropzone from 'react-dropzone';\nimport csv from 'csv';\n\n// For now nothing is routed to the program upload institution pages. There's just one upload institution page from the school home page. This could be implemented if you see it being useful.\n\n// Page for Appjam program for uploading a csv file institution roster\nclass AppjamUploadInstitutionsPage extends Component {\n\n    // Splits the strings that are read from csv file and returns array with first and third token. Used mainly for the schedule (Monday: 10:00-12:00 returns [10:00, 12:00]\n    splitString = (string) => {\n        if (string == \"\") {\n            return \"\";\n        }\n        else {\n            var tokens = string.split(\" \");\n            return [tokens[0], tokens[2]];\n        }\n    }\n\n    // Given a program(Appjam, Webjam, Sphero), checks to see if a school for that program has already been uploaded to the database. We do this since we need to change the \"New\" boolean JSON value for the API to operate properly.\n    checkNew = (program, programList) => {\n        if (programList.includes(program)) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n\n    // Handles looping through the csv file for the data entries and calling the API to upload to the database\n    onDrop(files) {\n        this.setState({ files });\n\n        var file = files[0];\n\n        const reader = new FileReader();\n        reader.onload = () => {\n            csv.parse(reader.result, (err, data) => {\n\n                var programList = [];\n\n                const firstInstitution = {\"Name\": data[1][0], \"Address\": data[1][1], \"Program\": [data[1][3]], \"County\": data[1][2], \"Instructors\": parseInt(data[1][4]),\n                                            \"Monday\": this.splitString(data[1][5]), \"Tuesday\": this.splitString(data[1][6]), \"Wednesday\": this.splitString(data[1][7]),\n                                            \"Thursday\": this.splitString(data[1][8]), \"Friday\": this.splitString(data[1][9]), \"New\": true};\n\n                programList.push(data[1][3]);\n\n                fetch('http://apurva29.pythonanywhere.com/uploadinstitutions', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify(firstInstitution)\n                })\n\n                for (var i = 2; i < data.length; i++) {\n                    const name = data[i][0];\n                    const address = data[i][1];\n                    const county = data[i][2];\n                    const program = data[i][3];\n                    const instructors = data[i][4];\n                    const monday = data[i][5];\n                    const tuesday = data[i][6];\n                    const wednesday = data[i][7];\n                    const thursday = data[i][8];\n                    const friday = data[i][9];\n\n                    const newInstitution = {\"Name\": name, \"Address\": address, \"Program\": [program], \"County\" : county, \"Instructors\": parseInt(instructors), \"Monday\": this.splitString(monday),\n                                            \"Tuesday\": this.splitString(tuesday), \"Wednesday\": this.splitString(wednesday), \"Thursday\": this.splitString(thursday), \"Friday\": this.splitString(friday), \"New\": this.checkNew(program, programList)};\n\n                    fetch('http://apurva29.pythonanywhere.com/uploadinstitutions', {\n                        method: 'POST',\n                        headers: {\n                        'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify(newInstitution)\n                    })\n\n                    if (programList.includes(program) == false) {\n                        programList.push(program);\n                    }\n                };\n            });\n        };\n\n        reader.readAsBinaryString(file);\n    }\n\n    render() {\n        const fontSize = \"18px\";\n\n        return (\n            <div style={mainContainerStyle} align = \"center\" oncontextmenu=\"return false\">\n                <br /><br /><br />\n                <div style={dropZoneStyle} className = \"dropzone\">\n                    <h2 style={h2Style}>Please upload your <font size={fontSize} color=\"#0099FF\">CSV </font>institution roster...</h2>\n                    <Dropzone accept=\".csv\" onDropAccepted={this.onDrop.bind(this)} style={dropBoxStyle}>upload new..</Dropzone>\n                    <br /><br /><br />\n                    <button style={nextButtonStyle}>Next</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mainContainerStyle = {\n    width: \"100vw\",\n    height: \"100vh\",\n    backgroundColor: \"#D2D5DA\",\n}\n\nconst dropZoneStyle = {\n    position: \"relative\",\n    backgroundColor: \"white\",\n    borderRadius: '29px',\n    display: \"inline-block\",\n    boxShadow: '0 4px 4px rgba(0,0,0,0.25)',\n    top: \"25%\",\n    width: \"30%\"\n}\n\nconst dropBoxStyle = {\n    width: \"40%\",\n    borderStyle: \"solid\",\n    borderWidth: \"1px\",\n    borderRadius: \"4px\",\n    borderColor: \"#9097A3\",\n    fontFamily: \"Rubik\",\n    color: \"#5B7082\",\n    cursor: \"pointer\",\n    marginTop: \"40px\",\n    paddingTop: \"8px\",\n    paddingBottom: \"8px\"\n}\n\nconst h2Style = {\n    fontFamily: \"Rubik\",\n    fontWeight: \"normal\",\n    fontStyle: \"normal\",\n    fontSize: \"18px\",\n    lineHeight: \"21px\",\n    paddingTop: \"50px\"\n}\n\nconst nextButtonStyle = {\n    backgroundColor: \"#0099FF\",\n    border: \"none\",\n    color: \"white\",\n    fontFamily: \"Rubik\",\n    fontSize: \"1vw\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n    paddingTop: \"10px\",\n    paddingBottom: \"10px\",\n    position: \"relative\",\n    left: \"120px\",\n    bottom: \"10px\",\n    borderRadius: \"3px\",\n    marginBottom: \"45px\",\n    cursor: \"pointer\"\n}\n\nexport default AppjamUploadInstitutionsPage;\n","/app/src/pages/sortingPages/appjam/AppjamSortedRosterPage.js",["252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270"],"import React from 'react'\n\nimport TitleToolbar from '../../.././components/sortingPagesComponents/TitleToolbar';\nimport SortedInstructorsCard from '../../../components/sortingPagesComponents/SortedInstructorsCard';\nimport LockedList from '../../../components/sortingPagesComponents/LockedList'\nimport PendingList from '../../../components/sortingPagesComponents/PendingList'\n\nimport { useHistory } from \"react-router-dom\";\nimport { useState, useEffect, useRef } from 'react';\n\nimport GeneratePDF from '../SaveAsPDF/GeneratePDF';\nimport { PDFDownloadLink } from \"@react-pdf/renderer\";\n\nimport car from '../../.././assets/car.png';\nimport carMentor from '../../.././assets/carMentor.png';\nimport mentor from '../../.././assets/mentor.png';\nimport birb from '../../.././assets/animalIcons/birb.png';\n\nimport fire from '../../.././config/fire';\n\n/* \n    this page shows the sorted roster for appjam\n*/\nexport default function AppjamSortedRosterPage() {\n\n    //User auth \n    const [user, setUser] = useState(null);\n\n    //variable for toggling the modal to ask user if they really want to re-sort\n    const [showResortModal, setShowResortModal] = useState(false)\n\n    //stores the sorted roster taken from the database\n    const [schools, setSchools] = useState([]);    \n\n    //stores the quarter from the database\n    const [quarter, setQuarter] = useState(\"\");\n\n    //stores the year from the database\n    const [year, setYear] = useState(\"\");\n\n    //loading modal when resorting\n    const [isLoading, setIsLoading] = useState(false);\n\n    //History hook for navigation\n    let history = useHistory();\n\n    //checks if user is currently logged in (authenticates user)\n    useEffect(() => {\n        fire.auth().onAuthStateChanged(user => {\n            if (user){\n                setUser(user);\n            }else{\n                history.push('/');\n            }\n            \n          })\n      },[]);\n\n    //accesses firebase for appjam's quarter and year\n    const quarterYearDatabase = useRef(fire.database().ref().child('seasonYear/-M8idEUsNN1M5VcJDv-I/appjam'))\n\n    //accesses firebase for quarter and the year\n    useEffect(() => {\n        quarterYearDatabase.current.once('value', (snap) => {\n            const quarterYear = snap.val();\n            console.log(\"CURRENT QUARTER:\", quarterYear)\n            setQuarter(quarterYear.quarter);\n            setYear(quarterYear.year);\n        });\n    },[]);\n\n      //convers mins into hours and mins in a day \n      // i.e. 900 -> 3:00\n      const convertMins = (mins) => {\n        var num = mins;\n        var finHours = Math.trunc(num/60%12)\n        var hours = (num / 60);\n        var rhours = Math.floor(hours);\n        var minutes = (hours - rhours) * 60;\n        var rminutes = Math.round(minutes);\n        if (rminutes == 0){\n            rminutes=\"00\"\n        }\n        return finHours + \":\" + rminutes;\n    }\n\n    //takes in an array of start and end time and converts it respectfully\n    //i.e [900 - 1020] -> 3:00-5:00\n    const convertTime = (dayTimesArray) => {\n        return convertMins(dayTimesArray[0]) + \"-\" + convertMins(dayTimesArray[1])\n    }\n    \n    // converts schedule from database to a more readable format\n    const convertSchedule = (schedArray) => {\n        // console.log(schedArray)\n        var finalSchedArray = {\n            \"mon\": \"\",\n            \"tue\": \"\",\n            \"wed\": \"\",\n            \"thu\": \"\",\n            \"fri\": \"\"\n        }\n\n        for (var day in schedArray){\n            if (day == 1){\n                finalSchedArray[\"mon\"] = convertTime(schedArray[day][0])\n            }else if (day == 2){\n                finalSchedArray[\"tue\"] = convertTime(schedArray[day][0])\n            }else if (day == 3){\n                finalSchedArray[\"wed\"] = convertTime(schedArray[day][0])\n            }else if (day == 4){\n                finalSchedArray[\"thu\"] = convertTime(schedArray[day][0])\n            }else if (day == 5){\n                finalSchedArray[\"fri\"] = convertTime(schedArray[day][0])\n            }\n        }\n        return finalSchedArray\n    }\n\n    const appjamSortedRosterCollection = useRef(fire.database().ref().child('AppJam+/matches'));\n    const firstChild = useRef(fire.database().ref().child('AppJam+/matches').limitToFirst(1));\n\n    useEffect(() => {\n        var matchesLen = 0;\n\n        var latestRoster = 0;\n        appjamSortedRosterCollection.current.on('value', (snap) => {\n            matchesLen = snap.numChildren();\n            // console.log(\"NUMBER OF MATCHES\", matchesLen)\n            snap.forEach((doc) =>{\n                console.log(parseInt(doc.key), \"NEW!!!!NEW!!!\")\n                if (latestRoster < doc.key){\n                    latestRoster = doc.key\n                }\n            });\n            console.log(\"LATEST ROSTER:\",latestRoster)\n            \n            if (parseInt(matchesLen) > 10){\n                // console.log(\"ADASDDASDSADSA\", matchesLen)\n                firstChild.current.once('value', (snap) => {\n                    snap.forEach((doc) =>{\n                        console.log(\"OLDEST MATCH\",doc.key);\n                        doc.ref.remove();\n                    });\n                })\n            }\n        });\n\n\n        appjamSortedRosterCollection.current.on('value', (snap) => {     \n            const roster = []      \n            snap.forEach((doc) =>{\n                if (latestRoster === doc.key){\n                    // console.log(\"LATEST ROSTER DOC.KEY:\",doc.key, doc.val())\n                    const schoolArray = doc.val();\n                    for (var school in schoolArray){\n                        // console.log(school)\n                        const mentorInfoArray = []\n                        for (var mentor in schoolArray[school]){\n                            if (schoolArray[school][mentor][\"TeacherName\"] != undefined){\n                                mentorInfoArray.push(\n                                    {\n                                        \"name\":schoolArray[school][mentor][\"TeacherName\"],\n                                        \"firstName\": schoolArray[school][mentor][\"TeacherName\"].split(\" \")[0],\n                                        \"car\": schoolArray[school][mentor][\"Car\"],\n                                        \"ethnicity\": schoolArray[school][mentor][\"Ethnicity\"],\n                                        \"gender\": schoolArray[school][mentor][\"Gender\"],\n                                        \"languages\": schoolArray[school][mentor][\"Languages\"],\n                                        \"multipleDays\": schoolArray[school][mentor][\"MultipleDays\"],\n                                        \"prevMentor\": schoolArray[school][mentor][\"PreviousMentor\"],\n                                        \"shirtSize\": schoolArray[school][mentor][\"ShirtSize\"],\n                                        \"university\": schoolArray[school][mentor][\"University\"],\n                                        \"year\": schoolArray[school][mentor][\"Year\"],\n                                        \"teacherSchedule\": convertSchedule(schoolArray[school][mentor][\"TeacherSchedule\"]),\n                                        \"region\": schoolArray[school][mentor][\"Region\"],\n                                        \"schoolName\": schoolArray[school][mentor][\"SchoolName\"],\n                                        \"schoolSchedule\": convertSchedule(schoolArray[school][mentor][\"Schedule\"]),\n                                        \"isLocked\": schoolArray[school][mentor][\"Locked\"],\n                                    }\n                                )\n                            }\n                            \n                        }\n                        // console.log(\"AJDLSAJDLKSADSA\", school)\n                        if (school === \"Locked\" || school === \"Removed\" || school === \"Available\"){\n                            console.log(\"THIS IS LOCKED, SKIP\", school)\n                        }else{\n                            roster.push({\"school\":school, \"mentors\":mentorInfoArray})\n                        }\n                        \n                    }\n                    // console.log(\"THE NEW ROSTER YES\",roster)\n                }\n            });\n            setSchools(roster)\n        });\n      },[]);\n\n    // console.log(schools)\n\n    const resortRoster = () => {\n        return fetch('https://apurva29.pythonanywhere.com/resort', {\n            method: 'POST', // or 'PUT'\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            body: JSON.stringify({\"Program\":\"AppJam+\"}),\n        })\n        .then(response => response.json())\n    }\n\n    const promiseRoster = () =>{\n        return Promise.all([resortRoster()])\n    }\n\n\n    //shows modal if user really wants to re-sort\n    const resortClicked = () => {\n        console.log(\"resort\");\n        setShowResortModal(!showResortModal);\n    }\n\n    //re-sort when clicked yes on the modal\n    const resortYes = () => {\n        console.log(\"YES RESORT!\");\n        setShowResortModal(!showResortModal);\n\n        setIsLoading(!isLoading);\n        promiseRoster()\n        .then(([sorted]) => {\n            // both have loaded!\n            setIsLoading(!isLoading);\n            console.log(\"PROMISE DONE=RESORTED!!!!\",sorted);\n            window.location.reload();\n        })\n\n\n    }\n\n    //don't resort when no is clicked on the modal\n    const resortNo = () => {\n        console.log(\"DONT RESORT!\");\n        setShowResortModal(!showResortModal);\n    }\n\n\n    return (\n        <div>\n\n            {isLoading?(\n                <div style={loading}>\n                <h3>RE-SORTING.... Please Wait.</h3>\n            </div>\n            ):null}\n    \n            <TitleToolbar program=\"Appjam+\" season={quarter} year={year} urlPath=\"appjam\"/>\n\n            <div className=\"programPageContainer\">\n\n                <div style={iconGuideWrapper}>\n                    <div style={box}>\n                        <div style={iconGuideContainer}>\n                            <div style={iconGuideNamePair}>\n                                <div style={iconGuideNamePairAnimal}>\n                                    <img src={birb} style={iconGuideIconStyle}/>\n                                    <h6 style={iconGuideTextAnimalStyle}>name</h6>\n                                </div>\n                                <h6 style={iconGuideTextStyle}>previous mentor</h6>\n                            </div>\n\n                            <div style={iconGuideNamePair}>\n                                <img src={car} style={iconGuideIconStyle}/>\n                                <h6 style={iconGuideTextStyle}>has a car</h6>\n                            </div>\n\n                            <div style={iconGuideNamePair}>\n                                <img src={mentor} style={iconGuideIconStyle} />\n                                <h6 style={iconGuideTextStyle}>previous mentor</h6>\n                            </div>\n\n                            <div style={iconGuideNamePair}>\n                                <img src={carMentor} style={iconGuideIconStyle} />\n                                <h6 style={iconGuideTextStyle}>has a car AND previous mentor</h6>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div style={saveResort}>\n                        <button onClick={resortClicked} style={resortBtn}>Re-sort!</button>\n                        {showResortModal?(\n                            <div style={modalContainer}>\n                                <div style={modal}>\n                                    <h3>Are you sure you want to re-sort?</h3>\n                                    <div style={modalOptions}>\n                                        <button onClick={resortNo} style={noBtn}>NO</button>\n                                        <button onClick={resortYes} style={yesBtn}>Yes</button>\n                                    </div>\n                                </div>\n                            </div>\n                        ):null}\n                        {/* <button onClick={save} style={saveBtn}>SAVE!</button> */}\n\n                        <PDFDownloadLink\n                            document = {<GeneratePDF sortedRoster={schools}/>}\n                            fileName=\"sortedRoster.pdf\"\n                            style={saveBtn}\n                        >\n                            Save as PDF!\n                        </PDFDownloadLink>\n\n                    </div>\n                </div>\n                \n                <div className=\"sortedInstructorCardsWrapper\">\n                    <div style={pendingLockedContainer}>\n                        <PendingList program=\"AppJam+\"/>\n                        <LockedList program=\"AppJam+\"/>\n                    </div>\n\n                    <div className=\"instructorCardsContainer\">\n                        {schools.map((schoolMentors,i) => (\n                            <SortedInstructorsCard program=\"AppJam+\" instructors={schoolMentors} SbgColor=\"#7FC9FF\" SborderColor=\"#0099FF\" key={schoolMentors.school}/>\n                        ))}\n                    </div>\n                </div>\n            </div> \n\n\n\n        </div>\n    )\n}\n\nconst pendingLockedContainer = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    // alignItems: \"center\",\n    flexWrap: \"wrap\",\n    marginTop: \"-10px\"\n}\n\nconst pendingLockedBox = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    // justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"300px\",\n    minHeight: \"50px\",\n    maxHeight: \"500px\",\n    backgroundColor: \"white\",\n    marginLeft: \"10px\",\n    borderRadius: \"12px\",\n    border: \"1px solid #A4A3CE\",\n    marginTop: \"10px\"\n}\n\nconst pendingLockedTitle = {\n    fontSize: \"14px\",\n    fontWeight: \"500\",\n    padding: \"5px\",\n    backgroundColor: \"#A4A3CE\",\n    width: \"100%\",\n    textAlign: \"center\",\n    color: \"white\",\n    borderRadius: \"10px\"\n}\n\nconst pendingLockedNameContainer = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    margin: \"10px\"\n}\n\nconst pendingLockedName = {\n    fontWeight: \"400\",\n    fontSize: \"12px\",\n    // margin: \"1px\",\n    padding: \"1px\",\n    color: \"#202E47\",\n    // backgroundColor: \"#A4A3CE\",\n    width: \"300px\",\n    textAlign: \"center\"\n}\n\nconst modalContainer = {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    position: \"fixed\",\n    width: \"100vw\",\n    height: \"100vh\",\n    backgroundColor: \"rgb(0, 0, 0, 0.5)\",\n    bottom: 0,\n    right: 0,\n    \n}\n\nconst modal = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    // justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"25vw\",\n    height: \"20vh\",\n    backgroundColor: \"white\",\n    borderRadius: \"10px\",\n    padding: \"45px\"\n}\n\nconst modalOptions = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: \"25px\"\n}\n\nconst saveResort = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginLeft: \"20px\"\n}\n\nconst saveBtn = {\n    fontSize: \"14px\",\n    color: \"white\",\n    backgroundColor: \"#49479D\",\n    borderRadius: \"28px\",\n    height: \"46px\",\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\",\n    // padding: \"10px\",\n    marginLeft: \"10px\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n\n}\n\nconst resortBtn = {\n    fontSize: \"14px\",\n    color: \"#49479D\",\n    backgroundColor: \"white\",\n    border: \"0.5px solid #49479D\",\n    borderRadius: \"28px\",\n    height: \"46px\",\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n\n}\n\nconst yesBtn = {\n    fontSize: \"14px\",\n    color: \"#49479D\",\n    backgroundColor: \"white\",\n    border: \"0.5px solid #49479D\",\n    borderRadius: \"28px\",\n    height: \"46px\",\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"5vw\",\n    marginLeft: \"5vw\"\n\n}\n\nconst noBtn = {\n    fontSize: \"14px\",\n    color: \"white\",\n    backgroundColor: \"#49479D\",\n    // border: \"0.5px solid #49479D\",\n    borderRadius: \"28px\",\n    height: \"46px\",\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    width: \"5vw\",\n}\n\nconst iconGuideWrapper = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    // marginTop: \"5%\",\n    marginBottom: \"2%\"\n}\n\nconst box = {\n    width: \"670px\",\n    height: \"70px\",\n    backgroundColor: \"#D2D5DA\",\n    borderRadius: \"10px\"\n}\n\nconst iconGuideContainer = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: \"7px\"\n}\n\nconst iconGuideNamePairAnimal = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n}\n\nconst iconGuideTextAnimalStyle = {\n    fontSize: \"12px\",\n    fontWeight: \"400\",\n    marginLeft: \"3px\",\n    color: \"#202E47\",\n}\n\nconst iconGuideNamePair = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginleft: \"15px\",\n    marginRight: \"15px\"\n}\n\nconst iconGuideIconStyle = {\n    width: \"35px\",\n}\n\nconst iconGuideTextStyle = {\n    fontSize: \"12px\",\n    fontWeight: \"400\",\n    marginLeft: \"3px\",\n    color: \"#202E47\",\n    color: \"#49479D\"\n}\n\nconst loading = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    position: \"absolute\",\n    width: \"100vw\",\n    height: \"100vh\",\n    backgroundColor: \"rgba(32, 46, 71, 0.7)\",\n    color: \"white\"\n}","/app/src/pages/sortingPages/appjam/AppjamShirtPage.js",["271"],"import React from 'react'\n\nimport TitleToolbar from '../../.././components/sortingPagesComponents/TitleToolbar';\nimport { useHistory } from \"react-router-dom\";\nimport { useState, useEffect, useRef } from 'react';\n\nimport fire from '../../.././config/fire';\n\n/* \n    this page shows the total shirts for each size for appjam\n*/\nexport default function AppjamSortedRosterPage() {\n\n    //auth variable\n    const [user, setUser] = useState(null);\n\n    //where data from firebase is stored for the shirt sizes\n    const [sizes, setSizes] = useState({})\n\n    //stores the quarter from the database\n    const [quarter, setQuarter] = useState(\"\");\n\n    //stores the year from the database\n    const [year, setYear] = useState(\"\");\n\n    //navigation variable to naviagate to other pages\n    let history = useHistory();\n\n    //checks if user is currently logged in\n    useEffect(() => {\n        fire.auth().onAuthStateChanged(user => {\n            if (user){\n                setUser(user);\n            }else{\n                history.push('/');\n            }\n            \n          })\n      });\n\n    //accesses firebase for appjam's quarter and year\n    const quarterYearDatabase = useRef(fire.database().ref().child('seasonYear/-M8idEUsNN1M5VcJDv-I/appjam'))\n\n    //accesses firebase for quarter and the year\n    useEffect(() => {\n        quarterYearDatabase.current.once('value', (snap) => {\n            const quarterYear = snap.val();\n            console.log(\"CURRENT QUARTER:\", quarterYear)\n            setQuarter(quarterYear.quarter);\n            setYear(quarterYear.year);\n        });\n    },[]);\n\n    //gets the appjam shirt size info fromt he database using firebase\n    const sortedRosterCollection = useRef(fire.database().ref().child('AppJam+/shirts'))\n\n    //gets the info from firebase\n    useEffect(() => {\n        fetch('https://apurva29.pythonanywhere.com/shirts', {\n            method: 'POST', // or 'PUT'\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            body: JSON.stringify({\"Program\":\"AppJam+\"}),\n        })\n        .then(response => response.json())\n\n        sortedRosterCollection.current.once('value', (snap) => {\n            const shirtSizes = {}\n            // const roster = []\n            snap.forEach((doc) =>{\n                shirtSizes[doc.key] = doc.val();\n            });\n            setSizes(shirtSizes);\n        });\n    },[]);\n    console.log(sizes);\n\n    return (\n        <div>\n            <TitleToolbar program=\"Appjam+\" season={quarter} year={year} urlPath=\"appjam\"/>\n\n            <div className=\"programPageContainer\">\n                <div style={tableContainer}>\n                    <div style={sizeCountPair}>\n                        <h3 style={size1}>S</h3>\n                        <h3 style={count}>{sizes.S}</h3>\n                    </div>\n\n                    <div style={sizeCountPair}>\n                        <h3 style={size}>M</h3>\n                        <h3 style={count}>{sizes.M}</h3>\n                    </div>\n\n                    <div style={sizeCountPair}>\n                        <h3 style={size}>L</h3>\n                        <h3 style={count}>{sizes.L}</h3>\n                    </div>\n\n                    <div style={sizeCountPair}>\n                        <h3 style={size}>XL</h3>\n                        <h3 style={count}>{sizes.XL}</h3>\n                    </div>\n\n                    <div style={sizeCountPair}>\n                        <h3 style={size5}>XXL</h3>\n                        <h3 style={count}>{sizes.XXL}</h3>\n                    </div>\n                </div>\n            </div> \n\n        </div>\n    )\n}\n\nconst tableContainer = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: \"5%\"\n}\n\nconst sizeCountPair = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    textAlign: \"center\",\n    marginRight: \"-1px\"\n}\n\nconst size = {\n    width: \"150px\",\n    height: \"80px\",\n    backgroundColor: \"#7FC9FF\",\n    paddingTop: \"18%\",\n    border: \"0.5px solid #0099FF\",\n    fontSize: \"20px\",\n    fontWeight: \"500\",\n    color: \"white\"\n}\n\nconst size1 = {\n    width: \"150px\",\n    height: \"80px\",\n    backgroundColor: \"#7FC9FF\",\n    paddingTop: \"18%\",\n    border: \"0.5px solid #0099FF\",\n    borderTopLeftRadius: \"20px\",\n    fontSize: \"20px\",\n    fontWeight: \"500\",\n    color: \"white\"\n}\n\nconst size5 = {\n    width: \"150px\",\n    height: \"80px\",\n    backgroundColor: \"#7FC9FF\",\n    paddingTop: \"18%\",\n    border: \"0.5px solid #0099FF\",\n    borderTopRightRadius: \"20px\",\n    fontSize: \"20px\",\n    fontWeight: \"500\",\n    color: \"white\"\n}\n\nconst count = {\n    width: \"150px\",\n    height: \"80px\",\n    backgroundColor: \"white\",\n    paddingTop: \"18%\",\n    border: \"0.5px solid #0099FF\",\n    marginTop: \"-1px\",\n    fontSize: \"18px\",\n    fontWeight: \"400\",\n    color: \"#202E47\"\n}","/app/src/pages/sortingPages/appjam/AppjamRosterPage.js",["272","273","274","275","276","277","278","279","280","281","282","283","284"],"import React from 'react'\n\nimport SideNavBar from '../../../components/sidebar/SideNavBar';\nimport SortingPagesNavbar from '../../../components/sortingPagesComponents/SortingPagesNavbar'\nimport TitleToolbar from '../../.././components/sortingPagesComponents/TitleToolbar';\nimport { useHistory } from \"react-router-dom\";\nimport { useState, useEffect, useRef } from 'react';\n\nimport fire from '../../.././config/fire';\n\n/*\n    this page shows the roster for appjam\n*/\nexport default function AppjamRosterPage(props) {\n\n    //auth variable\n    const [user, setUser] = useState(null);\n\n    //navigation variable to naviagate to other pages\n    let history = useHistory();\n\n    //stores the quarter from the database\n    const [quarter, setQuarter] = useState(\"\");\n\n    //stores the year from the database\n    const [year, setYear] = useState(\"\");\n\n    //checks if user is currently logged in\n    useEffect(() => {\n        fire.auth().onAuthStateChanged(user => {\n            if (user){\n                setUser(user);\n            }else{\n                history.push('/');\n            }\n\n          })\n      });\n\n    //accesses firebase for appjam's quarter and year\n    const quarterYearDatabase = useRef(fire.database().ref().child('seasonYear/-M8idEUsNN1M5VcJDv-I/appjam'))\n\n    //accesses firebase for quarter and the year\n    useEffect(() => {\n        quarterYearDatabase.current.once('value', (snap) => {\n            const quarterYear = snap.val();\n            console.log(\"CURRENT QUARTER:\", quarterYear)\n            setQuarter(quarterYear.quarter);\n            setYear(quarterYear.year);\n        });\n    },[]);\n\n    //stores the roster taken from the database\n    const [roster, setRoster] = useState([])\n\n    //convers mins into hours and mins in a day\n    // i.e. 900 -> 3:00\n    const convertMins = (mins) => {\n      var num = mins;\n      var finHours = Math.trunc(num/60%12)\n      var hours = (num / 60);\n      var rhours = Math.floor(hours);\n      var minutes = (hours - rhours) * 60;\n      var rminutes = Math.round(minutes);\n      if (rminutes == 0){\n          rminutes=\"00\"\n      }\n      return finHours + \":\" + rminutes;\n  }\n\n  //takes in an array of start and end time and converts it respectfully\n  //i.e [900 - 1020] -> 3:00-5:00\n  const convertTime = (dayTimesArray) => {\n      return convertMins(dayTimesArray[0]) + \"-\" + convertMins(dayTimesArray[1])\n  }\n\n  // converts schedule from database to a more readable format\n  // resulting format looks like this: {mon:\"3:00-5:00\", tue:\"\", wed:\"3:00-5:00\", Tthu:\"3:00-5:00\", fri:\"\"}\n  const convertSchedule = (schedArray) => {\n      var finalSchedArray = {\n          \"mon\": \"\",\n          \"tue\": \"\",\n          \"wed\": \"\",\n          \"thu\": \"\",\n          \"fri\": \"\"\n      }\n\n      for (var day in schedArray){\n          if (day == 1){\n              finalSchedArray[\"mon\"] = convertTime(schedArray[day][0])\n          }else if (day == 2){\n              finalSchedArray[\"tue\"] = convertTime(schedArray[day][0])\n          }else if (day == 3){\n              finalSchedArray[\"wed\"] = convertTime(schedArray[day][0])\n          }else if (day == 4){\n              finalSchedArray[\"thu\"] = convertTime(schedArray[day][0])\n          }else if (day == 5){\n              finalSchedArray[\"fri\"] = convertTime(schedArray[day][0])\n          }\n      }\n      return finalSchedArray\n  }\n\n\n    // //accesses firebase for the appjam instructors roster\n    // const sortedRosterCollection = useRef(fire.database().ref().child('AppJam+/instructors'))\n\n    // //accesses firebase for the roster\n    // useEffect(() => {\n    //     sortedRosterCollection.current.once('value', (snap) => {\n    //         const rosterFire = []\n    //         snap.forEach((doc) =>{\n    //             const mentorID = doc.key;\n    //             const mentorList = doc.val();\n    //             rosterFire.push(\n    //                 {\n    //                     \"mentorID\": mentorID,\n    //                     \"car\": mentorList[\"Car\"],\n    //                     \"ethnicity\": mentorList[\"Ethnicity\"],\n    //                     \"friday\": mentorList[\"Friday\"],\n    //                     \"gender\": mentorList[\"Gender\"],\n    //                     \"languages\": mentorList[\"Languages\"],\n    //                     \"monday\": mentorList[\"Monday\"],\n    //                     \"multipleDays\": mentorList[\"MultipleDays\"],\n    //                     \"name\": mentorList[\"Name\"],\n    //                     \"prevMentor\": mentorList[\"PreviousMentor\"],\n    //                     \"region\": mentorList[\"Region\"],\n    //                     \"shirtSize\": mentorList[\"ShirtSize\"],\n    //                     \"thursday\": mentorList[\"Thursday\"],\n    //                     \"tuesday\": mentorList[\"Tuesday\"],\n    //                     \"university\": mentorList[\"University\"],\n    //                     \"wednesday\": mentorList[\"Wednesday\"],\n    //                     \"year\": mentorList[\"Year\"]\n    //                 }\n    //             )\n    //         });\n    //         setRoster(rosterFire);\n    //     });\n    // },[]);\n\n    const appjamRosterCollection = useRef(fire.database().ref().child('AppJam+/instructors'));\n\n    useEffect(() => {\n        var latestRoster = 0;\n        appjamRosterCollection.current.on('value', (snap) => {\n            snap.forEach((doc) =>{\n                console.log(parseInt(doc.key), \"NEW!!!!NEW!!!\")\n                if (latestRoster < doc.key){\n                    latestRoster = doc.key\n                }\n            });\n            console.log(\"LATEST ROSTER:\",latestRoster)\n        });\n\n\n        appjamRosterCollection.current.once('value', (snap) => {\n            const rosterFire = []\n            snap.forEach((doc) =>{\n                if (latestRoster === doc.key){\n                    console.log(\"LATEST ROSTER DOC.KEY:\",doc.key, doc.val())\n                    const instructorArray = doc.val();\n                    for (var instructor in instructorArray){\n                        // console.log(instructor)\n                        const mentorID = instructor;\n                        const mentorList = instructorArray[instructor];\n                        rosterFire.push(\n                            {\n                                \"mentorID\": mentorID,\n                                \"car\": mentorList[\"Car\"],\n                                \"ethnicity\": mentorList[\"Ethnicity\"],\n                                \"friday\": mentorList[\"Friday\"],\n                                \"gender\": mentorList[\"Gender\"],\n                                \"languages\": mentorList[\"Languages\"],\n                                \"monday\": mentorList[\"Monday\"],\n                                \"multipleDays\": mentorList[\"MultipleDays\"],\n                                \"name\": mentorList[\"Name\"],\n                                \"prevMentor\": mentorList[\"PreviousMentor\"],\n                                \"region\": mentorList[\"Region\"],\n                                \"shirtSize\": mentorList[\"ShirtSize\"],\n                                \"thursday\": mentorList[\"Thursday\"],\n                                \"tuesday\": mentorList[\"Tuesday\"],\n                                \"university\": mentorList[\"University\"],\n                                \"wednesday\": mentorList[\"Wednesday\"],\n                                \"year\": mentorList[\"Year\"],\n                                \"schedule\": convertSchedule(mentorList[\"Schedule\"])\n\n                            }\n                        )\n\n                    }\n                    // console.log(\"THE NEW ROSTER YES\",roster)\n                }\n            });\n            console.log(rosterFire)\n            setRoster(rosterFire)\n        });\n      },[]);\n\n    // const sortClicked = (e, name) => {\n    //     history.push('/appjamhome/sortedroster');\n    // }\n    const [isLoading, setIsLoading] = useState(false);\n\n    const sortRoster = () => {\n        return fetch('https://apurva29.pythonanywhere.com/sort', {\n            method: 'POST', // or 'PUT'\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            body: JSON.stringify({\"Program\":\"AppJam+\"}),\n        })\n        .then(response => response.json())\n    }\n\n    const promiseRoster = () =>{\n        return Promise.all([sortRoster()])\n    }\n\n    const sortClicked = (e) => {\n        // history.push('/appjamhome/sortedroster');\n        setIsLoading(!isLoading);\n        promiseRoster()\n        .then(([sorted]) => {\n            // both have loaded!\n            setIsLoading(!isLoading);\n            console.log(\"PROMISE DONE!!!!\",sorted);\n            history.push('/appjamhome/sortedroster');\n        })\n    }\n\n    const addClicked = (e) => {\n        // history.push('/appjamhome/sortedroster');\n        history.push({\n            pathname: \"/manualaddinstructor\",\n            state: {isNewRoster: false, program:\"appjam\"}\n        });\n    }\n\n    return (\n        <div>\n\n            {isLoading?(\n                <div style={loading}>\n                <h3>SORTING.... Please Wait.</h3>\n            </div>\n            ):null}\n\n            <TitleToolbar program=\"appjam+\" season={quarter} year={year}  urlPath=\"appjam\"/>\n\n            <div className=\"programPageContainer\">\n\n                <div style={buttonContainer}>\n                    <div style={sortBtnContainer}>\n                        <button onClick={addClicked} style={addBtn}>Add Instructor</button>\n                    </div>\n                    <div style={sortBtnContainer}>\n                        <button onClick={sortClicked} style={sortBtn}>SORT!</button>\n                    </div>\n                </div>\n\n\n                <h1 style={programText}>Appjam+</h1>\n                <div style={programSchools}>\n                    \n\n                    <div style={gridWrapper}>\n                        <div style={gridContainer}>\n                            <div style={titleRow}>Name</div>\n                            <div style={titleRow}>Gender</div>\n                            <div style={titleRow}>Ethnicity</div>\n                            <div style={titleRow}>Languages</div>\n                            <div style={titleRow}>University</div>\n                            <div style={titleRow}>Year</div>\n                            <div style={titleRow}>Region</div>\n                            <div style={titleRow}>Mon</div>\n                            <div style={titleRow}>Tue</div>\n                            <div style={titleRow}>Wed</div>\n                            <div style={titleRow}>Thu</div>\n                            <div style={titleRow}>Fri</div>\n                            <div style={titleRow}>Prev Mentor</div>\n                            <div style={titleRow}>Car</div>\n                            <div style={titleRow}>Multiple Days</div>\n                            <div style={titleRow}>Shirt Size</div>\n                        </div>\n\n\n                        {roster.map((mentor) => (\n                            <div style={gridEntryContainer} key={mentor.mentorID}>\n                                <div style={entryRow}>{mentor.name}</div>\n                                <div style={entryRow}>{mentor.gender}</div>\n                                <div style={entryRow}>{mentor.ethnicity}</div>\n                                <div style={entryRow}>{mentor.languages}</div>\n                                <div style={entryRow}>{mentor.university}</div>\n                                <div style={entryRow}>{mentor.year}</div>\n                                <div style={entryRow}>{mentor.region}</div>\n                                <div style={entryRow}>{mentor.schedule.mon}</div>\n                                <div style={entryRow}>{mentor.schedule.tue}</div>\n                                <div style={entryRow}>{mentor.schedule.wed}</div>\n                                <div style={entryRow}>{mentor.schedule.thu}</div>\n                                <div style={entryRow}>{mentor.schedule.fri}</div>\n                                <div style={entryRow}>{mentor.prevMentor}</div>\n                                <div style={entryRow}>{mentor.car}</div>\n                                <div style={entryRow}>{mentor.multipleDays}</div>\n                                <div style={entryRow}>{mentor.shirtSize}</div>\n                            </div>\n\n                        ))}\n\n                    </div>\n                </div>\n\n            </div>\n        </div>\n\n    )\n}\n\n\n\nconst programSchools = {\n    // marginLeft: \"-500px\"\n\n}\n\n\nconst programText = {\n    color: \"#5B7082\",\n    marginLeft: \"5%\"\n}\n\nconst gridWrapper = {\n    display: \"flex\",\n    flexDirection: \"column\",\n}\n\nconst gridContainer = {\n    display: \"grid\",\n    gridTemplateColumns: \"200px 80px 200px 150px 150px 80px 80px 80px 80px 80px 80px 80px 80px 80px 80px 80px \",\n    gridTemplateRows: \"50px 50px 50px 50px 50px 50px 50px 50px 50px 50px 50px 50px 50px 50px 50px 50px \",\n    justifyContent: \"center\",\n    marginTop: \"10px\",\n    marginLeft: \"30%\"\n\n}\n\nconst gridEntryContainer = {\n    display: \"grid\",\n    gridTemplateColumns: \"200px 80px 200px 150px 150px 80px 80px 80px 80px 80px 80px 80px 80px 80px 80px 80px\",\n    gridTemplateRows: \"50px 50px 50px 50px 50px 50px 50px 50px 50px 50px 50px 50px 50px 50px 50px 50px  \",\n    justifyContent: \"center\",\n    marginTop: \"-750px\",\n    marginLeft: \"30%\"\n\n\n}\n\nconst titleRow = {\n    backgroundColor: \"#5B7082\",\n    color: \"white\",\n    fontSize: \"14px\",\n    textAlign: \"center\",\n    border: \"0.5px solid #D2D5DA\",\n    height: \"50px\",\n    paddingTop: \"15px\",\n    marginLeft: \"-0.5px\"\n}\n\nconst entryRow = {\n    backgroundColor: \"white\",\n    color: \"#202E47\",\n    fontSize: \"12px\",\n    textAlign: \"center\",\n    border: \"0.5px solid #D2D5DA\",\n    height: \"50px\",\n    paddingTop: \"16px\",\n    marginLeft: \"-0.5px\",\n}\n\n\n\nconst buttonContainer = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n}\n\n\nconst firebaseRoster = {\n    display: \"flex\",\n    flexDirection: \"column\",\n\t// justifyContent: \"center\",\n    // alignItems: \"center\",\n    // display: \"grid\",\n    // gridTemplateColumns: \"auto auto auto auto auto auto auto auto auto auto auto auto auto auto auto auto \"\n}\n\nconst mentorContainer = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    // alignItems: \"center\",\n}\n\nconst data = {\n    padding: \"10px\",\n    fontWeight: \"300\",\n    fontSize: \"12px\",\n    border: \"0.5px solid #49479D\",\n    marginRight: \"-1px\",\n    marginTop: \"-1px\",\n}\n\nconst sortBtnContainer = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    // marginLeft: \"50vw\"\n}\n\nconst sortBtn = {\n    fontSize: \"18px\",\n    fontWeight: \"500\",\n    color: \"white\",\n    backgroundColor: \"#49479D\",\n    borderRadius: \"28px\",\n    height: \"46px\",\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    marginLeft: \"10px\",\n    marginBottom: \"20px\",\n    width: \"300px\"\n\n}\n\nconst addBtn = {\n    fontSize: \"18px\",\n    fontWeight: \"500\",\n    color: \"#49479D\",\n    backgroundColor: \"white\",\n    borderRadius: \"28px\",\n    height: \"46px\",\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    marginLeft: \"10px\",\n    marginBottom: \"20px\",\n    width: \"300px\",\n    border: \"1px solid #49479D\"\n}\n\nconst loading = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    position: \"absolute\",\n    width: \"100vw\",\n    height: \"100vh\",\n    backgroundColor: \"rgba(32, 46, 71, 0.7)\",\n    color: \"white\"\n}\n","/app/src/pages/sortingPages/appjam/AppjamAddRosterForm.js",["285","286","287"],"import React from 'react'\n\nimport { useHistory } from \"react-router-dom\";\nimport { useState, useEffect, useRef } from 'react';\nimport person from '../../.././assets/person.svg'\n\nimport fire from '../../.././config/fire';\n\n/* \n    form that asks whether the user wants to upload instructors manually or through a file\n*/\nexport default function AppjamAddRosterForm() {\n\n    //auth variable\n    const [user, setUser] = useState(null);\n\n    //variable for capturing whether quarter/season for the program\n    const [quarter, setQuarter] = useState(\"\");\n\n    //variable for capturing whether year for the program\n    const [year, setYear] = useState(\"\");\n\n    //variable for capturing whether the user chooses\n    //manual upload of file upload\n    const [input, setInput] = useState(\"\");\n\n    //navigation variable to naviagate to other pages\n    let history = useHistory();\n\n    //checks if user is currently logged in\n    useEffect(() => {\n        fire.auth().onAuthStateChanged(user => {\n            if (user){\n                setUser(user);\n            }else{\n                history.push('/');\n            }\n            \n          })\n      });\n\n\n    //handles the state change everytime the user toggles \n    //between manual vs file upload\n    const onChangeRadio = (e) => {\n        setInput(e.target.value);\n        console.log(e.target.value);\n\n    }\n\n    //handles the state change everytime the user changes quarter\n    const onChangeQuarter = (e) => {\n        setQuarter(e.target.value);\n        console.log(e.target.value);\n\n    }\n\n    //handles the state change everytime the user changes year\n    const onChangeYear = (e) => {\n        setYear(e.target.value);\n        console.log(e.target.value);\n\n    }\n\n    //accesses firebase for appjam quarter and year\n    const quarterYearDatabase = useRef(fire.database().ref().child('seasonYear/-M8idEUsNN1M5VcJDv-I/appjam'));\n\n    //validates user inputs\n    const nextClicked = () => {\n        console.log(\"submit\");\n\n        if (quarter === \"\" || year === \"\" || input === \"\"){\n            alert(\"Please select an option for ALL the fields\")\n        }else{\n            if (input === \"file\"){\n                history.push('/appjamhome/uploadroster');\n                quarterYearDatabase.current.once('value', (snap) => {\n                    snap.ref.set({\n                        quarter: quarter,\n                        year: year\n                    });\n                });\n            }else if (input === \"manual\"){\n                // alert('manual chosen (not yet implemented)')\n                quarterYearDatabase.current.once('value', (snap) => {\n                    snap.ref.set({\n                        quarter: quarter,\n                        year: year\n                    });\n                });\n\n                // history.push('/manualaddinstructor');\n                history.push({\n                    pathname: \"/manualaddinstructor\",\n                    state: {isNewRoster: true}\n                });\n            } \n        }\n    }\n\n\n    return (\n        <div style={mainContainer}>\n\n            <div style={leftHalf}>\n\n                <div style={formContainer}>\n\n                    <h3 style={textStyle}>New appjam+ Roster</h3>\n                    \n                    <form onSubmit={nextClicked} style = {formStyle}>\n                        \n                        <div style={dropdowns}>\n\n                            <select name=\"quarter\" style={dropdownStyle} value={quarter} onChange={onChangeQuarter}>\n                                <option value=\"\" disabled selected>Choose Season...</option>\n                                <option value=\"Fall\">Fall</option>\n                                <option value=\"Winter\">Winter</option>\n                                <option value=\"Spring\">Spring</option>\n                                <option value=\"Summer\">Summer</option>\n                            </select>\n\n                            <select name=\"year\" style={dropdownStyle} value={year} onChange={onChangeYear}>\n                                <option value=\"\" disabled selected>Choose Year...</option>\n                                <option value=\"2015\">2015</option>\n                                <option value=\"2016\">2016</option>\n                                <option value=\"2017\">2017</option>\n                                <option value=\"2018\">2018</option>\n                                <option value=\"2019\">2019</option>\n                                <option value=\"2020\">2020</option>\n                                <option value=\"2021\">2021</option>\n                                <option value=\"2022\">2022</option>\n                                <option value=\"2023\">2023</option>\n                                <option value=\"2024\">2024</option>\n                                <option value=\"2025\">2025</option>\n                                <option value=\"2026\">2026</option>\n                                <option value=\"2027\">2027</option>\n                                <option value=\"2028\">2028</option>\n                                <option value=\"2029\">2029</option>\n                                <option value=\"2030\">2030</option>\n                                <option value=\"2031\">2031</option>\n                                <option value=\"2032\">2032</option>\n                                <option value=\"2033\">2033</option>\n                                <option value=\"2034\">2034</option>\n                                <option value=\"2035\">2035</option>\n                            </select>\n                        </div>\n\n                        <div style={radioButtonsContainer}>\n                       \n                            <h3 style={radiotitleText}>How do you want to add your roster?</h3>\n\n                            <div onChange={onChangeRadio}>\n                                {/* THIS IS A MANUAL INPUT OPTION \n                                we had planned on adding manual input to add a new roster but the way\n                                the code is implemented right, it's a little complicated and\n                                we kind of ran out of time but it's something that the future team \n                                should consider*/}\n\n                                {/* <div style={radioItem}>\n                                    <input type=\"radio\" value=\"manual\" name=\"input\"/> <p style={radioChoice}>Manual Input</p>\n                                </div> */}\n\n                                <div style={radioItem}>\n                                    <input type=\"radio\" value=\"file\" name=\"input\"/> <p style={radioChoice} >File Upload</p>\n                                </div>\n                                \n                            </div>\n\n                        </div>\n\n\n\n                        <input \n                            type = 'submit'\n                            value = 'Next'\n                            className = 'button'\n                            style= {nextBtn}\n                        />\n                    </form>\n\n                </div>\n\n            </div>\n\n            <div style={rightHalf}>\n                <img style={personIcon} src={person} alt=\"person icon\"/>\n                <div style={square}></div>\n            </div>\n\n            \n\n\n        </div>\n    )\n}\n\nconst mainContainer = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n\n}\n\nconst leftHalf = {\n    height: \"100vh\",\n    width: \"50vw\",\n    // backgroundColor: \"lightblue\"\n}\n\nconst rightHalf = {\n    height: \"100vh\",\n    width: \"50vw\",\n    backgroundColor: \"white\"\n}\n\nconst formContainer = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: \"20%\"\n}\n\nconst formStyle = {\n    display: \"flex\",\n    flexDirection: 'column',\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"60%\",\n    marginTop: \"30px\"\n}\n\nconst dropdowns = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n}\n\nconst textStyle = {\n    fontSize: \"48px\",\n    fontWeight: \"400\",\n    color: \"#202E47\",\n    // marginLeft: \"auto\"\n}\n\nconst radioButtonsContainer = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"left\",\n    marginTop: \"30px\"\n}\n\nconst radiotitleText = {\n    fontSize: \"18px\",\n    fontWeight: \"400\",\n    color: \"#202E47\"\n}\n\nconst radioItem = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"left\",\n    alignItems: \"center\",\n    marginTop: \"20px\"\n}\n\nconst radioChoice = {\n    fontSize: \"16px\",\n    fontWeight: \"400\",\n    color: \"#5B7082\",\n    marginLeft: \"10px\"\n}\n\nconst radioStyle = {\n    backgroundColor: \"#49479D\",\n    color: \"#49479D\"\n}\n\nconst dropdownStyle = {\n    width: \"214px\",\n    height: \"66px\",\n    marginLeft: \"5px\",\n    marginRight: \"5px\",\n    fontSize: \"18px\",\n    border: \"0px solid\",\n    boxShadow: \"1px 1px 10px #E6E6E8\"\n}\n\nconst square = {\n    width: \"50%\",\n    height: \"100vh\",\n    backgroundColor: \"#49479D\",\n    marginLeft: \"auto\"\n}\n\nconst personIcon = {\n    position: \"absolute\",\n    height: \"300px\",\n    width: \"300px\",\n    right: \"17%\",\n    top: \"68%\"\n}\n\nconst nextBtn = {\n    width: \"105px\",\n    height: \"45px\",\n    backgroundColor: \"#49479D\",\n    fontSize: \"18px\",\n    color: \"white\",\n    border: \"0px solid\",\n    marginTop: \"50px\",\n    marginLeft: \"auto\",\n    marginRight: \"15%\",\n    borderRadius: \"3px\"\n\n}\n\nconst disabledOption = {\n    color: \"red\"\n}","/app/src/pages/sortingPages/sphero/SpheroShirtPage.js",["288"],"import React from 'react'\n\nimport TitleToolbar from '../../.././components/sortingPagesComponents/TitleToolbar';\nimport { useHistory } from \"react-router-dom\";\nimport { useState, useEffect, useRef } from 'react';\n\nimport fire from '../../.././config/fire';\n\n/* \n    this page shows the total shirts for each size for sphero\n*/\nexport default function SpheroShirtPage() {\n\n    //auth variable\n    const [user, setUser] = useState(null);\n\n    //where data from firebase is stored for the shirt sizes\n    const [sizes, setSizes] = useState({})\n\n    //stores the quarter from the database\n    const [quarter, setQuarter] = useState(\"\");\n\n    //stores the year from the database\n    const [year, setYear] = useState(\"\");\n\n    //navigation variable to naviagate to other pages\n    let history = useHistory();\n\n    //checks if user is currently logged in\n    useEffect(() => {\n        fire.auth().onAuthStateChanged(user => {\n            if (user){\n                setUser(user);\n            }else{\n                history.push('/');\n            }\n            \n          })\n      });\n\n    //accesses firebase for appjam's quarter and year\n    const quarterYearDatabase = useRef(fire.database().ref().child('seasonYear/-M8idEUsNN1M5VcJDv-I/sphero'))\n\n    //accesses firebase for quarter and the year\n    useEffect(() => {\n        quarterYearDatabase.current.once('value', (snap) => {\n            const quarterYear = snap.val();\n            console.log(\"CURRENT QUARTER:\", quarterYear)\n            setQuarter(quarterYear.quarter);\n            setYear(quarterYear.year);\n        });\n    },[]);\n\n    //gets the appjam shirt size info fromt he database using firebase\n    const sortedRosterCollection = useRef(fire.database().ref().child('SpheroElementary/shirts'))\n\n    //gets the info from firebase\n    useEffect(() => {\n        fetch('https://apurva29.pythonanywhere.com/shirts', {\n            method: 'POST', // or 'PUT'\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            body: JSON.stringify({\"Program\":\"SpheroElementary\"}),\n        })\n        .then(response => response.json())\n        \n\n        sortedRosterCollection.current.once('value', (snap) => {\n            const shirtSizes = {}\n            // const roster = []\n            snap.forEach((doc) =>{\n                shirtSizes[doc.key] = doc.val();\n            });\n            setSizes(shirtSizes);\n        });\n    },[]);\n    console.log(sizes);\n\n    return (\n        <div>\n            <TitleToolbar program=\"Sphero\" season={quarter} year={year} urlPath=\"sphero\"/>\n\n            <div className=\"programPageContainer\">\n                <div style={tableContainer}>\n                    <div style={sizeCountPair}>\n                        <h3 style={size1}>S</h3>\n                        <h3 style={count}>{sizes.S}</h3>\n                    </div>\n\n                    <div style={sizeCountPair}>\n                        <h3 style={size}>M</h3>\n                        <h3 style={count}>{sizes.M}</h3>\n                    </div>\n\n                    <div style={sizeCountPair}>\n                        <h3 style={size}>L</h3>\n                        <h3 style={count}>{sizes.L}</h3>\n                    </div>\n\n                    <div style={sizeCountPair}>\n                        <h3 style={size}>XL</h3>\n                        <h3 style={count}>{sizes.XL}</h3>\n                    </div>\n\n                    <div style={sizeCountPair}>\n                        <h3 style={size5}>XXL</h3>\n                        <h3 style={count}>{sizes.XXL}</h3>\n                    </div>\n                </div>\n            </div> \n\n        </div>\n    )\n}\n\nconst tableContainer = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: \"5%\"\n}\n\nconst sizeCountPair = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    textAlign: \"center\",\n    marginRight: \"-1px\"\n}\n\nconst size = {\n    width: \"150px\",\n    height: \"80px\",\n    backgroundColor: \"#7FC9FF\",\n    paddingTop: \"18%\",\n    border: \"0.5px solid #0099FF\",\n    fontSize: \"20px\",\n    fontWeight: \"500\",\n    color: \"white\"\n}\n\nconst size1 = {\n    width: \"150px\",\n    height: \"80px\",\n    backgroundColor: \"#7FC9FF\",\n    paddingTop: \"18%\",\n    border: \"0.5px solid #0099FF\",\n    borderTopLeftRadius: \"20px\",\n    fontSize: \"20px\",\n    fontWeight: \"500\",\n    color: \"white\"\n}\n\nconst size5 = {\n    width: \"150px\",\n    height: \"80px\",\n    backgroundColor: \"#7FC9FF\",\n    paddingTop: \"18%\",\n    border: \"0.5px solid #0099FF\",\n    borderTopRightRadius: \"20px\",\n    fontSize: \"20px\",\n    fontWeight: \"500\",\n    color: \"white\"\n}\n\nconst count = {\n    width: \"150px\",\n    height: \"80px\",\n    backgroundColor: \"white\",\n    paddingTop: \"18%\",\n    border: \"0.5px solid #0099FF\",\n    marginTop: \"-1px\",\n    fontSize: \"18px\",\n    fontWeight: \"400\",\n    color: \"#202E47\"\n}","/app/src/pages/sortingPages/sphero/SpheroRosterPage.js",["289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304"],"import React from 'react'\n\nimport SideNavBar from '../../../components/sidebar/SideNavBar';\nimport SortingPagesNavbar from '../../../components/sortingPagesComponents/SortingPagesNavbar'\nimport TitleToolbar from '../../.././components/sortingPagesComponents/TitleToolbar';\nimport { useHistory } from \"react-router-dom\";\nimport { useState, useEffect, useRef } from 'react';\n\nimport fire from '../../.././config/fire';\n\n/*\n    this page shows the roster for sphero\n*/\nexport default function SpheroRosterPage() {\n\n    //auth variable\n    const [user, setUser] = useState(null);\n\n    //navigation variable to naviagate to other pages\n    let history = useHistory();\n\n    //stores the quarter from the database\n    const [quarter, setQuarter] = useState(\"\");\n\n    //stores the year from the database\n    const [year, setYear] = useState(\"\");\n\n    //checks if user is currently logged in\n    useEffect(() => {\n        fire.auth().onAuthStateChanged(user => {\n            if (user){\n                setUser(user);\n            }else{\n                history.push('/');\n            }\n\n          })\n      });\n\n    //accesses firebase for appjam's quarter and year\n    const quarterYearDatabase = useRef(fire.database().ref().child('seasonYear/-M8idEUsNN1M5VcJDv-I/sphero'))\n\n    //accesses firebase for quarter and the year\n  //  useEffect(() => {\n  //      quarterYearDatabase.current.once('value', (snap) => {\n  //          const quarterYear = snap.val();\n  //          console.log(\"CURRENT QUARTER:\", quarterYear)\n  //          setQuarter(quarterYear.quarter);\n  //          setYear(quarterYear.year);\n  //      });\n  //  },[]);\n\n    //stores the roster taken from the database\n    const [roster, setRoster] = useState([])\n\n    const spheroRosterCollection = useRef(fire.database().ref().child('SpheroElementary/instructors'));\n\n    useEffect(() => {\n        var latestRoster = 0;\n        spheroRosterCollection.current.on('value', (snap) => {\n            snap.forEach((doc) =>{\n                console.log(parseInt(doc.key), \"NEW!!!!NEW!!!\")\n                if (latestRoster < doc.key){\n                    latestRoster = doc.key\n                }\n            });\n            console.log(\"LATEST ROSTER:\",latestRoster)\n        });\n\n        //convers mins into hours and mins in a day\n        // i.e. 900 -> 3:00\n        const convertMins = (mins) => {\n          var num = mins;\n          var finHours = Math.trunc(num/60%12)\n          var hours = (num / 60);\n          var rhours = Math.floor(hours);\n          var minutes = (hours - rhours) * 60;\n          var rminutes = Math.round(minutes);\n          if (rminutes == 0){\n              rminutes=\"00\"\n          }\n          return finHours + \":\" + rminutes;\n      }\n\n      //takes in an array of start and end time and converts it respectfully\n      //i.e [900 - 1020] -> 3:00-5:00\n      const convertTime = (dayTimesArray) => {\n          return convertMins(dayTimesArray[0]) + \"-\" + convertMins(dayTimesArray[1])\n      }\n\n      // converts schedule from database to a more readable format\n      // resulting format looks like this: {mon:\"3:00-5:00\", tue:\"\", wed:\"3:00-5:00\", Tthu:\"3:00-5:00\", fri:\"\"}\n      const convertSchedule = (schedArray) => {\n          var finalSchedArray = {\n              \"mon\": \"\",\n              \"tue\": \"\",\n              \"wed\": \"\",\n              \"thu\": \"\",\n              \"fri\": \"\"\n          }\n\n          for (var day in schedArray){\n              if (day == 1){\n                  finalSchedArray[\"mon\"] = convertTime(schedArray[day][0])\n              }else if (day == 2){\n                  finalSchedArray[\"tue\"] = convertTime(schedArray[day][0])\n              }else if (day == 3){\n                  finalSchedArray[\"wed\"] = convertTime(schedArray[day][0])\n              }else if (day == 4){\n                  finalSchedArray[\"thu\"] = convertTime(schedArray[day][0])\n              }else if (day == 5){\n                  finalSchedArray[\"fri\"] = convertTime(schedArray[day][0])\n              }\n          }\n          return finalSchedArray\n      }\n\n\n        spheroRosterCollection.current.once('value', (snap) => {\n            const rosterFire = []\n            snap.forEach((doc) =>{\n                if (latestRoster === doc.key){\n                    console.log(\"LATEST ROSTER DOC.KEY:\",doc.key, doc.val())\n                    const instructorArray = doc.val();\n                    for (var instructor in instructorArray){\n                        // console.log(instructor)\n                        const mentorID = instructor;\n                        const mentorList = instructorArray[instructor];\n                        rosterFire.push(\n                            {\n                                \"mentorID\": mentorID,\n                                \"car\": mentorList[\"Car\"],\n                                \"ethnicity\": mentorList[\"Ethnicity\"],\n                                \"friday\": mentorList[\"Friday\"],\n                                \"gender\": mentorList[\"Gender\"],\n                                \"languages\": mentorList[\"Languages\"],\n                                \"monday\": mentorList[\"Monday\"],\n                                \"multipleDays\": mentorList[\"MultipleDays\"],\n                                \"name\": mentorList[\"Name\"],\n                                \"prevMentor\": mentorList[\"PreviousMentor\"],\n                                \"region\": mentorList[\"Region\"],\n                                \"shirtSize\": mentorList[\"ShirtSize\"],\n                                \"thursday\": mentorList[\"Thursday\"],\n                                \"tuesday\": mentorList[\"Tuesday\"],\n                                \"university\": mentorList[\"University\"],\n                                \"wednesday\": mentorList[\"Wednesday\"],\n                                \"year\": mentorList[\"Year\"],\n                                \"schedule\": convertSchedule(mentorList[\"Schedule\"])\n\n                            }\n                        )\n\n                    }\n                    // console.log(\"THE NEW ROSTER YES\",roster)\n                }\n            });\n            console.log(rosterFire)\n            setRoster(rosterFire)\n        });\n      },[]);\n\n    // const sortClicked = (e, name) => {\n    //     history.push('/spherohome/sortedroster');\n    // }\n\n    const [isLoading, setIsLoading] = useState(false);\n\n    const sortRoster = () => {\n        return fetch('https://apurva29.pythonanywhere.com/sort', {\n            method: 'POST', // or 'PUT'\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            body: JSON.stringify({\"Program\":\"SpheroElementary\"}),\n        })\n        .then(response => response.json())\n    }\n\n    const promiseRoster = () =>{\n        return Promise.all([sortRoster()])\n    }\n\n    const sortClicked = (e) => {\n        // history.push('/appjamhome/sortedroster');\n        setIsLoading(!isLoading);\n        promiseRoster()\n        .then(([sorted]) => {\n            // both have loaded!\n            setIsLoading(!isLoading);\n            console.log(\"PROMISE DONE!!!!\",sorted);\n            history.push('/spherohome/sortedroster');\n        })\n    }\n\n    const addClicked = (e) => {\n        // history.push('/appjamhome/sortedroster');\n        history.push({\n            pathname: \"/manualaddinstructor\",\n            state: {isNewRoster: false, program:\"sphero\"}\n        });\n    }\n\n\n    return (\n        <div>\n\n            {isLoading?(\n                <div style={loading}>\n                <h3>SORTING.... Please Wait.</h3>\n            </div>\n            ):null}\n\n            <TitleToolbar program=\"sphero\" season={quarter} year={year}  urlPath=\"sphero\"/>\n\n            <div className=\"programPageContainer\">\n\n            <div style={buttonContainer}>\n                <div style={sortBtnContainer}>\n                    <button onClick={addClicked} style={addBtn}>Add Instructor</button>\n                </div>\n                <div style={sortBtnContainer}>\n                    <button onClick={sortClicked} style={sortBtn}>SORT!</button>\n                </div>\n            </div>\n\n            <h1 style={programText}>Sphero</h1>\n\n            <div style={gridWrapper}>\n            <div style={gridContainer}>\n                <div style={titleRow}>Name</div>\n                <div style={titleRow}>Gender</div>\n                <div style={titleRow}>Ethnicity</div>\n                <div style={titleRow}>Languages</div>\n                <div style={titleRow}>University</div>\n                <div style={titleRow}>Year</div>\n                <div style={titleRow}>Region</div>\n                <div style={titleRow}>Mon</div>\n                <div style={titleRow}>Tue</div>\n                <div style={titleRow}>Wed</div>\n                <div style={titleRow}>Thu</div>\n                <div style={titleRow}>Fri</div>\n                <div style={titleRow}>Prev Mentor</div>\n                <div style={titleRow}>Car</div>\n                <div style={titleRow}>Multiple Days</div>\n                <div style={titleRow}>Shirt Size</div>\n            </div>\n\n            {roster.map((mentor) => (\n                <div style={gridEntryContainer} key={mentor.mentorID}>\n                <div style={entryRow}>{mentor.name}</div>\n                <div style={entryRow}>{mentor.gender}</div>\n                <div style={entryRow}>{mentor.ethnicity}</div>\n                <div style={entryRow}>{mentor.languages}</div>\n                <div style={entryRow}>{mentor.university}</div>\n                <div style={entryRow}>{mentor.year}</div>\n                <div style={entryRow}>{mentor.region}</div>\n                <div style={entryRow}>{mentor.schedule.mon}</div>\n                <div style={entryRow}>{mentor.schedule.tue}</div>\n                <div style={entryRow}>{mentor.schedule.wed}</div>\n                <div style={entryRow}>{mentor.schedule.thu}</div>\n                <div style={entryRow}>{mentor.schedule.fri}</div>\n                <div style={entryRow}>{mentor.prevMentor}</div>\n                <div style={entryRow}>{mentor.car}</div>\n                <div style={entryRow}>{mentor.multipleDays}</div>\n                <div style={entryRow}>{mentor.shirtSize}</div>\n\n                </div>\n                    ))}\n\n                </div>\n            </div>\n\n        </div>\n    )\n}\n\n\nconst programSchools = {\n    marginTop: \"20px\"\n}\n\n\nconst programText = {\n    color: \"#5B7082\",\n    marginLeft: \"5%\"\n}\n\nconst gridWrapper = {\n    display: \"flex\",\n    flexDirection: \"column\",\n}\n\nconst gridContainer = {\n    display: \"grid\",\n    gridTemplateColumns: \"200px 80px 200px 150px 80px 80px 80px 80px 80px 80px 80px 80px 80px 80px 80px 80px \",\n    gridTemplateRows: \"50px 50px 50px 50px 50px 50px 50px 50px 50px 50px 50px 50px 50px 50px 50px 50px \",\n    justifyContent: \"center\",\n    marginTop: \"10px\",\n    marginLeft: \"30%\"\n\n}\n\nconst gridEntryContainer = {\n    display: \"grid\",\n    gridTemplateColumns: \"200px 80px 200px 150px 80px 80px 80px 80px 80px 80px 80px 80px 80px 80px 80px 80px\",\n    gridTemplateRows: \"50px 50px 50px 50px 50px 50px 50px 50px 50px 50px 50px 50px 50px 50px 50px 50px  \",\n    justifyContent: \"center\",\n    marginTop: \"-750px\",\n    marginLeft: \"30%\"\n\n\n}\n\nconst titleRow = {\n    backgroundColor: \"#5B7082\",\n    color: \"white\",\n    fontSize: \"14px\",\n    textAlign: \"center\",\n    border: \"0.5px solid #D2D5DA\",\n    height: \"50px\",\n    paddingTop: \"15px\",\n    marginLeft: \"-0.5px\"\n}\n\nconst entryRow = {\n    backgroundColor: \"white\",\n    color: \"#202E47\",\n    fontSize: \"12px\",\n    textAlign: \"center\",\n    border: \"0.5px solid #D2D5DA\",\n    height: \"50px\",\n    paddingTop: \"16px\",\n    marginLeft: \"-0.5px\",\n}\n\n\n\nconst buttonContainer = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n}\n\n\nconst firebaseRoster = {\n    display: \"flex\",\n    flexDirection: \"column\",\n\t// justifyContent: \"center\",\n    // alignItems: \"center\",\n    // display: \"grid\",\n    // gridTemplateColumns: \"auto auto auto auto auto auto auto auto auto auto auto auto auto auto auto auto \"\n}\n\nconst mentorContainer = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    // alignItems: \"center\",\n}\n\nconst data = {\n    padding: \"10px\",\n    fontWeight: \"300\",\n    fontSize: \"12px\",\n    border: \"0.5px solid #49479D\",\n    marginRight: \"-1px\",\n    marginTop: \"-1px\",\n}\n\nconst sortBtnContainer = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    // marginLeft: \"50vw\"\n}\n\nconst sortBtn = {\n    fontSize: \"18px\",\n    fontWeight: \"500\",\n    color: \"white\",\n    backgroundColor: \"#49479D\",\n    borderRadius: \"28px\",\n    height: \"46px\",\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    marginLeft: \"10px\",\n    marginBottom: \"20px\",\n    width: \"300px\"\n\n}\n\nconst addBtn = {\n    fontSize: \"18px\",\n    fontWeight: \"500\",\n    color: \"#49479D\",\n    backgroundColor: \"white\",\n    borderRadius: \"28px\",\n    height: \"46px\",\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    marginLeft: \"10px\",\n    marginBottom: \"20px\",\n    width: \"300px\",\n    border: \"1px solid #49479D\"\n}\n\nconst loading = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    position: \"absolute\",\n    width: \"100vw\",\n    height: \"100vh\",\n    backgroundColor: \"rgba(32, 46, 71, 0.7)\",\n    color: \"white\"\n}\n","/app/src/pages/sortingPages/sphero/SpheroSortedRosterPage.js",["305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323"],"import React from 'react'\n\nimport TitleToolbar from '../../.././components/sortingPagesComponents/TitleToolbar';\nimport SortedInstructorsCard from '../../../components/sortingPagesComponents/SortedInstructorsCard';\nimport LockedList from '../../../components/sortingPagesComponents/LockedList'\nimport PendingList from '../../../components/sortingPagesComponents/PendingList'\n\nimport { useHistory } from \"react-router-dom\";\nimport { useState, useEffect, useRef } from 'react';\n\nimport GeneratePDF from '../SaveAsPDF/GeneratePDF';\nimport { PDFDownloadLink } from \"@react-pdf/renderer\";\n\nimport car from '../../.././assets/car.png';\nimport carMentor from '../../.././assets/carMentor.png';\nimport mentor from '../../.././assets/mentor.png';\nimport birb from '../../.././assets/animalIcons/birb.png';\n\nimport fire from '../../.././config/fire';\n\n/* \n    this page shows the sorted roster for sphero\n*/\nexport default function SpheroSortedRosterPage() {\n\n    //User auth \n    const [user, setUser] = useState(null);\n\n    //variable for toggling the modal to ask user if they really want to re-sort\n    const [showResortModal, setShowResortModal] = useState(false)\n\n    //stores the sorted roster taken from the database\n    const [schools, setSchools] = useState([]);    \n\n    //stores the quarter from the database\n    const [quarter, setQuarter] = useState(\"\");\n\n    //stores the year from the database\n    const [year, setYear] = useState(\"\");\n\n    //loading modal when resorting\n    const [isLoading, setIsLoading] = useState(false);\n\n    //History hook for navigation\n    let history = useHistory();\n\n    //checks if user is currently logged in (authenticates user)\n    useEffect(() => {\n        fire.auth().onAuthStateChanged(user => {\n            if (user){\n                setUser(user);\n            }else{\n                history.push('/');\n            }\n            \n          })\n      },[]);\n\n    //accesses firebase for sphero's quarter and year\n    const quarterYearDatabase = useRef(fire.database().ref().child('seasonYear/-M8idEUsNN1M5VcJDv-I/sphero'))\n\n    //accesses firebase for quarter and the year\n    useEffect(() => {\n        quarterYearDatabase.current.once('value', (snap) => {\n            const quarterYear = snap.val();\n            console.log(\"CURRENT QUARTER:\", quarterYear)\n            setQuarter(quarterYear.quarter);\n            setYear(quarterYear.year);\n        });\n    },[]);\n\n      //convers mins into hours and mins in a day \n      // i.e. 900 -> 3:00\n      const convertMins = (mins) => {\n        var num = mins;\n        var finHours = Math.trunc(num/60%12)\n        var hours = (num / 60);\n        var rhours = Math.floor(hours);\n        var minutes = (hours - rhours) * 60;\n        var rminutes = Math.round(minutes);\n        if (rminutes == 0){\n            rminutes=\"00\"\n        }\n        return finHours + \":\" + rminutes;\n    }\n\n    //takes in an array of start and end time and converts it respectfully\n    //i.e [900 - 1020] -> 3:00-5:00\n    const convertTime = (dayTimesArray) => {\n        return convertMins(dayTimesArray[0]) + \"-\" + convertMins(dayTimesArray[1])\n    }\n    \n    // converts schedule from database to a more readable format\n    const convertSchedule = (schedArray) => {\n        // console.log(schedArray)\n        var finalSchedArray = {\n            \"mon\": \"\",\n            \"tue\": \"\",\n            \"wed\": \"\",\n            \"thu\": \"\",\n            \"fri\": \"\"\n        }\n\n        for (var day in schedArray){\n            if (day == 1){\n                finalSchedArray[\"mon\"] = convertTime(schedArray[day][0])\n            }else if (day == 2){\n                finalSchedArray[\"tue\"] = convertTime(schedArray[day][0])\n            }else if (day == 3){\n                finalSchedArray[\"wed\"] = convertTime(schedArray[day][0])\n            }else if (day == 4){\n                finalSchedArray[\"thu\"] = convertTime(schedArray[day][0])\n            }else if (day == 5){\n                finalSchedArray[\"fri\"] = convertTime(schedArray[day][0])\n            }\n        }\n        return finalSchedArray\n    }\n\n    const spheroSortedRosterCollection = useRef(fire.database().ref().child('SpheroElementary/matches'));\n    const firstChild = useRef(fire.database().ref().child('SpheroElementary/matches').limitToFirst(1));\n\n    useEffect(() => {\n        var matchesLen = 0;\n\n        var latestRoster = 0;\n        spheroSortedRosterCollection.current.on('value', (snap) => {\n            matchesLen = snap.numChildren();\n            // console.log(\"NUMBER OF MATCHES\", matchesLen)\n            snap.forEach((doc) =>{\n                console.log(parseInt(doc.key), \"NEW!!!!NEW!!!\")\n                if (latestRoster < doc.key){\n                    latestRoster = doc.key\n                }\n            });\n            console.log(\"LATEST ROSTER:\",latestRoster)\n            \n            if (parseInt(matchesLen) > 10){\n                // console.log(\"ADASDDASDSADSA\", matchesLen)\n                firstChild.current.once('value', (snap) => {\n                    snap.forEach((doc) =>{\n                        console.log(\"OLDEST MATCH\",doc.key);\n                        doc.ref.remove();\n                    });\n                })\n            }\n        });\n\n\n        spheroSortedRosterCollection.current.on('value', (snap) => {     \n            const roster = []      \n            snap.forEach((doc) =>{\n                if (latestRoster === doc.key){\n                    // console.log(\"LATEST ROSTER DOC.KEY:\",doc.key, doc.val())\n                    const schoolArray = doc.val();\n                    for (var school in schoolArray){\n                        // console.log(school)\n                        const mentorInfoArray = []\n                        for (var mentor in schoolArray[school]){\n                            if (schoolArray[school][mentor][\"TeacherName\"] != undefined){\n                                mentorInfoArray.push(\n                                    {\n                                        \"name\":schoolArray[school][mentor][\"TeacherName\"],\n                                        \"firstName\": schoolArray[school][mentor][\"TeacherName\"].split(\" \")[0],\n                                        \"car\": schoolArray[school][mentor][\"Car\"],\n                                        \"ethnicity\": schoolArray[school][mentor][\"Ethnicity\"],\n                                        \"gender\": schoolArray[school][mentor][\"Gender\"],\n                                        \"languages\": schoolArray[school][mentor][\"Languages\"],\n                                        \"multipleDays\": schoolArray[school][mentor][\"MultipleDays\"],\n                                        \"prevMentor\": schoolArray[school][mentor][\"PreviousMentor\"],\n                                        \"shirtSize\": schoolArray[school][mentor][\"ShirtSize\"],\n                                        \"university\": schoolArray[school][mentor][\"University\"],\n                                        \"year\": schoolArray[school][mentor][\"Year\"],\n                                        \"teacherSchedule\": convertSchedule(schoolArray[school][mentor][\"TeacherSchedule\"]),\n                                        \"region\": schoolArray[school][mentor][\"Region\"],\n                                        \"schoolName\": schoolArray[school][mentor][\"SchoolName\"],\n                                        \"schoolSchedule\": convertSchedule(schoolArray[school][mentor][\"Schedule\"]),\n                                        \"isLocked\": schoolArray[school][mentor][\"Locked\"],\n                                    }\n                                )\n                            }\n                            \n                        }\n                        // console.log(\"AJDLSAJDLKSADSA\", school)\n                        if (school === \"Locked\" || school === \"Removed\" || school === \"Available\"){\n                            console.log(\"THIS IS LOCKED, SKIP\", school)\n                        }else{\n                            roster.push({\"school\":school, \"mentors\":mentorInfoArray})\n                        }\n                        \n                    }\n                    // console.log(\"THE NEW ROSTER YES\",roster)\n                }\n            });\n            setSchools(roster)\n        });\n      },[]);\n\n    // console.log(schools)\n\n    const resortRoster = () => {\n        return fetch('https://apurva29.pythonanywhere.com/resort', {\n            method: 'POST', // or 'PUT'\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            body: JSON.stringify({\"Program\":\"SpheroElementary\"}),\n        })\n        .then(response => response.json())\n    }\n\n    const promiseRoster = () =>{\n        return Promise.all([resortRoster()])\n    }\n\n\n    //shows modal if user really wants to re-sort\n    const resortClicked = () => {\n        console.log(\"resort\");\n        setShowResortModal(!showResortModal);\n    }\n\n    //re-sort when clicked yes on the modal\n    const resortYes = () => {\n        console.log(\"YES RESORT!\");\n        setShowResortModal(!showResortModal);\n\n        setIsLoading(!isLoading);\n        promiseRoster()\n        .then(([sorted]) => {\n            // both have loaded!\n            setIsLoading(!isLoading);\n            console.log(\"PROMISE DONE=RESORTED!!!!\",sorted);\n            window.location.reload();\n        })\n\n\n    }\n\n    //don't resort when no is clicked on the modal\n    const resortNo = () => {\n        console.log(\"DONT RESORT!\");\n        setShowResortModal(!showResortModal);\n    }\n\n\n    return (\n        <div>\n\n            {isLoading?(\n                <div style={loading}>\n                <h3>RE-SORTING.... Please Wait.</h3>\n            </div>\n            ):null}\n    \n            <TitleToolbar program=\"Shpero\" season={quarter} year={year} urlPath=\"sphero\"/>\n\n            <div className=\"programPageContainer\">\n\n                <div style={iconGuideWrapper}>\n                    <div style={box}>\n                        <div style={iconGuideContainer}>\n                            <div style={iconGuideNamePair}>\n                                <div style={iconGuideNamePairAnimal}>\n                                    <img src={birb} style={iconGuideIconStyle}/>\n                                    <h6 style={iconGuideTextAnimalStyle}>name</h6>\n                                </div>\n                                <h6 style={iconGuideTextStyle}>previous mentor</h6>\n                            </div>\n\n                            <div style={iconGuideNamePair}>\n                                <img src={car} style={iconGuideIconStyle}/>\n                                <h6 style={iconGuideTextStyle}>has a car</h6>\n                            </div>\n\n                            <div style={iconGuideNamePair}>\n                                <img src={mentor} style={iconGuideIconStyle} />\n                                <h6 style={iconGuideTextStyle}>previous mentor</h6>\n                            </div>\n\n                            <div style={iconGuideNamePair}>\n                                <img src={carMentor} style={iconGuideIconStyle} />\n                                <h6 style={iconGuideTextStyle}>has a car AND previous mentor</h6>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div style={saveResort}>\n                        <button onClick={resortClicked} style={resortBtn}>Re-sort!</button>\n                        {showResortModal?(\n                            <div style={modalContainer}>\n                                <div style={modal}>\n                                    <h3>Are you sure you want to re-sort?</h3>\n                                    <div style={modalOptions}>\n                                        <button onClick={resortNo} style={noBtn}>NO</button>\n                                        <button onClick={resortYes} style={yesBtn}>Yes</button>\n                                    </div>\n                                </div>\n                            </div>\n                        ):null}\n                        {/* <button onClick={save} style={saveBtn}>SAVE!</button> */}\n\n                        <PDFDownloadLink\n                            document = {<GeneratePDF sortedRoster={schools}/>}\n                            fileName=\"sortedRoster.pdf\"\n                            style={saveBtn}\n                        >\n                            Save as PDF!\n                        </PDFDownloadLink>\n\n                    </div>\n                </div>\n                \n                <div className=\"sortedInstructorCardsWrapper\">\n                    <div style={pendingLockedContainer}>\n                        <PendingList program=\"SpheroElementary\"/>\n                        <LockedList program=\"SpheroElementary\"/>\n                    </div>\n\n                    <div className=\"instructorCardsContainer\">\n                        {schools.map((schoolMentors,i) => (\n                            <SortedInstructorsCard program=\"SpheroElementary\" instructors={schoolMentors} SbgColor=\"#7FC9FF\" SborderColor=\"#0099FF\" key={schoolMentors.school}/>\n                        ))}\n                    </div>\n                </div>\n            </div> \n\n\n\n        </div>\n    )\n}\n\nconst pendingLockedContainer = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    // alignItems: \"center\",\n    flexWrap: \"wrap\",\n    marginTop: \"-10px\"\n}\n\nconst pendingLockedBox = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    // justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"300px\",\n    minHeight: \"50px\",\n    maxHeight: \"500px\",\n    backgroundColor: \"white\",\n    marginLeft: \"10px\",\n    borderRadius: \"12px\",\n    border: \"1px solid #A4A3CE\",\n    marginTop: \"10px\"\n}\n\nconst pendingLockedTitle = {\n    fontSize: \"14px\",\n    fontWeight: \"500\",\n    padding: \"5px\",\n    backgroundColor: \"#A4A3CE\",\n    width: \"100%\",\n    textAlign: \"center\",\n    color: \"white\",\n    borderRadius: \"10px\"\n}\n\nconst pendingLockedNameContainer = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    margin: \"10px\"\n}\n\nconst pendingLockedName = {\n    fontWeight: \"400\",\n    fontSize: \"12px\",\n    // margin: \"1px\",\n    padding: \"1px\",\n    color: \"#202E47\",\n    // backgroundColor: \"#A4A3CE\",\n    width: \"300px\",\n    textAlign: \"center\"\n}\n\nconst modalContainer = {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    position: \"fixed\",\n    width: \"100vw\",\n    height: \"100vh\",\n    backgroundColor: \"rgb(0, 0, 0, 0.5)\",\n    bottom: 0,\n    right: 0,\n    \n}\n\nconst modal = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    // justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"25vw\",\n    height: \"20vh\",\n    backgroundColor: \"white\",\n    borderRadius: \"10px\",\n    padding: \"45px\"\n}\n\nconst modalOptions = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: \"25px\"\n}\n\nconst saveResort = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginLeft: \"20px\"\n}\n\nconst saveBtn = {\n    fontSize: \"14px\",\n    color: \"white\",\n    backgroundColor: \"#49479D\",\n    borderRadius: \"28px\",\n    height: \"46px\",\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\",\n    // padding: \"10px\",\n    marginLeft: \"10px\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n\n}\n\nconst resortBtn = {\n    fontSize: \"14px\",\n    color: \"#49479D\",\n    backgroundColor: \"white\",\n    border: \"0.5px solid #49479D\",\n    borderRadius: \"28px\",\n    height: \"46px\",\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n\n}\n\nconst yesBtn = {\n    fontSize: \"14px\",\n    color: \"#49479D\",\n    backgroundColor: \"white\",\n    border: \"0.5px solid #49479D\",\n    borderRadius: \"28px\",\n    height: \"46px\",\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"5vw\",\n    marginLeft: \"5vw\"\n\n}\n\nconst noBtn = {\n    fontSize: \"14px\",\n    color: \"white\",\n    backgroundColor: \"#49479D\",\n    // border: \"0.5px solid #49479D\",\n    borderRadius: \"28px\",\n    height: \"46px\",\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    width: \"5vw\",\n}\n\nconst iconGuideWrapper = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    // marginTop: \"5%\",\n    marginBottom: \"2%\"\n}\n\nconst box = {\n    width: \"670px\",\n    height: \"70px\",\n    backgroundColor: \"#D2D5DA\",\n    borderRadius: \"10px\"\n}\n\nconst iconGuideContainer = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: \"7px\"\n}\n\nconst iconGuideNamePairAnimal = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n}\n\nconst iconGuideTextAnimalStyle = {\n    fontSize: \"12px\",\n    fontWeight: \"400\",\n    marginLeft: \"3px\",\n    color: \"#202E47\",\n}\n\nconst iconGuideNamePair = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginleft: \"15px\",\n    marginRight: \"15px\"\n}\n\nconst iconGuideIconStyle = {\n    width: \"35px\",\n}\n\nconst iconGuideTextStyle = {\n    fontSize: \"12px\",\n    fontWeight: \"400\",\n    marginLeft: \"3px\",\n    color: \"#202E47\",\n    color: \"#49479D\"\n}\n\nconst loading = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    position: \"absolute\",\n    width: \"100vw\",\n    height: \"100vh\",\n    backgroundColor: \"rgba(32, 46, 71, 0.7)\",\n    color: \"white\"\n}","/app/src/pages/sortingPages/webjam/WebjamShirtPage.js",["324"],"import React from 'react'\n\nimport TitleToolbar from '../../.././components/sortingPagesComponents/TitleToolbar';\nimport { useHistory } from \"react-router-dom\";\nimport { useState, useEffect, useRef } from 'react';\n\nimport fire from '../../.././config/fire';\n\n/* \n    this page shows the total shirts for each size for webjam\n*/\nexport default function WebjamShirtPage() {\n\n    //auth variable\n    const [user, setUser] = useState(null);\n\n    //where data from firebase is stored for the shirt sizes\n    const [sizes, setSizes] = useState({})\n\n    //stores the quarter from the database\n    const [quarter, setQuarter] = useState(\"\");\n\n    //stores the year from the database\n    const [year, setYear] = useState(\"\");\n\n    //navigation variable to naviagate to other pages\n    let history = useHistory();\n\n    //checks if user is currently logged in\n    useEffect(() => {\n        fire.auth().onAuthStateChanged(user => {\n            if (user){\n                setUser(user);\n            }else{\n                history.push('/');\n            }\n            \n          })\n      });\n\n    //accesses firebase for appjam's quarter and year\n    const quarterYearDatabase = useRef(fire.database().ref().child('seasonYear/-M8idEUsNN1M5VcJDv-I/appjam'))\n\n    //accesses firebase for quarter and the year\n    useEffect(() => {\n        quarterYearDatabase.current.once('value', (snap) => {\n            const quarterYear = snap.val();\n            console.log(\"CURRENT QUARTER:\", quarterYear)\n            setQuarter(quarterYear.quarter);\n            setYear(quarterYear.year);\n        });\n    },[]);\n\n    //gets the appjam shirt size info fromt he database using firebase\n    const sortedRosterCollection = useRef(fire.database().ref().child('WebJam/shirts'))\n\n    //gets the info from firebase\n    useEffect(() => {\n        fetch('https://apurva29.pythonanywhere.com/shirts', {\n            method: 'POST', // or 'PUT'\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            body: JSON.stringify({\"Program\":\"WebJam\"}),\n        })\n        .then(response => response.json())\n\n        sortedRosterCollection.current.once('value', (snap) => {\n            const shirtSizes = {}\n            // const roster = []\n            snap.forEach((doc) =>{\n                shirtSizes[doc.key] = doc.val();\n            });\n            setSizes(shirtSizes);\n        });\n    },[]);\n    console.log(sizes);\n\n    return (\n        <div>\n            <TitleToolbar program=\"Webjam\" season={quarter} year={year} urlPath=\"webjam\"/>\n\n            <div className=\"programPageContainer\">\n                <div style={tableContainer}>\n                    <div style={sizeCountPair}>\n                        <h3 style={size1}>S</h3>\n                        <h3 style={count}>{sizes.S}</h3>\n                    </div>\n\n                    <div style={sizeCountPair}>\n                        <h3 style={size}>M</h3>\n                        <h3 style={count}>{sizes.M}</h3>\n                    </div>\n\n                    <div style={sizeCountPair}>\n                        <h3 style={size}>L</h3>\n                        <h3 style={count}>{sizes.L}</h3>\n                    </div>\n\n                    <div style={sizeCountPair}>\n                        <h3 style={size}>XL</h3>\n                        <h3 style={count}>{sizes.XL}</h3>\n                    </div>\n\n                    <div style={sizeCountPair}>\n                        <h3 style={size5}>XXL</h3>\n                        <h3 style={count}>{sizes.XXL}</h3>\n                    </div>\n                </div>\n            </div> \n\n        </div>\n    )\n}\n\nconst tableContainer = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: \"5%\"\n}\n\nconst sizeCountPair = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    textAlign: \"center\",\n    marginRight: \"-1px\"\n}\n\nconst size = {\n    width: \"150px\",\n    height: \"80px\",\n    backgroundColor: \"#7FC9FF\",\n    paddingTop: \"18%\",\n    border: \"0.5px solid #0099FF\",\n    fontSize: \"20px\",\n    fontWeight: \"500\",\n    color: \"white\"\n}\n\nconst size1 = {\n    width: \"150px\",\n    height: \"80px\",\n    backgroundColor: \"#7FC9FF\",\n    paddingTop: \"18%\",\n    border: \"0.5px solid #0099FF\",\n    borderTopLeftRadius: \"20px\",\n    fontSize: \"20px\",\n    fontWeight: \"500\",\n    color: \"white\"\n}\n\nconst size5 = {\n    width: \"150px\",\n    height: \"80px\",\n    backgroundColor: \"#7FC9FF\",\n    paddingTop: \"18%\",\n    border: \"0.5px solid #0099FF\",\n    borderTopRightRadius: \"20px\",\n    fontSize: \"20px\",\n    fontWeight: \"500\",\n    color: \"white\"\n}\n\nconst count = {\n    width: \"150px\",\n    height: \"80px\",\n    backgroundColor: \"white\",\n    paddingTop: \"18%\",\n    border: \"0.5px solid #0099FF\",\n    marginTop: \"-1px\",\n    fontSize: \"18px\",\n    fontWeight: \"400\",\n    color: \"#202E47\"\n}","/app/src/pages/sortingPages/sphero/SpheroAddRosterForm.js",["325","326"],"import React from 'react'\n\nimport { useHistory } from \"react-router-dom\";\nimport { useState, useEffect, useRef } from 'react';\nimport person from '../../.././assets/person.svg'\n\nimport fire from '../../.././config/fire';\n\n/* \n    form that asks whether the user wants to upload instructors manually or through a file\n*/\nexport default function SpheroAddRosterForm() {\n\n    //auth variable\n    const [user, setUser] = useState(null);\n\n    //variable for capturing whether quarter/season for the program\n    const [quarter, setQuarter] = useState(\"\");\n\n    //variable for capturing whether year for the program\n    const [year, setYear] = useState(\"\");\n\n    //variable for capturing whether the user chooses\n    //manual upload of file upload\n    const [input, setInput] = useState(\"\");\n\n    //navigation variable to naviagate to other pages\n    let history = useHistory();\n\n    //checks if user is currently logged in\n    useEffect(() => {\n        fire.auth().onAuthStateChanged(user => {\n            if (user){\n                setUser(user);\n            }else{\n                history.push('/');\n            }\n            \n          })\n      });\n\n    //handles the state change everytime the user toggles \n    //between manual vs file upload\n    const onChangeRadio = (e) => {\n        setInput(e.target.value);\n        console.log(e.target.value);\n\n    }\n\n    //handles the state change everytime the user changes quarter\n    const onChangeQuarter = (e) => {\n        setQuarter(e.target.value);\n        console.log(e.target.value);\n\n    }\n\n    //handles the state change everytime the user changes year\n    const onChangeYear = (e) => {\n        setYear(e.target.value);\n        console.log(e.target.value);\n\n    }\n    //accesses firebase for sphero quarter and year\n    const quarterYearDatabase = useRef(fire.database().ref().child('seasonYear/-M8idEUsNN1M5VcJDv-I/sphero'));\n\n    //validates user inputs\n    const nextClicked = () => {\n        console.log(\"submit\");\n        \n        if (quarter === \"\" || year === \"\" || input === \"\"){\n            alert(\"Please select an option for ALL the fields\")\n        }\n\n        if (input === \"file\"){\n            history.push('/spherohome/uploadroster');\n            quarterYearDatabase.current.once('value', (snap) => {\n                snap.ref.set({\n                    quarter: quarter,\n                    year: year\n                });\n            });\n        }else if (input === \"manual\"){\n            alert('manual chosen (not yet implemented)');\n            quarterYearDatabase.current.once('value', (snap) => {\n                snap.ref.set({\n                    quarter: quarter,\n                    year: year\n                });\n            });\n        } \n\n    }\n\n\n    return (\n        <div style={mainContainer}>\n\n            <div style={leftHalf}>\n\n                <div style={formContainer}>\n\n                    <h3 style={textStyle}>New sphero Roster</h3>\n                    \n                    <form onSubmit={nextClicked} style = {formStyle}>\n                        \n                        <div style={dropdowns}>\n\n                            <select name=\"quarter\" style={dropdownStyle} value={quarter} onChange={onChangeQuarter}>\n                                <option value=\"\" disabled selected>Choose Season...</option>\n                                <option value=\"Fall\">Fall</option>\n                                <option value=\"Winter\">Winter</option>\n                                <option value=\"Spring\">Spring</option>\n                                <option value=\"Summer\">Summer</option>\n                            </select>\n\n                            <select name=\"year\" style={dropdownStyle} value={year} onChange={onChangeYear}>\n                                <option value=\"\" disabled selected>Choose Year...</option>\n                                <option value=\"2015\">2015</option>\n                                <option value=\"2016\">2016</option>\n                                <option value=\"2017\">2017</option>\n                                <option value=\"2018\">2018</option>\n                                <option value=\"2019\">2019</option>\n                                <option value=\"2020\">2020</option>\n                                <option value=\"2021\">2021</option>\n                                <option value=\"2022\">2022</option>\n                                <option value=\"2023\">2023</option>\n                                <option value=\"2024\">2024</option>\n                                <option value=\"2025\">2025</option>\n                                <option value=\"2026\">2026</option>\n                                <option value=\"2027\">2027</option>\n                                <option value=\"2028\">2028</option>\n                                <option value=\"2029\">2029</option>\n                                <option value=\"2030\">2030</option>\n                                <option value=\"2031\">2031</option>\n                                <option value=\"2032\">2032</option>\n                                <option value=\"2033\">2033</option>\n                                <option value=\"2034\">2034</option>\n                                <option value=\"2035\">2035</option>\n                            </select>\n                        </div>\n\n                        <div style={radioButtonsContainer}>\n                       \n                            <h3 style={radiotitleText}>How do you want to add your roster?</h3>\n\n                            <div onChange={onChangeRadio}>\n                                {/* THIS IS A MANUAL INPUT OPTION \n                                we had planned on adding manual input to add a new roster but the way\n                                the code is implemented right, it's a little complicated and\n                                we kind of ran out of time but it's something that the future team \n                                should consider*/}\n\n                                {/* <div style={radioItem}>\n                                    <input type=\"radio\" value=\"manual\" name=\"input\"/> <p style={radioChoice}>Manual Input</p>\n                                </div> */}\n\n                                <div style={radioItem}>\n                                    <input type=\"radio\" value=\"file\" name=\"input\"/> <p style={radioChoice} >File Upload</p>\n                                </div>\n                                \n                            </div>\n\n                        </div>\n\n\n\n                        <input \n                            type = 'submit'\n                            value = 'Next'\n                            className = 'button'\n                            style= {nextBtn}\n                        />\n                    </form>\n\n                </div>\n\n            </div>\n\n            <div style={rightHalf}>\n                <img style={personIcon} src={person} alt=\"person icon\"/>\n                <div style={square}></div>\n            </div>\n\n            \n\n\n        </div>\n    )\n}\n\nconst mainContainer = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n\n}\n\nconst leftHalf = {\n    height: \"100vh\",\n    width: \"50vw\",\n    // backgroundColor: \"lightblue\"\n}\n\nconst rightHalf = {\n    height: \"100vh\",\n    width: \"50vw\",\n    backgroundColor: \"white\"\n}\n\nconst formContainer = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: \"20%\"\n}\n\nconst formStyle = {\n    display: \"flex\",\n    flexDirection: 'column',\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"60%\",\n    marginTop: \"30px\"\n}\n\nconst dropdowns = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n}\n\nconst textStyle = {\n    fontSize: \"48px\",\n    fontWeight: \"400\",\n    color: \"#202E47\",\n    // marginLeft: \"auto\"\n}\n\nconst radioButtonsContainer = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"left\",\n    marginTop: \"30px\"\n}\n\nconst radiotitleText = {\n    fontSize: \"18px\",\n    fontWeight: \"400\",\n    color: \"#202E47\"\n}\n\nconst radioItem = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"left\",\n    alignItems: \"center\",\n    marginTop: \"20px\"\n}\n\nconst radioChoice = {\n    fontSize: \"16px\",\n    fontWeight: \"400\",\n    color: \"#5B7082\",\n    marginLeft: \"10px\"\n}\n\nconst radioStyle = {\n    backgroundColor: \"#49479D\",\n    color: \"#49479D\"\n}\n\nconst dropdownStyle = {\n    width: \"214px\",\n    height: \"66px\",\n    marginLeft: \"5px\",\n    marginRight: \"5px\",\n    fontSize: \"18px\",\n    border: \"0px solid\",\n    boxShadow: \"1px 1px 10px #E6E6E8\"\n}\n\nconst square = {\n    width: \"50%\",\n    height: \"100vh\",\n    backgroundColor: \"#49479D\",\n    marginLeft: \"auto\"\n}\n\nconst personIcon = {\n    position: \"absolute\",\n    height: \"300px\",\n    width: \"300px\",\n    right: \"17%\",\n    top: \"68%\"\n}\n\nconst nextBtn = {\n    width: \"105px\",\n    height: \"45px\",\n    backgroundColor: \"#49479D\",\n    fontSize: \"18px\",\n    color: \"white\",\n    border: \"0px solid\",\n    marginTop: \"50px\",\n    marginLeft: \"auto\",\n    marginRight: \"15%\",\n    borderRadius: \"3px\"\n\n}","/app/src/pages/sortingPages/appjam/AppjamUploadRoster.js",["327","328"],"import React, {Component} from 'react';\nimport Dropzone from 'react-dropzone';\nimport csv from 'csv';\n\n// Page for Appjam program for uploading a csv file instructor roster\nclass AppjamUploadRosterPage extends Component {\n\n    // Splits the strings that are read from csv file and returns array with first and third token. Used mainly for the schedule (Monday: 10:00-12:00 returns [10:00, 12:00]\n    splitString = (string) => {\n        if (string == \"\") {\n            return \"\";\n        }\n        else {\n            var tokens = string.split(\" \");\n            return [tokens[0], tokens[2]];\n        }\n    }\n    \n    // Handles looping through the csv file for the data entries and calling the API to upload to the database\n    onDrop(files) {\n        this.setState({ files });\n\n        var file = files[0];\n\n        const reader = new FileReader();\n        reader.onload = () => {\n            csv.parse(reader.result, (err, data) => {\n\n                var userList = [];\n\n                const firstUser = {\"Name\": data[1][0], \"Gender\": data[1][1], \"Ethnicity\": data[1][2], \"Region\": data[1][3], \"University\": data[1][4], \"Year\": data[1][5],\n                                    \"PreviousMentor\": data[1][6], \"Car\": data[1][7], \"Languages\": data[1][8], \"ShirtSize\": data[1][9],\n                                    \"MultipleDays\": data[1][10], \"Monday\": this.splitString(data[1][11]), \"Tuesday\":  this.splitString(data[1][12]), \"Wednesday\":  this.splitString(data[1][13]), \n                                    \"Thursday\":  this.splitString(data[1][14]), \"Friday\":  this.splitString(data[1][15]),\n                                    \"Program\": [\"AppJam+\"], \"New\": true};\n\n                userList.push(firstUser);\n\n                fetch('https://apurva29.pythonanywhere.com/uploadinstructors', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n\n                    },\n                    body: JSON.stringify(firstUser)\n                })\n\n                for (var i = 2; i < data.length; i++) {\n                    const name = data[i][0];\n                    const gender = data[i][1];\n                    const ethnicity = data[i][2];\n                    const region = data[i][3];\n                    const university = data[i][4];\n                    const year = data[i][5];\n                    const returner = data[i][6];\n                    const car = data[i][7];\n                    const languages = data[i][8];\n                    const shirtsize = data[i][9];\n                    const multipledays = data[i][10];\n                    const Monday = data[i][11];\n                    const Tuesday = data[i][12];\n                    const Wednesday = data[i][13];\n                    const Thursday = data[i][14];\n                    const Friday = data[i][15];\n                    const newUser = {\"Name\": name, \"Gender\": gender, \"Ethnicity\": ethnicity, \"Region\": region, \"University\": university, \"Year\": year,\n                                    \"PreviousMentor\": returner, \"Car\": car, \"Languages\": languages, \"ShirtSize\": shirtsize,\n                                    \"MultipleDays\": multipledays, \"Monday\": this.splitString(Monday), \"Tuesday\":  this.splitString(Tuesday), \"Wednesday\":  this.splitString(Wednesday), \n                                    \"Thursday\":  this.splitString(Thursday), \"Friday\":  this.splitString(Friday),\n                                    \"Program\": [\"AppJam+\"], \"New\": false};\n                    userList.push(newUser);\n\n                    fetch('https://apurva29.pythonanywhere.com/uploadinstructors', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n\n                        },\n                        body: JSON.stringify(newUser)\n                    })\n                };\n            });\n        };\n\n        reader.readAsBinaryString(file);\n    }\n\n    // Routing for the Next button to go to the correct page\n    goNext=()=> {\n        this.props.history.push(\"/appjamhome/roster\");\n    }\n\n    render() {\n        const wellStyles = {maxWidth: 400, margin: '0 auto 10px' };\n        const fontSize = \"18px\";\n\n        return (\n            <div style={mainContainerStyle} align = \"center\" oncontextmenu=\"return false\">\n                <br /><br /><br />\n                <div style={dropZoneStyle} className = \"dropzone\">\n                    <h2 style={h2Style}>Please upload your <font size={fontSize} color=\"#49479D\">CSV </font>roster for APPJAM+ INSTRUCTORS...</h2>\n                    <Dropzone accept=\".csv\" onDropAccepted={this.onDrop.bind(this)} style={dropBoxStyle}>upload new..</Dropzone>\n                    <br /><br /><br />\n                    <button onClick={this.goNext} style={nextButtonStyle}>Next</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mainContainerStyle = {\n    width: \"100vw\",\n    height: \"100vh\",\n    backgroundColor: \"#D2D5DA\",\n}\n\nconst dropZoneStyle = {\n    position: \"relative\",\n    backgroundColor: \"white\",\n    borderRadius: '29px',\n    display: \"inline-block\",\n    boxShadow: '0 4px 4px rgba(0,0,0,0.25)',\n    top: \"25%\",\n    width: \"30%\",\n}\n\nconst dropBoxStyle = {\n    width: \"40%\",\n    borderStyle: \"solid\",\n    borderWidth: \"1px\",\n    borderRadius: \"4px\",\n    borderColor: \"#9097A3\",\n    fontFamily: \"Rubik\",\n    color: \"#5B7082\",\n    cursor: \"pointer\",\n    marginTop: \"40px\",\n    paddingTop: \"8px\",\n    paddingBottom: \"8px\"\n}\n\nconst h2Style = {\n    fontFamily: \"Rubik\",\n    fontWeight: \"normal\",\n    fontStyle: \"normal\",\n    fontSize: \"18px\",\n    lineHeight: \"21px\",\n    paddingTop: \"50px\"\n}\n\nconst nextButtonStyle = {\n    backgroundColor: \"#49479D\",\n    border: \"none\",\n    color: \"white\",\n    fontFamily: \"Rubik\",\n    fontSize: \"1vw\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n    paddingTop: \"10px\",\n    paddingBottom: \"10px\",\n    position: \"relative\",\n    left: \"120px\",\n    bottom: \"10px\",\n    borderRadius: \"3px\",\n    marginBottom: \"45px\",\n    cursor: \"pointer\"\n}\n\nexport default AppjamUploadRosterPage;","/app/src/pages/sortingPages/sphero/SpheroUploadInstitution.js",["329","330"],"import React, {Component} from 'react';\nimport Dropzone from 'react-dropzone';\nimport csv from 'csv';\n\n// For now nothing is routed to the program upload institution pages. There's just one upload institution page from the school home page. This could be implemented if you see it being useful.\n\n// Page for Appjam program for uploading a csv file institution roster\nclass SpheroUploadInstitutionsPage extends Component {\n\n    // Splits the strings that are read from csv file and returns array with first and third token. Used mainly for the schedule (Monday: 10:00-12:00 returns [10:00, 12:00]\n    splitString = (string) => {\n        if (string == \"\") {\n            return \"\";\n        }\n        else {\n            var tokens = string.split(\" \");\n            return [tokens[0], tokens[2]];\n        }\n    }\n\n    // Given a program(Appjam, Webjam, Sphero), checks to see if a school for that program has already been uploaded to the database. We do this since we need to change the \"New\" boolean JSON value for the API to operate properly.\n    checkNew = (program, programList) => {\n        if (programList.includes(program)) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n\n    // Handles looping through the csv file for the data entries and calling the API to upload to the database\n    onDrop(files) {\n        this.setState({ files });\n\n        var file = files[0];\n\n        const reader = new FileReader();\n        reader.onload = () => {\n            csv.parse(reader.result, (err, data) => {\n\n                var programList = [];\n                \n                const firstInstitution = {\"Name\": data[1][0], \"Address\": data[1][1], \"Program\": [data[1][3]], \"County\": data[1][2], \"Instructors\": parseInt(data[1][4]),\n                                            \"Monday\": this.splitString(data[1][5]), \"Tuesday\": this.splitString(data[1][6]), \"Wednesday\": this.splitString(data[1][7]),\n                                            \"Thursday\": this.splitString(data[1][8]), \"Friday\": this.splitString(data[1][9]), \"New\": true};\n\n                programList.push(data[1][3]);\n\n                fetch('http://apurva29.pythonanywhere.com/uploadinstitutions', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify(firstInstitution)\n                })\n\n                for (var i = 2; i < data.length; i++) {\n                    const name = data[i][0];\n                    const address = data[i][1];\n                    const county = data[i][2];\n                    const program = data[i][3];\n                    const instructors = data[i][4];\n                    const monday = data[i][5];\n                    const tuesday = data[i][6];\n                    const wednesday = data[i][7];\n                    const thursday = data[i][8];\n                    const friday = data[i][9];\n                    \n                    const newInstitution = {\"Name\": name, \"Address\": address, \"Program\": [program], \"County\" : county, \"Instructors\": parseInt(instructors), \"Monday\": this.splitString(monday),\n                                            \"Tuesday\": this.splitString(tuesday), \"Wednesday\": this.splitString(wednesday), \"Thursday\": this.splitString(thursday), \"Friday\": this.splitString(friday), \"New\": this.checkNew(program, programList)};\n\n                    fetch('http://apurva29.pythonanywhere.com/uploadinstitutions', {\n                        method: 'POST',\n                        headers: {\n                        'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify(newInstitution)\n                    })\n\n                    if (programList.includes(program) == false) {\n                        programList.push(program);\n                    }\n                };\n            });\n        };\n\n        reader.readAsBinaryString(file);\n    }\n\n    render() {\n        const fontSize = \"18px\";\n\n        return (\n            <div style={mainContainerStyle} align = \"center\" oncontextmenu=\"return false\">\n                <br /><br /><br />\n                <div style={dropZoneStyle} className = \"dropzone\">\n                    <h2 style={h2Style}>Please upload your <font size={fontSize} color=\"#0099FF\">CSV </font>institution roster...</h2>\n                    <Dropzone accept=\".csv\" onDropAccepted={this.onDrop.bind(this)} style={dropBoxStyle}>upload new..</Dropzone>\n                    <br /><br /><br />\n                    <button style={nextButtonStyle}>Next</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mainContainerStyle = {\n    width: \"100vw\",\n    height: \"100vh\",\n    backgroundColor: \"#D2D5DA\",\n}\n\nconst dropZoneStyle = {\n    position: \"relative\",\n    backgroundColor: \"white\",\n    borderRadius: '29px',\n    display: \"inline-block\",\n    boxShadow: '0 4px 4px rgba(0,0,0,0.25)',\n    top: \"25%\",\n    width: \"30%\"\n}\n\nconst dropBoxStyle = {\n    width: \"40%\",\n    borderStyle: \"solid\",\n    borderWidth: \"1px\",\n    borderRadius: \"4px\",\n    borderColor: \"#9097A3\",\n    fontFamily: \"Rubik\",\n    color: \"#5B7082\",\n    cursor: \"pointer\",\n    marginTop: \"40px\",\n    paddingTop: \"8px\",\n    paddingBottom: \"8px\"\n}\n\nconst h2Style = {\n    fontFamily: \"Rubik\",\n    fontWeight: \"normal\",\n    fontStyle: \"normal\",\n    fontSize: \"18px\",\n    lineHeight: \"21px\",\n    paddingTop: \"50px\"\n}\n\nconst nextButtonStyle = {\n    backgroundColor: \"#0099FF\",\n    border: \"none\",\n    color: \"white\",\n    fontFamily: \"Rubik\",\n    fontSize: \"1vw\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n    paddingTop: \"10px\",\n    paddingBottom: \"10px\",\n    position: \"relative\",\n    left: \"120px\",\n    bottom: \"10px\",\n    borderRadius: \"3px\",\n    marginBottom: \"45px\",\n    cursor: \"pointer\"\n}\n\nexport default SpheroUploadInstitutionsPage;","/app/src/pages/sortingPages/sphero/SpheroUploadRoster.js",["331","332"],"import React, {Component} from 'react';\nimport Dropzone from 'react-dropzone';\nimport csv from 'csv';\n\n// Page for Sphero program for uploading a csv file instructor roster\nclass SpheroUploadRosterPage extends Component {\n\n    // Splits the strings that are read from csv file and returns array with first and third token. Used mainly for the schedule (Monday: 10:00-12:00 returns [10:00, 12:00]\n    splitString = (string) => {\n        if (string == \"\") {\n            return \"\";\n        }\n        else {\n            var tokens = string.split(\" \");\n            return [tokens[0], tokens[2]];\n        }\n    }\n\n    // Handles looping through the csv file for the data entries and calling the API to upload to the database\n    onDrop(files) {\n        this.setState({ files });\n\n        var file = files[0];\n\n        const reader = new FileReader();\n        reader.onload = () => {\n            csv.parse(reader.result, (err, data) => {\n\n                var userList = [];\n\n                const firstUser = {\"Name\": data[1][0], \"Gender\": data[1][1], \"Ethnicity\": data[1][2], \"Region\": data[1][3], \"University\": data[1][4], \"Year\": data[1][5],\n                                    \"PreviousMentor\": data[1][6], \"Car\": data[1][7], \"Languages\": data[1][8], \"ShirtSize\": data[1][9],\n                                    \"MultipleDays\": data[1][10], \"Monday\": this.splitString(data[1][11]), \"Tuesday\":  this.splitString(data[1][12]), \"Wednesday\":  this.splitString(data[1][13]), \n                                    \"Thursday\":  this.splitString(data[1][14]), \"Friday\":  this.splitString(data[1][15]),\n                                    \"Program\": [\"SpheroElementary\"], \"New\": true};\n\n                userList.push(firstUser);\n\n                fetch('https://apurva29.pythonanywhere.com/uploadinstructors', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n\n                    },\n                    body: JSON.stringify(firstUser)\n                })\n\n                for (var i = 2; i < data.length; i++) {\n                    const name = data[i][0];\n                    const gender = data[i][1];\n                    const ethnicity = data[i][2];\n                    const region = data[i][3];\n                    const university = data[i][4];\n                    const year = data[i][5];\n                    const returner = data[i][6];\n                    const car = data[i][7];\n                    const languages = data[i][8];\n                    const shirtsize = data[i][9];\n                    const multipledays = data[i][10];\n                    const Monday = data[i][11];\n                    const Tuesday = data[i][12];\n                    const Wednesday = data[i][13];\n                    const Thursday = data[i][14];\n                    const Friday = data[i][15];\n                    const newUser = {\"Name\": name, \"Gender\": gender, \"Ethnicity\": ethnicity, \"Region\": region, \"University\": university, \"Year\": year,\n                                    \"PreviousMentor\": returner, \"Car\": car, \"Languages\": languages, \"ShirtSize\": shirtsize,\n                                    \"MultipleDays\": multipledays, \"Monday\": this.splitString(Monday), \"Tuesday\":  this.splitString(Tuesday), \"Wednesday\":  this.splitString(Wednesday), \n                                    \"Thursday\":  this.splitString(Thursday), \"Friday\":  this.splitString(Friday),\n                                    \"Program\": [\"SpheroElementary\"], \"New\": false};\n                    userList.push(newUser);\n\n                    fetch('https://apurva29.pythonanywhere.com/uploadinstructors', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n\n                        },\n                        body: JSON.stringify(newUser)\n                    })\n                };\n            });\n        };\n\n        reader.readAsBinaryString(file);\n    }\n\n    // Routing for the Next button to go to the correct page\n    goNext=()=> {\n        this.props.history.push(\"/spherohome/roster\");\n    }\n\n    render() {\n        const wellStyles = {maxWidth: 400, margin: '0 auto 10px' };\n        const fontSize = \"18px\";\n\n        return (\n            <div style={mainContainerStyle} align = \"center\" oncontextmenu=\"return false\">\n                <br /><br /><br />\n                <div style={dropZoneStyle} className = \"dropzone\">\n                    <h2 style={h2Style}>Please upload your <font size={fontSize} color=\"#49479D\">CSV </font>roster for SPHERO INSTRUCTORS...</h2>\n                    <Dropzone accept=\".csv\" onDropAccepted={this.onDrop.bind(this)} style={dropBoxStyle}>upload new..</Dropzone>\n                    <br /><br /><br />\n                    <button onClick={this.goNext} style={nextButtonStyle}>Next</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mainContainerStyle = {\n    width: \"100vw\",\n    height: \"100vh\",\n    backgroundColor: \"#D2D5DA\",\n}\n\nconst dropZoneStyle = {\n    position: \"relative\",\n    backgroundColor: \"white\",\n    borderRadius: '29px',\n    display: \"inline-block\",\n    boxShadow: '0 4px 4px rgba(0,0,0,0.25)',\n    top: \"25%\",\n    width: \"30%\",\n}\n\nconst dropBoxStyle = {\n    width: \"40%\",\n    borderStyle: \"solid\",\n    borderWidth: \"1px\",\n    borderRadius: \"4px\",\n    borderColor: \"#9097A3\",\n    fontFamily: \"Rubik\",\n    color: \"#5B7082\",\n    cursor: \"pointer\",\n    marginTop: \"40px\",\n    paddingTop: \"8px\",\n    paddingBottom: \"8px\"\n}\n\nconst h2Style = {\n    fontFamily: \"Rubik\",\n    fontWeight: \"normal\",\n    fontStyle: \"normal\",\n    fontSize: \"18px\",\n    lineHeight: \"21px\",\n    paddingTop: \"50px\"\n}\n\nconst nextButtonStyle = {\n    backgroundColor: \"#49479D\",\n    border: \"none\",\n    color: \"white\",\n    fontFamily: \"Rubik\",\n    fontSize: \"1vw\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n    paddingTop: \"10px\",\n    paddingBottom: \"10px\",\n    position: \"relative\",\n    left: \"120px\",\n    bottom: \"10px\",\n    borderRadius: \"3px\",\n    marginBottom: \"45px\",\n    cursor: \"pointer\"\n}\n\nexport default SpheroUploadRosterPage;","/app/src/pages/sortingPages/webjam/WebjamUploadRoster.js",["333","334"],"import React, {Component} from 'react';\nimport Dropzone from 'react-dropzone';\nimport csv from 'csv';\n\n// Page for Webjam program for uploading a csv file instructor roster\nclass WebjamUploadRosterPage extends Component {\n    \n    // Splits the strings that are read from csv file and returns array with first and third token. Used mainly for the schedule (Monday: 10:00-12:00 returns [10:00, 12:00]\n    splitString = (string) => {\n        if (string == \"\") {\n            return \"\";\n        }\n        else {\n            var tokens = string.split(\" \");\n            return [tokens[0], tokens[2]];\n        }\n    }\n    \n    // Handles looping through the csv file for the data entries and calling the API to upload to the database\n    onDrop(files) {\n        this.setState({ files });\n\n        var file = files[0];\n\n        const reader = new FileReader();\n        reader.onload = () => {\n            csv.parse(reader.result, (err, data) => {\n\n                var userList = [];\n\n                const firstUser = {\"Name\": data[1][0], \"Gender\": data[1][1], \"Ethnicity\": data[1][2], \"Region\": data[1][3], \"University\": data[1][4], \"Year\": data[1][5],\n                                    \"PreviousMentor\": data[1][6], \"Car\": data[1][7], \"Languages\": data[1][8], \"ShirtSize\": data[1][9],\n                                    \"MultipleDays\": data[1][10], \"Monday\": this.splitString(data[1][11]), \"Tuesday\":  this.splitString(data[1][12]), \"Wednesday\":  this.splitString(data[1][13]), \n                                    \"Thursday\":  this.splitString(data[1][14]), \"Friday\":  this.splitString(data[1][15]),\n                                    \"Program\": [\"WebJam\"], \"New\": true};\n\n                userList.push(firstUser);\n\n                fetch('https://apurva29.pythonanywhere.com/uploadinstructors', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n \n                    },\n                    body: JSON.stringify(firstUser)\n                })\n\n                for (var i = 2; i < data.length; i++) {\n                    const name = data[i][0];\n                    const gender = data[i][1];\n                    const ethnicity = data[i][2];\n                    const region = data[i][3];\n                    const university = data[i][4];\n                    const year = data[i][5];\n                    const returner = data[i][6];\n                    const car = data[i][7];\n                    const languages = data[i][8];\n                    const shirtsize = data[i][9];\n                    const multipledays = data[i][10];\n                    const Monday = data[i][11];\n                    const Tuesday = data[i][12];\n                    const Wednesday = data[i][13];\n                    const Thursday = data[i][14];\n                    const Friday = data[i][15];\n                    const newUser = {\"Name\": name, \"Gender\": gender, \"Ethnicity\": ethnicity, \"Region\": region, \"University\": university, \"Year\": year,\n                                    \"PreviousMentor\": returner, \"Car\": car, \"Languages\": languages, \"ShirtSize\": shirtsize,\n                                    \"MultipleDays\": multipledays, \"Monday\": this.splitString(Monday), \"Tuesday\":  this.splitString(Tuesday), \"Wednesday\":  this.splitString(Wednesday), \n                                    \"Thursday\":  this.splitString(Thursday), \"Friday\":  this.splitString(Friday),\n                                    \"Program\": [\"WebJam\"], \"New\": false};\n                    userList.push(newUser);\n\n                    fetch('https://apurva29.pythonanywhere.com/uploadinstructors', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n\n                        },\n                        body: JSON.stringify(newUser)\n                    })\n                };\n            });\n        };\n\n        reader.readAsBinaryString(file);\n    }\n\n    // Routing for the Next button to go to the correct page\n    goNext=()=> {\n        this.props.history.push(\"/webjamhome/roster\");\n    }\n\n    render() {\n        const wellStyles = {maxWidth: 400, margin: '0 auto 10px' };\n        const fontSize = \"18px\";\n\n        return (\n            <div style={mainContainerStyle} align = \"center\" oncontextmenu=\"return false\">\n                <br /><br /><br />\n                <div style={dropZoneStyle} className = \"dropzone\">\n                    <h2 style={h2Style}>Please upload your <font size={fontSize} color=\"#49479D\">CSV </font>roster for WEBJAM INSTRUCTORS...</h2>\n                    <Dropzone accept=\".csv\" onDropAccepted={this.onDrop.bind(this)} style={dropBoxStyle}>upload new..</Dropzone>\n                    <br /><br /><br />\n                    <button onClick={this.goNext} style={nextButtonStyle}>Next</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mainContainerStyle = {\n    width: \"100vw\",\n    height: \"100vh\",\n    backgroundColor: \"#D2D5DA\",\n}\n\nconst dropZoneStyle = {\n    position: \"relative\",\n    backgroundColor: \"white\",\n    borderRadius: '29px',\n    display: \"inline-block\",\n    boxShadow: '0 4px 4px rgba(0,0,0,0.25)',\n    top: \"25%\",\n    width: \"30%\",\n}\n\nconst dropBoxStyle = {\n    width: \"40%\",\n    borderStyle: \"solid\",\n    borderWidth: \"1px\",\n    borderRadius: \"4px\",\n    borderColor: \"#9097A3\",\n    fontFamily: \"Rubik\",\n    color: \"#5B7082\",\n    cursor: \"pointer\",\n    marginTop: \"40px\",\n    paddingTop: \"8px\",\n    paddingBottom: \"8px\"\n}\n\nconst h2Style = {\n    fontFamily: \"Rubik\",\n    fontWeight: \"normal\",\n    fontStyle: \"normal\",\n    fontSize: \"18px\",\n    lineHeight: \"21px\",\n    paddingTop: \"50px\"\n}\n\nconst nextButtonStyle = {\n    backgroundColor: \"#49479D\",\n    border: \"none\",\n    color: \"white\",\n    fontFamily: \"Rubik\",\n    fontSize: \"1vw\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n    paddingTop: \"10px\",\n    paddingBottom: \"10px\",\n    position: \"relative\",\n    left: \"120px\",\n    bottom: \"10px\",\n    borderRadius: \"3px\",\n    marginBottom: \"45px\",\n    cursor: \"pointer\"\n}\n\nexport default WebjamUploadRosterPage;","/app/src/pages/sortingPages/webjam/WebjamRosterPage.js",["335","336","337","338","339","340","341","342","343","344","345","346","347"],"import React from 'react'\n\nimport SideNavBar from '../../../components/sidebar/SideNavBar';\nimport SortingPagesNavbar from '../../../components/sortingPagesComponents/SortingPagesNavbar'\nimport TitleToolbar from '../../.././components/sortingPagesComponents/TitleToolbar';\nimport { useHistory } from \"react-router-dom\";\nimport { useState, useEffect, useRef } from 'react';\n\nimport fire from '../../.././config/fire';\n\n/*\n    this page shows the roster for webjam\n*/\nexport default function WebjamRosterPage() {\n\n    //auth variable\n    const [user, setUser] = useState(null);\n\n    //stores the quarter from the database\n    const [quarter, setQuarter] = useState(\"\");\n\n    //stores the year from the database\n    const [year, setYear] = useState(\"\");\n\n    //navigation variable to naviagate to other pages\n    let history = useHistory();\n\n    //checks if user is currently logged in\n    useEffect(() => {\n        fire.auth().onAuthStateChanged(user => {\n            if (user){\n                setUser(user);\n            }else{\n                history.push('/');\n            }\n\n          })\n      });\n\n    //accesses firebase for appjam's quarter and year\n    const quarterYearDatabase = useRef(fire.database().ref().child('seasonYear/-M8idEUsNN1M5VcJDv-I/webjam'))\n\n    //accesses firebase for quarter and the year\n    useEffect(() => {\n        quarterYearDatabase.current.once('value', (snap) => {\n            const quarterYear = snap.val();\n            console.log(\"CURRENT QUARTER:\", quarterYear)\n            setQuarter(quarterYear.quarter);\n            setYear(quarterYear.year);\n        });\n    },[]);\n\n    //stores the roster taken from the database\n    const [roster, setRoster] = useState([])\n\n    const webjamRosterCollection = useRef(fire.database().ref().child('WebJam/instructors'));\n\n    useEffect(() => {\n        var latestRoster = 0;\n        webjamRosterCollection.current.on('value', (snap) => {\n            snap.forEach((doc) =>{\n                console.log(parseInt(doc.key), \"NEW!!!!NEW!!!\")\n                if (latestRoster < doc.key){\n                    latestRoster = doc.key\n                }\n            });\n            console.log(\"LATEST ROSTER:\",latestRoster)\n        });\n\n        //convers mins into hours and mins in a day\n        // i.e. 900 -> 3:00\n        const convertMins = (mins) => {\n          var num = mins;\n          var finHours = Math.trunc(num/60%12)\n          var hours = (num / 60);\n          var rhours = Math.floor(hours);\n          var minutes = (hours - rhours) * 60;\n          var rminutes = Math.round(minutes);\n          if (rminutes == 0){\n              rminutes=\"00\"\n          }\n          return finHours + \":\" + rminutes;\n        }\n\n        //takes in an array of start and end time and converts it respectfully\n        //i.e [900 - 1020] -> 3:00-5:00\n        const convertTime = (dayTimesArray) => {\n          return convertMins(dayTimesArray[0]) + \"-\" + convertMins(dayTimesArray[1])\n        }\n\n        // converts schedule from database to a more readable format\n        // resulting format looks like this: {mon:\"3:00-5:00\", tue:\"\", wed:\"3:00-5:00\", Tthu:\"3:00-5:00\", fri:\"\"}\n        const convertSchedule = (schedArray) => {\n          var finalSchedArray = {\n              \"mon\": \"\",\n              \"tue\": \"\",\n              \"wed\": \"\",\n              \"thu\": \"\",\n              \"fri\": \"\"\n          }\n\n          for (var day in schedArray){\n              if (day == 1){\n                  finalSchedArray[\"mon\"] = convertTime(schedArray[day][0])\n              }else if (day == 2){\n                  finalSchedArray[\"tue\"] = convertTime(schedArray[day][0])\n              }else if (day == 3){\n                  finalSchedArray[\"wed\"] = convertTime(schedArray[day][0])\n              }else if (day == 4){\n                  finalSchedArray[\"thu\"] = convertTime(schedArray[day][0])\n              }else if (day == 5){\n                  finalSchedArray[\"fri\"] = convertTime(schedArray[day][0])\n              }\n          }\n          return finalSchedArray\n        }\n\n\n        webjamRosterCollection.current.once('value', (snap) => {\n            const rosterFire = []\n            snap.forEach((doc) =>{\n                if (latestRoster === doc.key){\n                    console.log(\"LATEST ROSTER DOC.KEY:\",doc.key, doc.val())\n                    const instructorArray = doc.val();\n                    for (var instructor in instructorArray){\n                        // console.log(instructor)\n                        const mentorID = instructor;\n                        const mentorList = instructorArray[instructor];\n                        rosterFire.push(\n                            {\n                                \"mentorID\": mentorID,\n                                \"car\": mentorList[\"Car\"],\n                                \"ethnicity\": mentorList[\"Ethnicity\"],\n                                \"friday\": mentorList[\"Friday\"],\n                                \"gender\": mentorList[\"Gender\"],\n                                \"languages\": mentorList[\"Languages\"],\n                                \"monday\": mentorList[\"Monday\"],\n                                \"multipleDays\": mentorList[\"MultipleDays\"],\n                                \"name\": mentorList[\"Name\"],\n                                \"prevMentor\": mentorList[\"PreviousMentor\"],\n                                \"region\": mentorList[\"Region\"],\n                                \"shirtSize\": mentorList[\"ShirtSize\"],\n                                \"thursday\": mentorList[\"Thursday\"],\n                                \"tuesday\": mentorList[\"Tuesday\"],\n                                \"university\": mentorList[\"University\"],\n                                \"wednesday\": mentorList[\"Wednesday\"],\n                                \"year\": mentorList[\"Year\"],\n                                \"schedule\": convertSchedule(mentorList[\"Schedule\"])\n\n                            }\n                        )\n\n                    }\n                    // console.log(\"THE NEW ROSTER YES\",roster)\n                }\n            });\n            console.log(rosterFire)\n            setRoster(rosterFire)\n        });\n      },[]);\n\n    // const sortClicked = (e, name) => {\n    //     history.push('/webjamhome/sortedroster');\n    // }\n\n    const [isLoading, setIsLoading] = useState(false);\n\n    const sortRoster = () => {\n        return fetch('https://apurva29.pythonanywhere.com/sort', {\n            method: 'POST', // or 'PUT'\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            body: JSON.stringify({\"Program\":\"WebJam\"}),\n        })\n        .then(response => response.json())\n    }\n\n    const promiseRoster = () =>{\n        return Promise.all([sortRoster()])\n    }\n\n    const sortClicked = (e) => {\n        // history.push('/appjamhome/sortedroster');\n        setIsLoading(!isLoading);\n        promiseRoster()\n        .then(([sorted]) => {\n            // both have loaded!\n            setIsLoading(!isLoading);\n            console.log(\"PROMISE DONE!!!!\",sorted);\n            history.push('/webjamhome/sortedroster');\n        })\n    }\n\n    const addClicked = (e) => {\n        // history.push('/appjamhome/sortedroster');\n        history.push({\n            pathname: \"/manualaddinstructor\",\n            state: {isNewRoster: false, program:\"webjam\"}\n        });\n    }\n\n\n    return (\n        <div>\n            {isLoading?(\n                <div style={loading}>\n                <h3>SORTING.... Please Wait.</h3>\n            </div>\n            ):null}\n\n            <TitleToolbar program=\"webjam\" season={quarter} year={year}  urlPath=\"webjam\"/>\n\n            <div className=\"programPageContainer\">\n\n            <div style={buttonContainer}>\n                <div style={sortBtnContainer}>\n                    <button onClick={addClicked} style={addBtn}>Add Instructor</button>\n                </div>\n                <div style={sortBtnContainer}>\n                    <button onClick={sortClicked} style={sortBtn}>SORT!</button>\n                </div>\n            </div>\n\n\n                            <h1 style={programText}>Webjam</h1>\n\n                            <div style={gridWrapper}>\n                            <div style={gridContainer}>\n                                <div style={titleRow}>Name</div>\n                                <div style={titleRow}>Gender</div>\n                                <div style={titleRow}>Ethnicity</div>\n                                <div style={titleRow}>Languages</div>\n                                <div style={titleRow}>University</div>\n                                <div style={titleRow}>Year</div>\n                                <div style={titleRow}>Region</div>\n                                <div style={titleRow}>Mon</div>\n                                <div style={titleRow}>Tue</div>\n                                <div style={titleRow}>Wed</div>\n                                <div style={titleRow}>Thu</div>\n                                <div style={titleRow}>Fri</div>\n                                <div style={titleRow}>Prev Mentor</div>\n                                <div style={titleRow}>Car</div>\n                                <div style={titleRow}>Multiple Days</div>\n                                <div style={titleRow}>Shirt Size</div>\n                            </div>\n\n\n                                {roster.map((mentor) => (\n                                    <div style={gridEntryContainer} key={mentor.mentorID}>\n                                    <div style={entryRow}>{mentor.name}</div>\n                                    <div style={entryRow}>{mentor.gender}</div>\n                                    <div style={entryRow}>{mentor.ethnicity}</div>\n                                    <div style={entryRow}>{mentor.languages}</div>\n                                    <div style={entryRow}>{mentor.university}</div>\n                                    <div style={entryRow}>{mentor.year}</div>\n                                    <div style={entryRow}>{mentor.region}</div>\n                                    <div style={entryRow}>{mentor.schedule.mon}</div>\n                                    <div style={entryRow}>{mentor.schedule.tue}</div>\n                                    <div style={entryRow}>{mentor.schedule.wed}</div>\n                                    <div style={entryRow}>{mentor.schedule.thu}</div>\n                                    <div style={entryRow}>{mentor.schedule.fri}</div>\n                                    <div style={entryRow}>{mentor.prevMentor}</div>\n                                    <div style={entryRow}>{mentor.car}</div>\n                                    <div style={entryRow}>{mentor.multipleDays}</div>\n                                    <div style={entryRow}>{mentor.shirtSize}</div>\n\n                                    </div>\n                    ))}\n\n                </div>\n            </div>\n\n        </div>\n    )\n}\n\nconst programSchools = {\n    marginTop: \"20px\"\n}\n\n\nconst programText = {\n    color: \"#5B7082\",\n    marginLeft: \"5%\"\n}\n\nconst gridWrapper = {\n    display: \"flex\",\n    flexDirection: \"column\",\n}\n\nconst gridContainer = {\n    display: \"grid\",\n    gridTemplateColumns: \"200px 80px 200px 150px 80px 80px 80px 80px 80px 80px 80px 80px 80px 80px 80px 80px \",\n    gridTemplateRows: \"50px 50px 50px 50px 50px 50px 50px 50px 50px 50px 50px 50px 50px 50px 50px 50px \",\n    justifyContent: \"center\",\n    marginTop: \"10px\",\n    marginLeft: \"30%\"\n\n}\n\nconst gridEntryContainer = {\n    display: \"grid\",\n    gridTemplateColumns: \"200px 80px 200px 150px 80px 80px 80px 80px 80px 80px 80px 80px 80px 80px 80px 80px\",\n    gridTemplateRows: \"50px 50px 50px 50px 50px 50px 50px 50px 50px 50px 50px 50px 50px 50px 50px 50px  \",\n    justifyContent: \"center\",\n    marginTop: \"-750px\",\n    marginLeft: \"30%\"\n\n\n}\n\nconst titleRow = {\n    backgroundColor: \"#5B7082\",\n    color: \"white\",\n    fontSize: \"14px\",\n    textAlign: \"center\",\n    border: \"0.5px solid #D2D5DA\",\n    height: \"50px\",\n    paddingTop: \"15px\",\n    marginLeft: \"-0.5px\"\n}\n\nconst entryRow = {\n    backgroundColor: \"white\",\n    color: \"#202E47\",\n    fontSize: \"12px\",\n    textAlign: \"center\",\n    border: \"0.5px solid #D2D5DA\",\n    height: \"50px\",\n    paddingTop: \"16px\",\n    marginLeft: \"-0.5px\",\n}\n\n\n\nconst buttonContainer = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n}\n\n\nconst firebaseRoster = {\n    display: \"flex\",\n    flexDirection: \"column\",\n\t// justifyContent: \"center\",\n    // alignItems: \"center\",\n    // display: \"grid\",\n    // gridTemplateColumns: \"auto auto auto auto auto auto auto auto auto auto auto auto auto auto auto auto \"\n}\n\nconst mentorContainer = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    // alignItems: \"center\",\n}\n\nconst data = {\n    padding: \"10px\",\n    fontWeight: \"300\",\n    fontSize: \"12px\",\n    border: \"0.5px solid #49479D\",\n    marginRight: \"-1px\",\n    marginTop: \"-1px\",\n}\n\nconst sortBtnContainer = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    // marginLeft: \"50vw\"\n}\n\nconst sortBtn = {\n    fontSize: \"18px\",\n    fontWeight: \"500\",\n    color: \"white\",\n    backgroundColor: \"#49479D\",\n    borderRadius: \"28px\",\n    height: \"46px\",\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    marginLeft: \"10px\",\n    marginBottom: \"20px\",\n    width: \"300px\"\n\n}\n\nconst addBtn = {\n    fontSize: \"18px\",\n    fontWeight: \"500\",\n    color: \"#49479D\",\n    backgroundColor: \"white\",\n    borderRadius: \"28px\",\n    height: \"46px\",\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    marginLeft: \"10px\",\n    marginBottom: \"20px\",\n    width: \"300px\",\n    border: \"1px solid #49479D\"\n}\n\nconst loading = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    position: \"absolute\",\n    width: \"100vw\",\n    height: \"100vh\",\n    backgroundColor: \"rgba(32, 46, 71, 0.7)\",\n    color: \"white\"\n}\n","/app/src/pages/sortingPages/webjam/WebjamSortedRosterPage.js",["348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366"],"import React from 'react'\n\nimport TitleToolbar from '../../.././components/sortingPagesComponents/TitleToolbar';\nimport SortedInstructorsCard from '../../../components/sortingPagesComponents/SortedInstructorsCard';\nimport LockedList from '../../../components/sortingPagesComponents/LockedList'\nimport PendingList from '../../../components/sortingPagesComponents/PendingList'\n\nimport { useHistory } from \"react-router-dom\";\nimport { useState, useEffect, useRef } from 'react';\n\nimport GeneratePDF from '../SaveAsPDF/GeneratePDF';\nimport { PDFDownloadLink } from \"@react-pdf/renderer\";\n\nimport car from '../../.././assets/car.png';\nimport carMentor from '../../.././assets/carMentor.png';\nimport mentor from '../../.././assets/mentor.png';\nimport birb from '../../.././assets/animalIcons/birb.png';\n\nimport fire from '../../.././config/fire';\n\n/* \n    this page shows the sorted roster for webjam\n*/\nexport default function WebjamSortedRosterPage() {\n\n    //User auth \n    const [user, setUser] = useState(null);\n\n    //variable for toggling the modal to ask user if they really want to re-sort\n    const [showResortModal, setShowResortModal] = useState(false)\n\n    //stores the sorted roster taken from the database\n    const [schools, setSchools] = useState([]);    \n\n    //stores the quarter from the database\n    const [quarter, setQuarter] = useState(\"\");\n\n    //stores the year from the database\n    const [year, setYear] = useState(\"\");\n\n    //loading modal when resorting\n    const [isLoading, setIsLoading] = useState(false);\n\n    //History hook for navigation\n    let history = useHistory();\n\n    //checks if user is currently logged in (authenticates user)\n    useEffect(() => {\n        fire.auth().onAuthStateChanged(user => {\n            if (user){\n                setUser(user);\n            }else{\n                history.push('/');\n            }\n            \n          })\n      },[]);\n\n    //accesses firebase for webjam's quarter and year\n    const quarterYearDatabase = useRef(fire.database().ref().child('seasonYear/-M8idEUsNN1M5VcJDv-I/webjam'))\n\n    //accesses firebase for quarter and the year\n    useEffect(() => {\n        quarterYearDatabase.current.once('value', (snap) => {\n            const quarterYear = snap.val();\n            console.log(\"CURRENT QUARTER:\", quarterYear)\n            setQuarter(quarterYear.quarter);\n            setYear(quarterYear.year);\n        });\n    },[]);\n\n      //convers mins into hours and mins in a day \n      // i.e. 900 -> 3:00\n      const convertMins = (mins) => {\n        var num = mins;\n        var finHours = Math.trunc(num/60%12)\n        var hours = (num / 60);\n        var rhours = Math.floor(hours);\n        var minutes = (hours - rhours) * 60;\n        var rminutes = Math.round(minutes);\n        if (rminutes == 0){\n            rminutes=\"00\"\n        }\n        return finHours + \":\" + rminutes;\n    }\n\n    //takes in an array of start and end time and converts it respectfully\n    //i.e [900 - 1020] -> 3:00-5:00\n    const convertTime = (dayTimesArray) => {\n        return convertMins(dayTimesArray[0]) + \"-\" + convertMins(dayTimesArray[1])\n    }\n    \n    // converts schedule from database to a more readable format\n    const convertSchedule = (schedArray) => {\n        // console.log(schedArray)\n        var finalSchedArray = {\n            \"mon\": \"\",\n            \"tue\": \"\",\n            \"wed\": \"\",\n            \"thu\": \"\",\n            \"fri\": \"\"\n        }\n\n        for (var day in schedArray){\n            if (day == 1){\n                finalSchedArray[\"mon\"] = convertTime(schedArray[day][0])\n            }else if (day == 2){\n                finalSchedArray[\"tue\"] = convertTime(schedArray[day][0])\n            }else if (day == 3){\n                finalSchedArray[\"wed\"] = convertTime(schedArray[day][0])\n            }else if (day == 4){\n                finalSchedArray[\"thu\"] = convertTime(schedArray[day][0])\n            }else if (day == 5){\n                finalSchedArray[\"fri\"] = convertTime(schedArray[day][0])\n            }\n        }\n        return finalSchedArray\n    }\n\n    const webjamSortedRosterCollection = useRef(fire.database().ref().child('WebJam/matches'));\n    const firstChild = useRef(fire.database().ref().child('WebJam/matches').limitToFirst(1));\n\n    useEffect(() => {\n        var matchesLen = 0;\n\n        var latestRoster = 0;\n        webjamSortedRosterCollection.current.on('value', (snap) => {\n            matchesLen = snap.numChildren();\n            // console.log(\"NUMBER OF MATCHES\", matchesLen)\n            snap.forEach((doc) =>{\n                console.log(parseInt(doc.key), \"NEW!!!!NEW!!!\")\n                if (latestRoster < doc.key){\n                    latestRoster = doc.key\n                }\n            });\n            console.log(\"LATEST ROSTER:\",latestRoster)\n            \n            if (parseInt(matchesLen) > 10){\n                // console.log(\"ADASDDASDSADSA\", matchesLen)\n                firstChild.current.once('value', (snap) => {\n                    snap.forEach((doc) =>{\n                        console.log(\"OLDEST MATCH\",doc.key);\n                        doc.ref.remove();\n                    });\n                })\n            }\n        });\n\n\n        webjamSortedRosterCollection.current.on('value', (snap) => {     \n            const roster = []      \n            snap.forEach((doc) =>{\n                if (latestRoster === doc.key){\n                    // console.log(\"LATEST ROSTER DOC.KEY:\",doc.key, doc.val())\n                    const schoolArray = doc.val();\n                    for (var school in schoolArray){\n                        // console.log(school)\n                        const mentorInfoArray = []\n                        for (var mentor in schoolArray[school]){\n                            if (schoolArray[school][mentor][\"TeacherName\"] != undefined){\n                                mentorInfoArray.push(\n                                    {\n                                        \"name\":schoolArray[school][mentor][\"TeacherName\"],\n                                        \"firstName\": schoolArray[school][mentor][\"TeacherName\"].split(\" \")[0],\n                                        \"car\": schoolArray[school][mentor][\"Car\"],\n                                        \"ethnicity\": schoolArray[school][mentor][\"Ethnicity\"],\n                                        \"gender\": schoolArray[school][mentor][\"Gender\"],\n                                        \"languages\": schoolArray[school][mentor][\"Languages\"],\n                                        \"multipleDays\": schoolArray[school][mentor][\"MultipleDays\"],\n                                        \"prevMentor\": schoolArray[school][mentor][\"PreviousMentor\"],\n                                        \"shirtSize\": schoolArray[school][mentor][\"ShirtSize\"],\n                                        \"university\": schoolArray[school][mentor][\"University\"],\n                                        \"year\": schoolArray[school][mentor][\"Year\"],\n                                        \"teacherSchedule\": convertSchedule(schoolArray[school][mentor][\"TeacherSchedule\"]),\n                                        \"region\": schoolArray[school][mentor][\"Region\"],\n                                        \"schoolName\": schoolArray[school][mentor][\"SchoolName\"],\n                                        \"schoolSchedule\": convertSchedule(schoolArray[school][mentor][\"Schedule\"]),\n                                        \"isLocked\": schoolArray[school][mentor][\"Locked\"],\n                                    }\n                                )\n                            }\n                            \n                        }\n                        // console.log(\"AJDLSAJDLKSADSA\", school)\n                        if (school === \"Locked\" || school === \"Removed\" || school === \"Available\"){\n                            console.log(\"THIS IS LOCKED, SKIP\", school)\n                        }else{\n                            roster.push({\"school\":school, \"mentors\":mentorInfoArray})\n                        }\n                        \n                    }\n                    // console.log(\"THE NEW ROSTER YES\",roster)\n                }\n            });\n            setSchools(roster)\n        });\n      },[]);\n\n    // console.log(schools)\n\n    const resortRoster = () => {\n        return fetch('https://apurva29.pythonanywhere.com/resort', {\n            method: 'POST', // or 'PUT'\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            body: JSON.stringify({\"Program\":\"WebJam\"}),\n        })\n        .then(response => response.json())\n    }\n\n    const promiseRoster = () =>{\n        return Promise.all([resortRoster()])\n    }\n\n\n    //shows modal if user really wants to re-sort\n    const resortClicked = () => {\n        console.log(\"resort\");\n        setShowResortModal(!showResortModal);\n    }\n\n    //re-sort when clicked yes on the modal\n    const resortYes = () => {\n        console.log(\"YES RESORT!\");\n        setShowResortModal(!showResortModal);\n\n        setIsLoading(!isLoading);\n        promiseRoster()\n        .then(([sorted]) => {\n            // both have loaded!\n            setIsLoading(!isLoading);\n            console.log(\"PROMISE DONE=RESORTED!!!!\",sorted);\n            window.location.reload();\n        })\n\n\n    }\n\n    //don't resort when no is clicked on the modal\n    const resortNo = () => {\n        console.log(\"DONT RESORT!\");\n        setShowResortModal(!showResortModal);\n    }\n\n\n    return (\n        <div>\n\n            {isLoading?(\n                <div style={loading}>\n                <h3>RE-SORTING.... Please Wait.</h3>\n            </div>\n            ):null}\n    \n            <TitleToolbar program=\"Webjam\" season={quarter} year={year} urlPath=\"webjam\"/>\n\n            <div className=\"programPageContainer\">\n\n                <div style={iconGuideWrapper}>\n                    <div style={box}>\n                        <div style={iconGuideContainer}>\n                            <div style={iconGuideNamePair}>\n                                <div style={iconGuideNamePairAnimal}>\n                                    <img src={birb} style={iconGuideIconStyle}/>\n                                    <h6 style={iconGuideTextAnimalStyle}>name</h6>\n                                </div>\n                                <h6 style={iconGuideTextStyle}>previous mentor</h6>\n                            </div>\n\n                            <div style={iconGuideNamePair}>\n                                <img src={car} style={iconGuideIconStyle}/>\n                                <h6 style={iconGuideTextStyle}>has a car</h6>\n                            </div>\n\n                            <div style={iconGuideNamePair}>\n                                <img src={mentor} style={iconGuideIconStyle} />\n                                <h6 style={iconGuideTextStyle}>previous mentor</h6>\n                            </div>\n\n                            <div style={iconGuideNamePair}>\n                                <img src={carMentor} style={iconGuideIconStyle} />\n                                <h6 style={iconGuideTextStyle}>has a car AND previous mentor</h6>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div style={saveResort}>\n                        <button onClick={resortClicked} style={resortBtn}>Re-sort!</button>\n                        {showResortModal?(\n                            <div style={modalContainer}>\n                                <div style={modal}>\n                                    <h3>Are you sure you want to re-sort?</h3>\n                                    <div style={modalOptions}>\n                                        <button onClick={resortNo} style={noBtn}>NO</button>\n                                        <button onClick={resortYes} style={yesBtn}>Yes</button>\n                                    </div>\n                                </div>\n                            </div>\n                        ):null}\n                        {/* <button onClick={save} style={saveBtn}>SAVE!</button> */}\n\n                        <PDFDownloadLink\n                            document = {<GeneratePDF sortedRoster={schools}/>}\n                            fileName=\"sortedRoster.pdf\"\n                            style={saveBtn}\n                        >\n                            Save as PDF!\n                        </PDFDownloadLink>\n\n                    </div>\n                </div>\n                \n                <div className=\"sortedInstructorCardsWrapper\">\n                    <div style={pendingLockedContainer}>\n                        <PendingList program=\"WebJam\"/>\n                        <LockedList program=\"WebJam\"/>\n                    </div>\n\n                    <div className=\"instructorCardsContainer\">\n                        {schools.map((schoolMentors,i) => (\n                            <SortedInstructorsCard program=\"WebJam\" instructors={schoolMentors} SbgColor=\"#7FC9FF\" SborderColor=\"#0099FF\" key={schoolMentors.school}/>\n                        ))}\n                    </div>\n                </div>\n            </div> \n\n\n\n        </div>\n    )\n}\n\nconst pendingLockedContainer = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    // alignItems: \"center\",\n    flexWrap: \"wrap\",\n    marginTop: \"-10px\"\n}\n\nconst pendingLockedBox = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    // justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"300px\",\n    minHeight: \"50px\",\n    maxHeight: \"500px\",\n    backgroundColor: \"white\",\n    marginLeft: \"10px\",\n    borderRadius: \"12px\",\n    border: \"1px solid #A4A3CE\",\n    marginTop: \"10px\"\n}\n\nconst pendingLockedTitle = {\n    fontSize: \"14px\",\n    fontWeight: \"500\",\n    padding: \"5px\",\n    backgroundColor: \"#A4A3CE\",\n    width: \"100%\",\n    textAlign: \"center\",\n    color: \"white\",\n    borderRadius: \"10px\"\n}\n\nconst pendingLockedNameContainer = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    margin: \"10px\"\n}\n\nconst pendingLockedName = {\n    fontWeight: \"400\",\n    fontSize: \"12px\",\n    // margin: \"1px\",\n    padding: \"1px\",\n    color: \"#202E47\",\n    // backgroundColor: \"#A4A3CE\",\n    width: \"300px\",\n    textAlign: \"center\"\n}\n\nconst modalContainer = {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    position: \"fixed\",\n    width: \"100vw\",\n    height: \"100vh\",\n    backgroundColor: \"rgb(0, 0, 0, 0.5)\",\n    bottom: 0,\n    right: 0,\n    \n}\n\nconst modal = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    // justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"25vw\",\n    height: \"20vh\",\n    backgroundColor: \"white\",\n    borderRadius: \"10px\",\n    padding: \"45px\"\n}\n\nconst modalOptions = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: \"25px\"\n}\n\nconst saveResort = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginLeft: \"20px\"\n}\n\nconst saveBtn = {\n    fontSize: \"14px\",\n    color: \"white\",\n    backgroundColor: \"#49479D\",\n    borderRadius: \"28px\",\n    height: \"46px\",\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    paddingTop: \"15px\",\n    // padding: \"10px\",\n    marginLeft: \"10px\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n\n}\n\nconst resortBtn = {\n    fontSize: \"14px\",\n    color: \"#49479D\",\n    backgroundColor: \"white\",\n    border: \"0.5px solid #49479D\",\n    borderRadius: \"28px\",\n    height: \"46px\",\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n\n}\n\nconst yesBtn = {\n    fontSize: \"14px\",\n    color: \"#49479D\",\n    backgroundColor: \"white\",\n    border: \"0.5px solid #49479D\",\n    borderRadius: \"28px\",\n    height: \"46px\",\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"5vw\",\n    marginLeft: \"5vw\"\n\n}\n\nconst noBtn = {\n    fontSize: \"14px\",\n    color: \"white\",\n    backgroundColor: \"#49479D\",\n    // border: \"0.5px solid #49479D\",\n    borderRadius: \"28px\",\n    height: \"46px\",\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    width: \"5vw\",\n}\n\nconst iconGuideWrapper = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    // marginTop: \"5%\",\n    marginBottom: \"2%\"\n}\n\nconst box = {\n    width: \"670px\",\n    height: \"70px\",\n    backgroundColor: \"#D2D5DA\",\n    borderRadius: \"10px\"\n}\n\nconst iconGuideContainer = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: \"7px\"\n}\n\nconst iconGuideNamePairAnimal = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n}\n\nconst iconGuideTextAnimalStyle = {\n    fontSize: \"12px\",\n    fontWeight: \"400\",\n    marginLeft: \"3px\",\n    color: \"#202E47\",\n}\n\nconst iconGuideNamePair = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginleft: \"15px\",\n    marginRight: \"15px\"\n}\n\nconst iconGuideIconStyle = {\n    width: \"35px\",\n}\n\nconst iconGuideTextStyle = {\n    fontSize: \"12px\",\n    fontWeight: \"400\",\n    marginLeft: \"3px\",\n    color: \"#202E47\",\n    color: \"#49479D\"\n}\n\nconst loading = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    position: \"absolute\",\n    width: \"100vw\",\n    height: \"100vh\",\n    backgroundColor: \"rgba(32, 46, 71, 0.7)\",\n    color: \"white\"\n}","/app/src/pages/sortingPages/webjam/WebjamAddRosterForm.js",["367","368"],"import React from 'react'\n\nimport { useHistory } from \"react-router-dom\";\nimport { useState, useEffect, useRef } from 'react';\nimport person from '../../.././assets/person.svg'\n\nimport fire from '../../.././config/fire';\n\n/* \n    form that asks whether the user wants to upload instructors manually or through a file\n*/\nexport default function WebjamAddRosterForm() {\n\n    //auth variable\n    const [user, setUser] = useState(null);\n\n    //variable for capturing whether quarter/season for the program\n    const [quarter, setQuarter] = useState(\"\");\n\n    //variable for capturing whether year for the program\n    const [year, setYear] = useState(\"\");\n\n    //variable for capturing whether the user chooses\n    //manual upload of file upload\n    const [input, setInput] = useState(\"\");\n\n    //navigation variable to naviagate to other pages\n    let history = useHistory();\n\n    //checks if user is currently logged in\n    useEffect(() => {\n        fire.auth().onAuthStateChanged(user => {\n            if (user){\n                setUser(user);\n            }else{\n                history.push('/');\n            }\n            \n          })\n      });\n\n    //handles the state change everytime the user toggles \n    //between manual vs file upload\n    const onChangeRadio = (e) => {\n        setInput(e.target.value);\n        console.log(e.target.value);\n\n    }\n\n    //handles the state change everytime the user changes quarter\n    const onChangeQuarter = (e) => {\n        setQuarter(e.target.value);\n        console.log(e.target.value);\n\n    }\n\n    //handles the state change everytime the user changes year\n    const onChangeYear = (e) => {\n        setYear(e.target.value);\n        console.log(e.target.value);\n\n    }\n\n    //accesses firebase for appjam quarter and year\n    const quarterYearDatabase = useRef(fire.database().ref().child('seasonYear/-M8idEUsNN1M5VcJDv-I/webjam'));\n\n    //validates user inputs\n    const nextClicked = () => {\n        console.log(\"submit\");\n        \n        if (quarter === \"\" || year === \"\" || input === \"\"){\n            alert(\"Please select an option for ALL the fields\")\n        }\n\n        if (input === \"file\"){\n            history.push('/webjamhome/uploadroster');\n            quarterYearDatabase.current.once('value', (snap) => {\n                snap.ref.set({\n                    quarter: quarter,\n                    year: year\n                });\n            });\n        }else if (input === \"manual\"){\n            alert('manual chosen (not yet implemented)');\n            quarterYearDatabase.current.once('value', (snap) => {\n                snap.ref.set({\n                    quarter: quarter,\n                    year: year\n                });\n            });\n        } \n\n    }\n\n\n    return (\n        <div style={mainContainer}>\n\n            <div style={leftHalf}>\n\n                <div style={formContainer}>\n\n                    <h3 style={textStyle}>New webjam Roster</h3>\n                    \n                    <form onSubmit={nextClicked} style = {formStyle}>\n                        \n                        <div style={dropdowns}>\n\n                            <select name=\"quarter\" style={dropdownStyle} value={quarter} onChange={onChangeQuarter}>\n                                <option value=\"\" disabled selected>Choose Season...</option>\n                                <option value=\"Fall\">Fall</option>\n                                <option value=\"Winter\">Winter</option>\n                                <option value=\"Spring\">Spring</option>\n                                <option value=\"Summer\">Summer</option>\n                            </select>\n\n                            <select name=\"year\" style={dropdownStyle} value={year} onChange={onChangeYear}>\n                                <option value=\"\" disabled selected>Choose Year...</option>\n                                <option value=\"2015\">2015</option>\n                                <option value=\"2016\">2016</option>\n                                <option value=\"2017\">2017</option>\n                                <option value=\"2018\">2018</option>\n                                <option value=\"2019\">2019</option>\n                                <option value=\"2020\">2020</option>\n                                <option value=\"2021\">2021</option>\n                                <option value=\"2022\">2022</option>\n                                <option value=\"2023\">2023</option>\n                                <option value=\"2024\">2024</option>\n                                <option value=\"2025\">2025</option>\n                                <option value=\"2026\">2026</option>\n                                <option value=\"2027\">2027</option>\n                                <option value=\"2028\">2028</option>\n                                <option value=\"2029\">2029</option>\n                                <option value=\"2030\">2030</option>\n                                <option value=\"2031\">2031</option>\n                                <option value=\"2032\">2032</option>\n                                <option value=\"2033\">2033</option>\n                                <option value=\"2034\">2034</option>\n                                <option value=\"2035\">2035</option>\n                            </select>\n                        </div>\n\n                        <div style={radioButtonsContainer}>\n                       \n                            <h3 style={radiotitleText}>How do you want to add your roster?</h3>\n\n                            <div onChange={onChangeRadio}>\n\n                                {/* THIS IS A MANUAL INPUT OPTION \n                                we had planned on adding manual input to add a new roster but the way\n                                the code is implemented right, it's a little complicated and\n                                we kind of ran out of time but it's something that the future team \n                                should consider*/}\n\n                                {/* <div style={radioItem}>\n                                    <input type=\"radio\" value=\"manual\" name=\"input\"/> <p style={radioChoice}>Manual Input</p>\n                                </div> */}\n\n                                <div style={radioItem}>\n                                    <input type=\"radio\" value=\"file\" name=\"input\"/> <p style={radioChoice} >File Upload</p>\n                                </div>\n                                \n                            </div>\n\n                        </div>\n\n\n\n                        <input \n                            type = 'submit'\n                            value = 'Next'\n                            className = 'button'\n                            style= {nextBtn}\n                        />\n                    </form>\n\n                </div>\n\n            </div>\n\n            <div style={rightHalf}>\n                <img style={personIcon} src={person} alt=\"person icon\"/>\n                <div style={square}></div>\n            </div>\n\n            \n\n\n        </div>\n    )\n}\n\nconst mainContainer = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n\n}\n\nconst leftHalf = {\n    height: \"100vh\",\n    width: \"50vw\",\n    // backgroundColor: \"lightblue\"\n}\n\nconst rightHalf = {\n    height: \"100vh\",\n    width: \"50vw\",\n    backgroundColor: \"white\"\n}\n\nconst formContainer = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: \"20%\"\n}\n\nconst formStyle = {\n    display: \"flex\",\n    flexDirection: 'column',\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"60%\",\n    marginTop: \"30px\"\n}\n\nconst dropdowns = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n}\n\nconst textStyle = {\n    fontSize: \"48px\",\n    fontWeight: \"400\",\n    color: \"#202E47\",\n    // marginLeft: \"auto\"\n}\n\nconst radioButtonsContainer = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"left\",\n    marginTop: \"30px\"\n}\n\nconst radiotitleText = {\n    fontSize: \"18px\",\n    fontWeight: \"400\",\n    color: \"#202E47\"\n}\n\nconst radioItem = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"left\",\n    alignItems: \"center\",\n    marginTop: \"20px\"\n}\n\nconst radioChoice = {\n    fontSize: \"16px\",\n    fontWeight: \"400\",\n    color: \"#5B7082\",\n    marginLeft: \"10px\"\n}\n\nconst radioStyle = {\n    backgroundColor: \"#49479D\",\n    color: \"#49479D\"\n}\n\nconst dropdownStyle = {\n    width: \"214px\",\n    height: \"66px\",\n    marginLeft: \"5px\",\n    marginRight: \"5px\",\n    fontSize: \"18px\",\n    border: \"0px solid\",\n    boxShadow: \"1px 1px 10px #E6E6E8\"\n}\n\nconst square = {\n    width: \"50%\",\n    height: \"100vh\",\n    backgroundColor: \"#49479D\",\n    marginLeft: \"auto\"\n}\n\nconst personIcon = {\n    position: \"absolute\",\n    height: \"300px\",\n    width: \"300px\",\n    right: \"17%\",\n    top: \"68%\"\n}\n\nconst nextBtn = {\n    width: \"105px\",\n    height: \"45px\",\n    backgroundColor: \"#49479D\",\n    fontSize: \"18px\",\n    color: \"white\",\n    border: \"0px solid\",\n    marginTop: \"50px\",\n    marginLeft: \"auto\",\n    marginRight: \"15%\",\n    borderRadius: \"3px\"\n\n}","/app/src/pages/sortingPages/webjam/WebjamUploadInstitution.js",["369","370"],"import React, {Component} from 'react';\nimport Dropzone from 'react-dropzone';\nimport csv from 'csv';\n\n// For now nothing is routed to the program upload institution pages. There's just one upload institution page from the school home page. This could be implemented if you see it being useful.\n\n// Page for Appjam program for uploading a csv file institution roster\nclass WebjamUploadInstitutionsPage extends Component {\n\n    // Splits the strings that are read from csv file and returns array with first and third token. Used mainly for the schedule (Monday: 10:00-12:00 returns [10:00, 12:00]\n    splitString = (string) => {\n        if (string == \"\") {\n            return \"\";\n        }\n        else {\n            var tokens = string.split(\" \");\n            return [tokens[0], tokens[2]];\n        }\n    }\n\n    // Given a program(Appjam, Webjam, Sphero), checks to see if a school for that program has already been uploaded to the database. We do this since we need to change the \"New\" boolean JSON value for the API to operate properly.\n    checkNew = (program, programList) => {\n        if (programList.includes(program)) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n\n    // Handles looping through the csv file for the data entries and calling the API to upload to the database\n    onDrop(files) {\n        this.setState({ files });\n\n        var file = files[0];\n\n        const reader = new FileReader();\n        reader.onload = () => {\n            csv.parse(reader.result, (err, data) => {\n\n                var programList = [];\n                \n                const firstInstitution = {\"Name\": data[1][0], \"Address\": data[1][1], \"Program\": [data[1][3]], \"County\": data[1][2], \"Instructors\": parseInt(data[1][4]),\n                                            \"Monday\": this.splitString(data[1][5]), \"Tuesday\": this.splitString(data[1][6]), \"Wednesday\": this.splitString(data[1][7]),\n                                            \"Thursday\": this.splitString(data[1][8]), \"Friday\": this.splitString(data[1][9]), \"New\": true};\n\n                programList.push(data[1][3]);\n\n                fetch('http://apurva29.pythonanywhere.com/uploadinstitutions', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify(firstInstitution)\n                })\n\n                for (var i = 2; i < data.length; i++) {\n                    const name = data[i][0];\n                    const address = data[i][1];\n                    const county = data[i][2];\n                    const program = data[i][3];\n                    const instructors = data[i][4];\n                    const monday = data[i][5];\n                    const tuesday = data[i][6];\n                    const wednesday = data[i][7];\n                    const thursday = data[i][8];\n                    const friday = data[i][9];\n                    \n                    const newInstitution = {\"Name\": name, \"Address\": address, \"Program\": [program], \"County\" : county, \"Instructors\": parseInt(instructors), \"Monday\": this.splitString(monday),\n                                            \"Tuesday\": this.splitString(tuesday), \"Wednesday\": this.splitString(wednesday), \"Thursday\": this.splitString(thursday), \"Friday\": this.splitString(friday), \"New\": this.checkNew(program, programList)};\n\n                    fetch('http://apurva29.pythonanywhere.com/uploadinstitutions', {\n                        method: 'POST',\n                        headers: {\n                        'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify(newInstitution)\n                    })\n\n                    if (programList.includes(program) == false) {\n                        programList.push(program);\n                    }\n                };\n            });\n        };\n\n        reader.readAsBinaryString(file);\n    }\n\n    render() {\n        const fontSize = \"18px\";\n\n        return (\n            <div style={mainContainerStyle} align = \"center\" oncontextmenu=\"return false\">\n                <br /><br /><br />\n                <div style={dropZoneStyle} className = \"dropzone\">\n                    <h2 style={h2Style}>Please upload your <font size={fontSize} color=\"#0099FF\">CSV </font>institution roster...</h2>\n                    <Dropzone accept=\".csv\" onDropAccepted={this.onDrop.bind(this)} style={dropBoxStyle}>upload new..</Dropzone>\n                    <br /><br /><br />\n                    <button style={nextButtonStyle}>Next</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mainContainerStyle = {\n    width: \"100vw\",\n    height: \"100vh\",\n    backgroundColor: \"#D2D5DA\",\n}\n\nconst dropZoneStyle = {\n    position: \"relative\",\n    backgroundColor: \"white\",\n    borderRadius: '29px',\n    display: \"inline-block\",\n    boxShadow: '0 4px 4px rgba(0,0,0,0.25)',\n    top: \"25%\",\n    width: \"30%\"\n}\n\nconst dropBoxStyle = {\n    width: \"40%\",\n    borderStyle: \"solid\",\n    borderWidth: \"1px\",\n    borderRadius: \"4px\",\n    borderColor: \"#9097A3\",\n    fontFamily: \"Rubik\",\n    color: \"#5B7082\",\n    cursor: \"pointer\",\n    marginTop: \"40px\",\n    paddingTop: \"8px\",\n    paddingBottom: \"8px\"\n}\n\nconst h2Style = {\n    fontFamily: \"Rubik\",\n    fontWeight: \"normal\",\n    fontStyle: \"normal\",\n    fontSize: \"18px\",\n    lineHeight: \"21px\",\n    paddingTop: \"50px\"\n}\n\nconst nextButtonStyle = {\n    backgroundColor: \"#0099FF\",\n    border: \"none\",\n    color: \"white\",\n    fontFamily: \"Rubik\",\n    fontSize: \"1vw\",\n    paddingLeft: \"50px\",\n    paddingRight: \"50px\",\n    paddingTop: \"10px\",\n    paddingBottom: \"10px\",\n    position: \"relative\",\n    left: \"120px\",\n    bottom: \"10px\",\n    borderRadius: \"3px\",\n    marginBottom: \"45px\",\n    cursor: \"pointer\"\n}\n\nexport default WebjamUploadInstitutionsPage;","/app/src/components/schoolPagesComponents/ProgramSchoolRosterTable.js",["371","372","373","374","375","376","377","378"],"import React from 'react'\n\nimport { useHistory } from \"react-router-dom\";\nimport { useState, useEffect, useRef } from 'react';\n\nimport fire from '../../config/fire';\n\n/*\n    table component that displays school rosters,\n    given a specific program\n*/\nexport default function ProgramSchoolRosterTable({program, databaseName}) {\n\n    //auth variable\n    const [user, setUser] = useState(null);\n\n    //for navigation\n    let history = useHistory();\n\n    //checks if user is currently logged in\n    useEffect(() => {\n        fire.auth().onAuthStateChanged(user => {\n            if (user){\n                setUser(user);\n            }else{\n                history.push('/');\n            }\n            \n          })\n      });\n\n      //convers mins into hours and mins in a day \n      // i.e. 900 -> 3:00\n      const convertMins = (mins) => {\n        var num = mins;\n        var finHours = Math.trunc(num/60%12)\n        var hours = (num / 60);\n        var rhours = Math.floor(hours);\n        var minutes = (hours - rhours) * 60;\n        var rminutes = Math.round(minutes);\n        if (rminutes == 0){\n            rminutes=\"00\"\n        }\n        return finHours + \":\" + rminutes;\n    }\n\n    //takes in an array of start and end time and converts it respectfully\n    //i.e [900 - 1020] -> 3:00-5:00\n    const convertTime = (dayTimesArray) => {\n        return convertMins(dayTimesArray[0]) + \"-\" + convertMins(dayTimesArray[1])\n    }\n    \n    // converts schedule from database to a more readable format\n    // resulting format looks like this: {mon:\"3:00-5:00\", tue:\"\", wed:\"3:00-5:00\", Tthu:\"3:00-5:00\", fri:\"\"}\n    const convertSchedule = (schedArray) => {\n        var finalSchedArray = {\n            \"mon\": \"\",\n            \"tue\": \"\",\n            \"wed\": \"\",\n            \"thu\": \"\",\n            \"fri\": \"\"\n        }\n\n        for (var day in schedArray){\n            if (day == 1){\n                finalSchedArray[\"mon\"] = convertTime(schedArray[day][0])\n            }else if (day == 2){\n                finalSchedArray[\"tue\"] = convertTime(schedArray[day][0])\n            }else if (day == 3){\n                finalSchedArray[\"wed\"] = convertTime(schedArray[day][0])\n            }else if (day == 4){\n                finalSchedArray[\"thu\"] = convertTime(schedArray[day][0])\n            }else if (day == 5){\n                finalSchedArray[\"fri\"] = convertTime(schedArray[day][0])\n            }\n        }\n        return finalSchedArray\n    }\n\n    // variable to store roster from the database \n    const [roster, setRoster] = useState([])\n\n    // database reference of {program} roster\n    const programRosterCollection = useRef(fire.database().ref().child(databaseName+'/institutions'));\n\n    //accesses the database and store the roster respectively\n    useEffect(() => {\n        //finds the latest roster in the database\n        var latestRoster = 0;\n        programRosterCollection.current.on('value', (snap) => {\n            snap.forEach((doc) =>{\n                if (latestRoster < doc.key){\n                    latestRoster = doc.key\n                }\n            });\n            console.log(\"LATEST ROSTER:\",latestRoster)\n        });\n\n\n        programRosterCollection.current.once('value', (snap) => {     \n            const rosterFire = []      \n            snap.forEach((doc) =>{\n                if (latestRoster === doc.key){\n                    const schoolArray = doc.val();\n                    for (var school in schoolArray){\n                        const schoolID = school;\n                        const schoolList = schoolArray[school];\n                        rosterFire.push(\n                            {\n                                \"mentorID\": schoolID,\n                                \"address\": schoolList[\"Address\"],\n                                \"county\": schoolList[\"County\"],\n                                \"instructors\": schoolList[\"Instructors\"],\n                                \"name\": schoolList[\"Name\"],\n                                \"schedule\": convertSchedule(schoolList[\"Schedule\"]),\n                            }\n                        )\n                        \n                    }\n                }\n            });\n            setRoster(rosterFire)\n        });\n\n      },[]);\n\n\n    return (\n        <div style={programSchools}>\n            <h1 style={schoolText}>{program} Schools</h1>\n            <div style={gridWrapper}>\n                <div style={gridContainer}>\n                    <div style={titleRow}>Name</div>\n                    <div style={titleRow}>Address</div>\n                    <div style={titleRow}>County</div>\n                    <div style={titleRow}># of Instructors</div>\n                    <div style={titleRow}>Mon</div>\n                    <div style={titleRow}>Tue</div>\n                    <div style={titleRow}>Wed</div>\n                    <div style={titleRow}>Thu</div>\n                    <div style={titleRow}>Fri</div>\n                </div>\n\n\n                {roster.map((school,i) => (\n                    <div style={gridEntryContainer} key={school.name}>\n                        <div style={entryRow}>{school.name}</div>\n                        <div style={entryRow}>{school.address}</div>\n                        <div style={entryRow}>{school.county}</div>\n                        <div style={entryRow}>{school.instructors}</div>\n                        <div style={entryRow}>{school.schedule.mon}</div>\n                        <div style={entryRow}>{school.schedule.tue}</div>\n                        <div style={entryRow}>{school.schedule.wed}</div>\n                        <div style={entryRow}>{school.schedule.thu}</div>\n                        <div style={entryRow}>{school.schedule.fri}</div>\n                    </div>\n                ))}\n            </div>\n        </div>\n    )\n}\n\nconst programSchools = {\n    marginTop: \"20px\"\n}\n\nconst schoolText = {\n    color: \"#5B7082\",\n    marginLeft: \"10%\"\n}\n\nconst gridWrapper = {\n    display: \"flex\",\n    flexDirection: \"column\",\n}\n\nconst gridContainer = {\n    display: \"grid\",\n    gridTemplateColumns: \"200px 300px 200px 150px 80px 80px 80px 80px 80px \",\n    gridTemplateRows: \"50px 50px 50px 50px 50px 50px 50px 50px 50px \",\n    justifyContent: \"center\",\n    marginTop: \"10px\"\n\n}\n\nconst gridEntryContainer = {\n    display: \"grid\",\n    gridTemplateColumns: \"200px 300px 200px 150px 80px 80px 80px 80px 80px \",\n    gridTemplateRows: \"50px 50px 50px 50px 50px 50px 50px 50px 50px \",\n    justifyContent: \"center\",\n    marginTop: \"-405px\"\n\n}\n\nconst titleRow = {\n    backgroundColor: \"#5B7082\",\n    color: \"white\",\n    fontSize: \"14px\",\n    textAlign: \"center\",\n    border: \"0.5px solid #D2D5DA\",\n    height: \"50px\",\n    paddingTop: \"15px\",\n    marginLeft: \"-0.5px\"\n}\n\nconst entryRow = {\n    backgroundColor: \"white\",\n    color: \"#202E47\",\n    fontSize: \"12px\",\n    textAlign: \"center\",\n    border: \"0.5px solid #D2D5DA\",\n    height: \"50px\",\n    paddingTop: \"16px\",\n    marginLeft: \"-0.5px\",\n}","/app/src/components/sortingPagesComponents/SortingPagesNavbar.js",["379","380"],"import React from 'react'\n\nimport {Link,useHistory, useLocation} from 'react-router-dom';\nimport fire from '../.././config/fire';\nimport { useState, useEffect } from 'react';\n\n\n/*\n    This component serves as the navbar when a user\n    goes to a program's home page and check the existing roster\n*/\nexport default function SortingPagesNavbar({urlPath}) {\n\n    //auth variable\n    const [user, setUser] = useState(null);\n\n    //variable for toggling the roster option's style when hovered over\n    const [rosterLinkStyle, setRosterLinkStyle] = useState({\n        paddingLeft: \"50px\",\n        paddingRight: \"50px\",\n        height: \"4vh\",\n        display: \"flex\",\n        justifyContent: \"space-around\",\n        alignTtems: \"center\",\n    })\n\n     //variable for toggling the sorted roster option's style when hovered over\n    const [sortedRosterLinkStyle, setSortedRosterLinkStyle] = useState({\n        paddingLeft: \"50px\",\n        paddingRight: \"50px\",\n        height: \"4vh\",\n        display: \"flex\",\n        justifyContent: \"space-around\",\n        alignTtems: \"center\",\n    })\n\n     //variable for toggling the shirt summary option's style when hovered over\n    const [shirtLinkStyle, setShirtLinkStyle] = useState({\n        paddingLeft: \"50px\",\n        paddingRight: \"50px\",\n        height: \"4vh\",\n        display: \"flex\",\n        justifyContent: \"space-around\",\n        alignTtems: \"center\",\n    })\n\n    console.log(urlPath)\n\n    //navigation variable to naviagate to other pages\n    let history = useHistory();\n\n    //variable to find out the page's current url path\n    let location = useLocation();\n    \n    //checks if the user is logged in\n    //also checks if the user is either currently on the\n    //roster, sortedroster or shirt page and highlights \n    //the corresponding tab in the nav bar\n    useEffect(() => {\n        fire.auth().onAuthStateChanged(user => {\n            if (user){\n                setUser(user);\n            }else{\n                history.push('/');\n            }\n          });\n\n          console.log(location.pathname)\n          if (location.pathname === \"/\"+urlPath+\"home/sortedroster\"){\n            setSortedRosterLinkStyle({\n                backgroundColor: \"#9097A3\",\n                color: \"white\", \n            });\n        }else if (location.pathname === \"/\"+urlPath+\"home/roster\"){\n            setRosterLinkStyle({\n                backgroundColor: \"#9097A3\",\n                color: \"white\", \n            });\n        }else if(location.pathname === \"/\"+urlPath+\"home/shirtsummary\"){\n            setShirtLinkStyle({\n                backgroundColor: \"#9097A3\",\n                color: \"white\", \n            });\n        }\n      }, [location.pathname, history]);\n\n    //changes roster tab color when hovered over\n    const rosterEnter = () => {\n        if (!(location.pathname === \"/\"+urlPath+\"home/roster\")){\n            setRosterLinkStyle({\n                backgroundColor: \"#D2D5DA\",\n                color: \"white\",\n            })\n        }\n        \n    }\n    //changes roster tab color back to white when mouse is not hovering over it\n    const rosterLeave = () => {\n        if (!(location.pathname === \"/\"+urlPath+\"home/roster\")){\n            setRosterLinkStyle({\n                backgroundColor: \"white\",\n                color: \"#5B7082\",\n            })\n        }\n    }\n\n    //changes sorted roster tab color when hovered over\n    const SortedRosterEnter = () => {\n        if (!(location.pathname === \"/\"+urlPath+\"home/sortedroster\")){\n            setSortedRosterLinkStyle({\n                backgroundColor: \"#D2D5DA\",\n                color: \"white\",\n            })\n        }\n    }\n\n    //changes sorted roster tab color back to white when mouse is not hovering over it\n    const SortedRosterLeave = () => {\n        if (!(location.pathname === \"/\"+urlPath+\"home/sortedroster\")){\n            setSortedRosterLinkStyle({\n                backgroundColor: \"white\",\n                color: \"#5B7082\",\n            })\n        }\n    }\n\n    //changes shirt tab color when hovered over\n    const shirtEnter = () => {\n        if (!(location.pathname === \"/\"+urlPath+\"home/shirtsummary\")){\n            setShirtLinkStyle({\n                backgroundColor: \"#D2D5DA\",\n                color: \"white\",\n            })\n        }\n    }\n\n    //changes shirt tab color back to white when mouse is not hovering over it\n    const shirtLeave = () => {\n        if (!(location.pathname === \"/\"+urlPath+\"home/shirtsummary\")){\n            setShirtLinkStyle({\n                backgroundColor: \"white\",\n                color: \"#5B7082\",\n            })\n        }\n    }\n\n    return (\n        <div className=\"sortingPagesNavbarWrapper\">\n            <nav className=\"sortingPagesNavbar\">\n                <ul className=\"sortingPagesNavbarLinks\">\n                    <Link to={\"/\"+urlPath+\"home/roster\"}>\n                        <li onMouseEnter={rosterEnter} onMouseLeave={rosterLeave} style={rosterLinkStyle} className=\"sortedRosterNavLink\" >roster</li>\n                    </Link>\n\n                    <Link to={\"/\"+urlPath+\"home/sortedroster\"}>\n                        <li onMouseEnter={SortedRosterEnter} onMouseLeave={SortedRosterLeave} style={sortedRosterLinkStyle} className=\"sortedRosterNavLink\">sorted roster</li>\n                    </Link>\n\n                    <Link to={\"/\"+urlPath+\"home/shirtsummary\"}>\n                        <li onMouseEnter={shirtEnter} onMouseLeave={shirtLeave} style={shirtLinkStyle} className=\"sortedRosterNavLink\">shirt sizes</li>\n                    </Link>\n                </ul>\n            </nav>\n            \n        </div>\n    )\n\n}","/app/src/components/sortingPagesComponents/TitleToolbar.js",["381","382","383","384"],"import React from 'react'\n\nimport SideNavBar from '.././sidebar/SideNavBar';\nimport SortingPagesNavbar from './SortingPagesNavbar'\nimport { useHistory } from \"react-router-dom\";\nimport { useState, useEffect } from 'react';\n\nimport fire from '../.././config/fire';\n\n/*\n    This Component includes the SideNavBar component, \n    the title header and the SortingPagesNavbar component\n */\n\nexport default function TitleToolbar(props) {\n\n    //auth variable\n    const [user, setUser] = useState(null);\n\n    //navigation variable to naviagate to other pages\n    let history = useHistory();\n\n    //checks if user is currently logged in\n    useEffect(() => {\n        fire.auth().onAuthStateChanged(user => {\n            if (user){\n                setUser(user);\n            }else{\n                history.push('/');\n            }\n            \n          })\n      });\n\n    return (\n        <div>\n            <SideNavBar />\n\n            <div className=\"sortingPagesContainer\">\n                <div style={titleBtn}>\n                    <h1 className=\"sortedPagePageTitle\">{props.program} {props.season} {props.year}</h1>\n\n                    {/* we had planned on having the new roster button here \n                    and also a button for updating the roster\n                    i.e. reuploading but we kinda changed it and put\n                    it in the homeages. We left these here just in case \n                    you guys change your mind and think that this is better */}\n\n                    {/* <div style={rosterbuttons}>\n                        <button style={uddateRosterBtn}>update roster</button>\n                        <button style={newRosterBtn}>new roster</button>\n                    </div> */}\n                </div>\n\n                <SortingPagesNavbar urlPath={props.urlPath}/>\n\n            </div>\n\n        </div>\n    )\n}\n\nconst titleBtn = {\n    display: \"flex\",\n    flexDirection: \"row\",\n\n}\n\nconst rosterbuttons = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    marginLeft: \"40%\",\n    justifyContent: \"center\",\n\talignItems: \"center\",\n}\n\nconst uddateRosterBtn = {\n    fontSize: \"14px\",\n    color: \"white\",\n    backgroundColor: \"#202E47\",\n    borderRadius: \"28px\",\n    height: \"46px\",\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n\n}\n\nconst newRosterBtn = {\n    fontSize: \"14px\",\n    color: \"#202E47\",\n    backgroundColor: \"white\",\n    border: \"0.5px solid #202E47\",\n    borderRadius: \"28px\",\n    height: \"46px\",\n    paddingLeft: \"15px\",\n    paddingRight: \"15px\",\n    marginLeft: \"10px\"\n\n}","/app/src/components/sidebar/SideNavBar.js",[],"/app/src/components/sortingPagesComponents/SortedInstructorsCard.js",["385","386","387","388","389","390","391"],"import React from 'react'\n\nimport { useHistory } from \"react-router-dom\";\nimport { useState, useEffect } from 'react';\nimport DropdownInstructorInfo from './DropdownInstructorInfo';\nimport HoveredInstructorInfo from './HoveredInstructorInfo'\n\nimport birb from '../.././assets/animalIcons/birb.png';\nimport bull from '../.././assets/animalIcons/bull.png';\nimport crab from '../.././assets/animalIcons/crab.png';\nimport fish from '../.././assets/animalIcons/fish.png';\nimport fish1 from '../.././assets/animalIcons/fish1.png';\nimport fish2 from '../.././assets/animalIcons/fish2.png';\nimport fox from '../.././assets/animalIcons/fox.png';\nimport hedgehog from '../.././assets/animalIcons/hedgehog.png';\nimport hippopotamus from '../.././assets/animalIcons/hippopotamus.png';\nimport koala from '../.././assets/animalIcons/koala.png';\nimport lemur from '../.././assets/animalIcons/lemur.png';\nimport moray from '../.././assets/animalIcons/moray.png';\nimport octopus from '../.././assets/animalIcons/octopus.png';\nimport pig from '../.././assets/animalIcons/pig.png';\nimport prawn from '../.././assets/animalIcons/prawn.png';\nimport seaweed from '../.././assets/animalIcons/seaweed.png';\nimport tiger from '../.././assets/animalIcons/tiger.png';\nimport turtle from '../.././assets/animalIcons/turtle.png';\nimport whale from '../.././assets/animalIcons/whale.png';\nimport whale1 from '../.././assets/animalIcons/whale1.png';\nimport zebra from '../.././assets/animalIcons/zebra.png';\n\nimport arrowDown from '../../assets/arrowDown.png';\n\n\nimport fire from '../../config/fire';\n\n/*\n    This component is a expandlable card that contains all instructor\n    and school info\n*/\nexport default function SortedInstructorsCard({program, SbgColor, SborderColor, instructors}) {\n\n    //User auth \n    const [user, setUser] = useState(null);\n\n    //Animal Icons\n    const [animalIconsArray, setAnimalIconsArray] = useState([\n        birb, bull, crab, fish, fish1, fish2, fox, hedgehog, hippopotamus, koala, lemur,\n        moray, octopus, pig, prawn, seaweed, tiger, turtle, whale, whale1, zebra\n    ]);\n\n    //state to save the 4 icons used in the collapsed card so it carries\n    //over to the uncollapsed card\n    const [savedIcon, setSavedIcon] = useState([]);\n\n    //Expand card button (down arrow) toggle\n    const [isOpen, setIsOpen] = useState(false);\n\n    //collapsed card style (border color is based on props.borderColor property)\n    const [collapsedCardStyle, setCollapsedCardStyle] = useState({\n        display: \"flex\",\n        flexDirection: \"row\",\n        // minWidth: \"508px\",\n        // maxWidth: \"550px\",\n        width: \"550px\",\n        height: \"82px\",\n        borderRadius: \"15px\",\n        marginTop: \"20px\",\n        marginLeft: \"2%\",\n        marginRight: \"2%\",\n        // border: \"solid 3px\",\n        backgroundColor: SbgColor,\n        // borderColor: props.borderColor,\n    });\n\n    //uncollapsed (expanded) card style (border color is based on props.borderColor property)\n    const [uncollapsedCardStyle, setUncollapsedCardStyle] = useState({\n        display: \"flex\",\n        flexDirection: \"row\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        width: \"481px\",\n        height: \"260px\",\n        borderBottomLeftRadius: \"15px\",\n        borderBottomRightRadius: \"15px\",\n        backgroundColor: SbgColor,\n        borderLeft: \"solid 3px \" + SborderColor,\n        borderRight: \"solid 3px \" + SborderColor,\n        borderBottom: \"solid 3px \" + SborderColor,\n    }); \n\n    //uncollapsed (expanded) school info style (color is based on props.borderColor property)\n    const [schoolInfoStyle, setSchoolInfoStyle] = useState({\n        fontSize: \"14px\",\n        fontWeight: \"500\",\n        color: SborderColor\n    });\n\n    const[instructorsCount, setInstructorsCount] = useState(0);\n    const[mentorsFromProps, setMentorsFromProps] = useState([]);\n\n    //History hook for navigation\n    let history = useHistory();\n\n    //checks if user is currently logged in\n    useEffect(() => {\n        fire.auth().onAuthStateChanged(user => {\n            if (user){\n                setUser(user);\n            }else{\n                history.push('/');\n            }\n          })\n      });\n\n    // save the randomized icons for uncollapsed and collapsed card once page loads\n    useEffect(() => {\n        var count = 0;\n        if (typeof instructors !== 'undefined'){\n            for(var k in instructors[\"mentors\"]){\n                // console.log(instructors[\"mentors\"][k]);\n                count++\n            }\n            setInstructorsCount(count);\n            setMentorsFromProps(instructors[\"mentors\"]);\n            // console.log(instructorsCount);\n        }\n\n        if (savedIcon.length < instructorsCount){\n            for (var i=0; i < instructorsCount; i++){\n                setSavedIcon(savedIcon.concat(animalIconsArray[Math.floor(Math.random()*animalIconsArray.length)]))\n            }\n        }\n    });\n    // console.log(\"mentors from props \"+mentorsFromProps)\n\n    //function when down arrow to expand card is clicked\n    const toggleMoreInfo = (e) => {\n        setIsOpen(!isOpen);\n        setCollapsedCardStyle({\n            display: \"flex\",\n            flexDirection: \"row\",\n            // minWidth: \"508px\",\n            // maxWidth: \"550px\",\n            width: \"550px\",\n            height: \"82px\",\n            borderRadius: \"15px\",\n            marginTop: \"20px\",\n            marginLeft: \"2%\",\n            marginRight: \"2%\",\n            border: !isOpen ? \"solid 3px\" : null,\n            backgroundColor: SbgColor,\n            borderColor: !isOpen ? SborderColor : null,\n        })\n    }\n\n    return ( \n\n        <div className=\"instructorCard\">\n\n            <div style={collapsedCardStyle}> {/* className=\"collapsedCard\" */}\n                <div className=\"schoolStyle\" style={schoolStyle}>\n                    <h3 style={schoolNameStyle}>{typeof instructors !== 'undefined'?instructors[\"school\"]:\"undefined :')\"}</h3>\n                    {/* Lathrop Intermediate */}\n                </div>\n\n                <div className=\"instructorsStyle\" style={instructorsStyle}>\n                    {typeof mentorsFromProps !== 'undefined'?\n                        mentorsFromProps.map((person, i) =>(\n                            <HoveredInstructorInfo key={person.name} person={person} savedIconIndex={i} savedIcon={savedIcon}/>\n                        ))\n\n                    :null}             \n                </div>\n\n                <div onClick={toggleMoreInfo} style={btnDiv}>\n                    <button style={arrowBtnStyle}>\n                        <img src={arrowDown}/>\n                    </button>\n                </div>\n            </div>\n            \n            {isOpen? (\n                    // START --> ON CLICK OF DOWN BUTTON TO EXPAND CARD \n                    <div style={uncollapsedCardStyle}> {/* className=\"uncollapsedCard\" */}\n                    <div style={schoolInfo}>\n                        <h3 style={schoolInfoStyle}>{typeof instructors !== 'undefined'?instructors[\"school\"]:\"undefined :')\"}</h3> {/*Lathrop Intermediate */}\n                        <div style={hoverMoreInfoDetailsSchedGrid}>\n                            <h6 style={hoverSchedDays}>M</h6>\n                            <h6 style={hoverSchedTimes}>{instructors[\"mentors\"][0][\"schoolSchedule\"][\"mon\"]}</h6>\n                            <h6 style={hoverSchedDays}>T</h6>\n                            <h6 style={hoverSchedTimes}>{instructors[\"mentors\"][0][\"schoolSchedule\"][\"tue\"]}</h6>\n                            <h6 style={hoverSchedDays}>W</h6>\n                            <h6 style={hoverSchedTimes}>{instructors[\"mentors\"][0][\"schoolSchedule\"][\"wed\"]}</h6>\n                            <h6 style={hoverSchedDays}>T</h6>\n                            <h6 style={hoverSchedTimes}>{instructors[\"mentors\"][0][\"schoolSchedule\"][\"thu\"]}</h6>\n                            <h6 style={hoverSchedDays}>F</h6>\n                            <h6 style={hoverSchedTimes}>{instructors[\"mentors\"][0][\"schoolSchedule\"][\"fri\"]}</h6>\n                        </div>\n                    </div>\n                    \n                    <div style={instructorsInfoContainer}>\n\n                        {typeof instructors !== 'undefined'?\n                            instructors[\"mentors\"].map((person, i) =>(\n                                <DropdownInstructorInfo key={person.name} program={program} person={person} mentorsFromProps={mentorsFromProps} savedIconIndex={i} savedIcon={savedIcon}/>\n                            ))\n\n                        :null}\n                    </div>\n                </div>\n                // END --> ON CLICK OF DOWN BUTTON TO EXPAND CARD \n            ):null}\n        </div>\n\n    )\n}\n\nconst hoverMoreInfoDetailsSchedGrid = {\n    display: \"grid\",\n    gridTemplateColumns: \"13px 127px\",\n    gridTemplateRows: \"15px 15px 15px 15px 15px\",\n    marginTop: \"3px\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n}\n\nconst hoverSchedDays = {\n    color: \"white\",\n    fontSize: \"12px\",\n    fontWeight: \"400\",\n}\n\nconst hoverSchedTimes = {\n    color: \"white\",\n    fontSize: \"11px\",\n    fontWeight: \"400\",\n    marginLeft: \"2px\"\n}\n\nconst schoolStyle = {\n    display: \"flex\",\n\tjustifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"220px\",\n    flexWrap: \"wrap\",\n};\n\nconst schoolNameStyle = {\n    fontSize: \"14px\",\n    fontWeight: \"500\",\n    color: \"white\"\n}\n\nconst instructorsStyle = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    minWidth: \"248px\",\n    maxWidth: \"300px\",\n    \n}\n\nconst btnDiv = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"40px\",\n    marginRight: \"5px\",\n    marginLeft: \"5px\"\n}\n\nconst arrowBtnStyle={\n    backgroundColor: \"transparent\",\n    borderWidth: 0,   \n\n}\n\nconst schoolInfo = {\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    flexWrap: \"wrap\",\n    width: \"180px\",\n    height: \"200px\",\n}\n\nconst instructorsInfoContainer = {\n    display: \"flex\",\n\tjustifyContent: \"center\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    flexWrap: \"wrap\",\n}\n\n\n\n\n\n","/app/src/components/sortingPagesComponents/LockedList.js",[],"/app/src/components/sortingPagesComponents/PendingList.js",["392"],"import React from 'react'\n\nimport { useState, useEffect, useRef } from 'react';\nimport PendingListNameButton from './PendingListNameButton'\n\nimport fire from '../.././config/fire';\n// import firebase from 'firebase';\n\n/*\n    This component is shows pending students\n    meaning they are temporarily removed from the sorted roster\n*/\nexport default function PendingList({program}) {\n\n\n    const [removedInstructors, setRemovedInstructors] = useState([]);\n\n    const appjamSortedRosterCollection = useRef(fire.database().ref().child(program+'/matches'));\n\n    useEffect(() => {\n\n        var latestRoster = 0;\n        appjamSortedRosterCollection.current.on('value', (snap) => {\n            snap.forEach((doc) =>{\n                console.log(parseInt(doc.key), \"NEW!!!!NEW!!!\")\n                if (latestRoster < doc.key){\n                    latestRoster = doc.key\n                }\n            });\n            console.log(\"LATEST ROSTER:\",latestRoster)\n        });\n\n\n        appjamSortedRosterCollection.current.on('value', (snap) => {     \n            const removedList = []      \n            snap.forEach((doc) =>{\n                if (latestRoster === doc.key){\n                    console.log(\"LATEST ROSTER DOC.KEY:\",doc.key, doc.val())\n                    const schoolArray = doc.val();\n                    for (var school in schoolArray){\n                        // console.log(\"LOCKED LIST\", school)\n                        if (school === \"Removed\"){\n                            for (var removedInstructor in schoolArray[school]){\n                                removedList.push(removedInstructor)\n                            }\n                        }\n                    }\n                }\n            });\n            console.log(\"REMOVED LIST\",removedList)\n            setRemovedInstructors(removedList);\n        });\n      },[]);\n\n    return (\n        <div style={pendingLockedBox}>\n            <h3 style={pendingLockedTitle}>Pending</h3>\n            <div style={pendingLockedNameContainer}>\n                {removedInstructors.map((instructors,i) => (\n                    <PendingListNameButton name={instructors} program={program} key={i}/>\n                ))}\n                {/* <PendingListNameButton name=\"Hannah Fragante\"/>\n                <PendingListNameButton name=\"Dylan Fragante\"/>\n                <PendingListNameButton name=\"Annie Fragante\"/>\n                <PendingListNameButton name=\"Deodato Fragante\"/>\n                <PendingListNameButton name=\"Rodita Fragante\"/> */}\n            </div>\n        </div>\n    )\n} \n\nconst pendingLockedBox = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    // justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"300px\",\n    minHeight: \"50px\",\n    maxHeight: \"500px\",\n    backgroundColor: \"white\",\n    marginLeft: \"10px\",\n    borderRadius: \"12px\",\n    border: \"1px solid #A4A3CE\",\n    marginTop: \"10px\"\n}\n\nconst pendingLockedTitle = {\n    fontSize: \"14px\",\n    fontWeight: \"500\",\n    padding: \"5px\",\n    backgroundColor: \"#A4A3CE\",\n    width: \"100%\",\n    textAlign: \"center\",\n    color: \"white\",\n    borderRadius: \"10px\"\n}\n\nconst pendingLockedNameContainer = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    margin: \"10px\"\n}\n\nconst pendingLockedName = {\n    fontWeight: \"400\",\n    fontSize: \"12px\",\n    // margin: \"1px\",\n    padding: \"1px\",\n    color: \"#202E47\",\n    // backgroundColor: \"#A4A3CE\",\n    width: \"300px\",\n    textAlign: \"center\"\n}","/app/src/pages/sortingPages/SaveAsPDF/GeneratePDF.js",[],"/app/src/components/sortingPagesComponents/PendingListNameButton.js",["393"],"import React from 'react'\n\nimport { useState, useEffect, useRef } from 'react';\nimport MoveInstructor from './MoveInstructor'\n\nimport fire from '../.././config/fire';\n// import firebase from 'firebase';\n\n/*\n    This component is shows names on the pending list\n    when their name is clicked they can be moved back to \n    the sorted roster to an available school\n*/\nexport default function PendingListNameButton({name, program}) {\n\n    const [availableSchools, setAvailableSchools] = useState([]);\n\n    const appjamSortedRosterCollection = useRef(fire.database().ref().child(program+'/matches'));\n\n    useEffect(() => {\n\n        var latestRoster = 0;\n        appjamSortedRosterCollection.current.on('value', (snap) => {\n            snap.forEach((doc) =>{\n                console.log(parseInt(doc.key), \"NEW!!!!NEW!!!\")\n                if (latestRoster < doc.key){\n                    latestRoster = doc.key\n                }\n            });\n            console.log(\"LATEST ROSTER:\",latestRoster)\n        });\n\n\n        appjamSortedRosterCollection.current.on('value', (snap) => {     \n            const availableList = []      \n            snap.forEach((doc) =>{\n                if (latestRoster === doc.key){\n                    console.log(\"LATEST ROSTER DOC.KEY:\",doc.key, doc.val())\n                    const schoolArray = doc.val();\n                    for (var school in schoolArray){\n                        // console.log(\"LOCKED LIST\", school)\n                        if (school === \"Available\"){\n                            for (var school in schoolArray[school]){\n                                availableList.push(school)\n                            }\n                        }\n                    }\n                }\n            });\n            console.log(\"AVAILABLE LIST\",availableList)\n            setAvailableSchools(availableList);\n        });\n      },[]);\n\n    //toggle condition for moving instructors\n    const[isMove, setIsMove] = useState(false);\n\n    //passed into MoveInstructor Component so the modal can be toggled off\n    const moveBtnClickedInMoveInstructor = (e) => {\n        console.log(\"MOVED FROM DROPDOWNINSTRUCTORS!!!\")\n        // alert(\"MOVED FROM DROPDOWNINSTRUCTORS\")\n        setIsMove(!isMove);\n    }\n\n    //function that triggers when name is clicked\n    const nameClicked = (e, name) => {\n        console.log(\"MOVE \" + name);\n        setIsMove(!isMove);\n    }\n\n    return (\n        <div>\n            {isMove? (<MoveInstructor instructor={name} onMove={moveBtnClickedInMoveInstructor} schools={availableSchools} program={program}/>) : null}\n            <h4 onClick={(e) => { nameClicked(e, name) }} className=\"pendingLockedName\">{name}</h4>\n        </div>\n    )\n} ","/app/src/components/sortingPagesComponents/HoveredInstructorInfo.js",["394","395","396","397","398","399","400","401","402","403","404","405"],"import React from 'react'\n\n// import { useHistory } from \"react-router-dom\";\nimport { useState, useEffect, useRef } from 'react';\n\nimport options from '../.././assets/options.png';\nimport car from '../.././assets/car.png';\nimport carMentor from '../.././assets/carMentor.png';\nimport mentor from '../.././assets/mentor.png';\nimport shirt from '../.././assets/shirt.png';\nimport language from '../.././assets/language.png';\n\n// import fire from '../../.././config/fire';\n// import firebase from 'firebase';\n\n/*\n    This component contains the icons and first name from the collapsed card\n    It also contains more infor from the instructors if you hover over the icons\n    on the uncollapsed card\n*/\nexport default function HoveredInstructorInfo({person, savedIconIndex, savedIcon}) {\n\n    //toggle when hovering over an instructor\n    const [isHovered, setIsHovered] = useState(false);\n\n    //style to determine where to render instructor info when hovering over them\n    const[hoverPosition, setHoverPosition] = useState({\n        position: \"fixed\",\n    })\n\n    //function when use hovers over an instructor\n    const hoveredOver = (e) => {\n        var x = e.clientX;\n        var y = e.clientY;\n        \n        setHoverPosition({\n            position: \"fixed\",\n            left: x+\"px\",\n            top: y+\"px\",\n        });\n        setIsHovered(true);\n\n    }\n\n    //function when use unhovers over an instructor\n    const removeHoveredOver = (e) => {\n        setIsHovered(false);\n        var x = e.clientX;\n        var y = e.clientY;\n    }\n\n    return (\n            <div style={nameIconPairStyle} onMouseEnter={hoveredOver} onMouseLeave={removeHoveredOver} key={person.name}>\n            {isHovered? (\n                // START --> ON HOVER MORE INFORMATION PER INSTRUCTOR \n                <div className=\"hoverPosition\" style={hoverPosition}>\n                    <div className=\"hoverMoreInfoWrapper\">\n                        <div className=\"hoverMoreInfoContainer\">\n                            <div className=\"hoverMoreInfoHeaderContainer\">\n                                <div className=\"hoverMoreInfoHeaderIcon\">\n                                    <img src={savedIcon[parseInt(savedIconIndex, 10)]} style={hoverIcon}/>\n                                </div>\n                                <div className=\"hoverMoreInfoHeaderNameContainer\">\n                                    <div className=\"hoverMoreInfoHeaderName\">\n                                        <h3 style={hoverName}>{person.name}</h3>\n                                    </div>\n                                    <div className=\"hoverMoreInfoHeaderYearGenderEthnicity\">\n                                        <h3 style={hoverYearGenderEthnicityText}>{person.year}</h3>\n                                        <h3 style={hoverYearGenderEthnicityText}>{person.gender}</h3>\n                                        <h3 style={hoverYearGenderEthnicityText}>{person.ethnicity}</h3>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div className=\"hoverMoreInfoDetailsContainer\"> \n                                <div className=\"hoverMoreInfoDetailsRegionSchoolSchedContainer\">\n                                    <div className=\"hoverMoreInfoDetailsRegionSchoolGrid\">\n                                        <h3 style={hoverRegionSchoolText}>{person.region}</h3>\n                                        <h3 style={hoverRegionSchoolText}>{person.university}</h3>\n                                    </div>\n                                    <div className=\"hoverMoreInfoDetailsSchedGrid\">\n                                        <h6 style={hoverSchedDays}>M</h6>\n                                        <h6 style={hoverSchedTimes}>{person.teacherSchedule.mon}</h6>\n                                        <h6 style={hoverSchedDays}>T</h6>\n                                        <h6 style={hoverSchedTimes}>{person.teacherSchedule.tue}</h6>\n                                        <h6 style={hoverSchedDays}>W</h6>\n                                        <h6 style={hoverSchedTimes}>{person.teacherSchedule.wed}</h6>\n                                        <h6 style={hoverSchedDays}>T</h6>\n                                        <h6 style={hoverSchedTimes}>{person.teacherSchedule.thu}</h6>\n                                        <h6 style={hoverSchedDays}>F</h6>\n                                        <h6 style={hoverSchedTimes}>{person.teacherSchedule.fri}</h6>\n                                    </div>\n                                </div>\n                                <div className=\"hoverMoreInfoDetailsOtherContainer\">\n                                    <div className=\"hoverMoreInfoDetailsOtherGrid\">\n                                        <div className=\"hoverMoreInfoDetailsOtherItem\">\n                                            <img src={person.prevMentor === \"Yes\" ? mentor : null} style={hoverDetailIcon}/>\n                                            <h3 style={hoverDetailText}>{person.prevMentor === \"Yes\" ? \"Returning Mentor\" : null}</h3>\n                                        </div>\n                                        <div className=\"hoverMoreInfoDetailsOtherItem\">\n                                            <img src={person.car === \"Yes\" ? car : null} style={hoverDetailIcon}/>\n                                            <h3 style={hoverDetailText}>{person.car === \"Yes\" ? \"Has car\" : null}</h3>\n                                        </div>\n                                        <div className=\"hoverMoreInfoDetailsOtherItem\">\n                                            <img src={shirt} style={hoverDetailIcon}/>\n                                            <h3 style={hoverDetailText}>XS</h3>\n                                        </div>\n                                        <div className=\"hoverMoreInfoDetailsOtherItem\">\n                                            <img src={language} style={hoverDetailIcon}/>\n                                            <h3 style={hoverDetailText}>{person.languages}</h3>\n                                        </div>\n                                        <div className=\"hoverMoreInfoDetailsOtherItem\">\n                                            <h3 style={hoverDetailTextTeach}>{person.multipleDays === \"Yes\" ? \"CAN teach multiple days\" : \"CANNOT teach multiple days\"}</h3>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                // END --> ON HOVER MORE INFORMATION PER INSTRUCTOR \n            ):null}\n            <img src={savedIcon[parseInt(savedIconIndex, 10)]} style={animalIcon}/>\n            <h3 style={person.prevMentor === \"Yes\"?instructorNameStyleMentor: instructorNameStyle}>{person.firstName}</h3>\n        </div>\n    )\n}\n\nconst nameIconPairStyle = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginRight: \"5px\",\n    marginLeft: \"5px\"\n}\n\nconst animalIcon = {\n    width: \"40px\",\n}\n\nconst instructorNameStyle = {\n    fontSize: \"12px\",\n    fontWeight: \"400\",\n    color: \"white\"\n}\n\nconst instructorNameStyleMentor = {\n    fontSize: \"12px\",\n    fontWeight: \"400\",\n    color: \"#202E47\"\n}\n\nconst hoverIcon = {\n    width: \"35px\",\n}\n\nconst hoverName = {\n    color: \"white\",\n    fontSize: \"14px\",\n    fontWeight: \"500\"\n}\n\nconst hoverYearGenderEthnicityText = {\n    color: \"white\",\n    fontSize: \"9px\",\n    fontWeight: \"400\",\n    marginRight: \"10px\"\n}\n\nconst hoverRegionSchoolText = {\n    color: \"white\",\n    fontSize: \"9px\",\n    fontWeight: \"400\",\n}\n\nconst hoverSchedDays = {\n    color: \"white\",\n    fontSize: \"9px\",\n    fontWeight: \"400\",\n}\n\nconst hoverSchedTimes = {\n    color: \"#A4A3CE\",\n    fontSize: \"8px\",\n    fontWeight: \"400\",\n}\n\nconst hoverDetailIcon = {\n    width: \"13px\",\n}\n\nconst hoverDetailText = {\n    color: \"white\",\n    fontSize: \"9px\",\n    fontWeight: \"400\",\n    marginLeft: \"3px\",\n}\n\nconst hoverDetailTextTeach = {\n    color: \"#A4A3CE\",\n    fontSize: \"9px\",\n    fontWeight: \"400\",\n}","/app/src/components/sortingPagesComponents/DropdownInstructorInfo.js",["406","407","408","409","410","411","412"],"import React from 'react'\n\nimport MoveInstructor from './MoveInstructor';\n\n// import { useHistory } from \"react-router-dom\";\nimport { useState, useEffect, useRef } from 'react';\n\nimport options from '../.././assets/options.png';\nimport car from '../.././assets/car.png';\nimport carMentor from '../.././assets/carMentor.png';\nimport mentor from '../.././assets/mentor.png';\nimport lock from '../.././assets/lock.png';\n\n// import fire from '../../.././config/fire';\n// import firebase from 'firebase';\n\n/*\n    This component contains instructor info once you expand the card\n    it also has the edit options which contains \"Move, lock, and delete\"\n*/\nexport default function DropdownInstructorInfo({program, person, mentorsFromProps, savedIconIndex, savedIcon}) {\n\n    // style to determine where to render options menu when clicked\n    const[optionsMenuPosition, setOptionsMenuPosition] = useState({\n        position: \"fixed\",\n    })\n\n    //toggle condition for the options for instructors\n    const[isOptionsMenuOpen, setIsOptionsMenuOpen] = useState(false);\n\n    //toggle condition for locking instructors\n    const[isLocked, setIsLocked] = useState(person.isLocked)\n\n    //toggle condition for moving instructors\n    const[isMove, setIsMove] = useState(false);\n\n    //function that shows the options menu when edit button is clicked\n    const toggleOptionsMenu = (e,name) => {\n        console.log(\"Hello \" + name);\n        setIsOptionsMenuOpen(!isOptionsMenuOpen);\n        var x = e.clientX;\n        var y = e.clientY;\n\n        setOptionsMenuPosition({\n            position: \"fixed\",\n            left: x+\"px\",\n            top: y+\"px\",\n        });\n    }\n\n    //function that triggers when move button is clicked\n    const moveBtnClicked = (e, mentorID) => {\n        console.log(\"MOVED \" + mentorID)\n        setIsMove(!isMove);\n    }\n\n    //passed into MoveInstructor Component so the modal can be toggled off\n    const moveBtnClickedInMoveInstructor = (e) => {\n        console.log(\"MOVED FROM DROPDOWNINSTRUCTORS!!!\")\n        // alert(\"MOVED FROM DROPDOWNINSTRUCTORS\")\n        setIsMove(!isMove);\n    }\n\n    //function that triggers when lock button is clicked\n    const lockBtnClicked = (e, name) => {\n\n        if (isLocked){\n            console.log(\"UNLOCK\",program, person.name, person.schoolName)\n            fetch('https://apurva29.pythonanywhere.com/unlockinstructor', {\n                method: 'POST', // or 'PUT'\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json'\n                },\n                body: JSON.stringify({\"Program\":program, \"TeacherName\": person.name, \"SchoolName\":person.schoolName}),\n            })\n            .then(response => response.json())\n        }else{\n            console.log(\"LOCK\",program, person.name, person.schoolName)\n            fetch('https://apurva29.pythonanywhere.com/lockinstructor', {\n                method: 'POST', // or 'PUT'\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json'\n                },\n                body: JSON.stringify({\"Program\":program, \"TeacherName\": person.name, \"SchoolName\":person.schoolName}),\n            })\n            .then(response => response.json())\n        }\n        setIsLocked(!isLocked);\n        // window.location.reload(); \n    }\n\n    //function that triggers when pending button is clicked\n    const pendingBtnClicked = (e, name) => {\n        console.log(\"PENDING\",program, person.name, person.schoolName)\n        fetch('https://apurva29.pythonanywhere.com/removeinstructor', {\n            method: 'POST', // or 'PUT'\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\"Program\":program, \"TeacherName\": person.name, \"SchoolName\":person.schoolName}),\n        })\n        .then(response => response.json())\n        // window.location.reload();\n    }\n\n    return (\n        <div>\n            {isMove? (<MoveInstructor instructor={person.name} onMove={moveBtnClickedInMoveInstructor}/>) : null}\n\n            <div style={instructorsInfo} key={person.name}>\n                <img src={person.car === \"Yes\" && person.prevMentor === \"Yes\" ? carMentor : person.car === \"Yes\" && person.prevMentor !== \"Yes\"? car : person.car !== \"Yes\" && person.prevMentor === \"Yes\" ? mentor : null} style={carMentorIcon}/>\n                <img src={savedIcon[parseInt(savedIconIndex, 10)]} style={animalIcon}/>\n                <h3 style={instructorInfoNameStyle}>{person.name} {isLocked?(<img src={lock}/>):null}</h3>\n                <button style={editBtn} onClick={(e) => { toggleOptionsMenu(e, person.name) }}>\n                    <img src={options} style={optionsIcon}/>\n                    <div style={optionsMenuPosition}>\n                        {isOptionsMenuOpen?(\n                            <div className=\"optionsMenu\">\n                                {/* <button onClick={(e) => { moveBtnClicked(e, person.name) }} className=\"optionBtn moveBtn\">MOVE</button> */}\n                                <button onClick={(e) => { lockBtnClicked(e, person.name) }} className=\"optionBtn lockBtn\">{isLocked?\"Unlock\":\"Lock\"}</button>\n                                <button onClick={(e) => { pendingBtnClicked(e, person.name) }} className=\"optionBtn deleteBtn\">Pending</button>\n                            </div>\n                        ):null}\n                    </div>\n                </button>\n            </div>\n        </div>\n    )\n}\n\nconst instructorsInfo = {\n    display: \"grid\",\n    gridTemplateColumns: \"30px 40px 140px 50px\",\n    gridGap: \"10px 5px\",\n    alignItems: \"center\",\n    justifyItems: \"center\",\n    // backgroundColor: \"blue\",\n    marginTop: \"5px\",\n    marginBottom: \"5px\"\n}\n\nconst carMentorIcon = {\n    width: \"30px\",\n}\n\nconst animalIcon = {\n    width: \"40px\",\n}\n\nconst instructorInfoNameStyle = {\n    fontSize: \"12px\",\n    fontWeight: \"400\",\n    color: \"white\",\n}\n\nconst editBtn = {\n    backgroundColor: \"transparent\",\n    borderWidth: 0,   \n}\n\nconst optionsIcon = {\n    width: \"20px\"\n}","/app/src/components/sortingPagesComponents/MoveInstructor.js",["413","414","415"],"import React from 'react'\n\nimport { useState, useEffect, useRef } from 'react';\n\n// import fire from '../../.././config/fire';\n// import firebase from 'firebase';\n\n/*\n    This component is a modal that asks the user where they\n    want to move an instructor after clicking the move button\n*/\nexport default function MoveInstructor({instructor, onMove, schools, program}) {\n\n    const [school, setSchool] = useState(\"\")\n\n    const onChangeSchool = (e) => {\n        setSchool(e.target.value);\n        console.log(e.target.value);\n    }\n\n    const moveFinal = (e) => {\n        console.log(\"MOVED from MOVEINSTRUCTOR.js\")\n        console.log(\"MOVE TO\", instructor, school, program)\n        if (school !== \"\"){\n            fetch('https://apurva29.pythonanywhere.com/moveinstructor', {\n                method: 'POST', // or 'PUT'\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\"Program\":program, \"TeacherName\": instructor, \"SchoolName\":school}),\n            })\n            .then(response => {\n                response.json()\n                onMove();\n            })\n            // window.location.reload();\n    \n            // onMove();\n        }\n        \n    }\n\n    const cancel = (e) => {\n        console.log(\"CANCEL from MOVEINSTRUCTOR.js\")\n        onMove();\n    }\n\n\n\n    return (\n        <div style={modalContainer}>\n            \n            <div style={formContainer}>\n                <div style={questionContainer}>\n                    <h3 style={text}>Where would you like to move </h3>\n                    <h3 style={mentor}>{instructor}?</h3>\n                </div>\n                \n\n                <div style={dropdowns}>\n\n                    <select name=\"school\" style={dropdownStyle} value={school} onChange={onChangeSchool}>\n                        <option value=\"\" disabled selected>Choose School...</option>\n                        {schools.map((schoolName,i) => (\n                            <option value={schoolName} key={schoolName}>{schoolName}</option>\n                        ))}\n                        {/* <option value=\"School1\">School1</option>\n                        <option value=\"School2\">School2</option>\n                        <option value=\"School3\">School3</option>\n                        <option value=\"School5\">School4</option> */}\n                    </select>\n\n                </div>\n\n                <div style={buttonContainer}>\n                    <button onClick={cancel} style={cancelBtn}>Cancel</button>\n                    <button onClick={moveFinal} style={nextBtn}>MOVE!</button>\n                </div>\n                \n            </div>\n        </div>\n    )\n}\n\nconst questionContainer = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n}\n\nconst text = {\n    fontSize: \"18px\",\n    fontWeight: \"400\"\n}\n\nconst mentor = {\n    fontSize: \"18px\",\n    fontWeight: \"500\",\n    color: \"#49479D\"\n}\n\nconst modalContainer = {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    position: \"fixed\",\n    width: \"100vw\",\n    height: \"100vh\",\n    backgroundColor: \"rgb(0, 0, 0, 0.5)\",\n    bottom: 0,\n    right: 0,\n    \n}\n\nconst formContainer = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"450px\",\n    height: \"250px\",\n    backgroundColor: \"white\",\n    borderRadius: \"10px\",\n    border: \"3px solid #49479D\",\n}\n\nconst formStyle = {\n    display: \"flex\",\n    flexDirection: 'column',\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"60%\",\n}\n\nconst dropdowns = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: \"10px\"\n}\n\nconst cancelBtn = {\n    width: \"105px\",\n    height: \"45px\",\n    backgroundColor: \"#49479D\",\n    fontSize: \"14px\",\n    color: \"white\",\n    border: \"0px solid\",\n    borderRadius: \"10px\",\n    marginTop: \"20px\",\n}\n\nconst nextBtn = {\n    width: \"105px\",\n    height: \"45px\",\n    backgroundColor: \"#49479D\",\n    fontSize: \"14px\",\n    color: \"white\",\n    border: \"0px solid\",\n    borderRadius: \"10px\",\n    marginTop: \"20px\",\n    marginLeft: \"40px\"\n}\n\nconst dropdownStyle = {\n    width: \"214px\",\n    height: \"66px\",\n    marginLeft: \"5px\",\n    marginRight: \"5px\",\n    fontSize: \"18px\",\n    border: \"0px solid\",\n    boxShadow: \"1px 1px 10px #E6E6E8\"\n}\n\nconst buttonContainer = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n}",{"ruleId":"416","replacedBy":"417"},{"ruleId":"418","replacedBy":"419"},{"ruleId":"420","severity":1,"message":"421","line":15,"column":12,"nodeType":"422","messageId":"423","endLine":15,"endColumn":16},{"ruleId":"420","severity":1,"message":"424","line":146,"column":7,"nodeType":"422","messageId":"423","endLine":146,"endColumn":19},{"ruleId":"420","severity":1,"message":"425","line":147,"column":7,"nodeType":"422","messageId":"423","endLine":147,"endColumn":15},{"ruleId":"420","severity":1,"message":"421","line":15,"column":12,"nodeType":"422","messageId":"423","endLine":15,"endColumn":16},{"ruleId":"420","severity":1,"message":"421","line":15,"column":12,"nodeType":"422","messageId":"423","endLine":15,"endColumn":16},{"ruleId":"426","severity":1,"message":"427","line":10,"column":20,"nodeType":"428","messageId":"429","endLine":10,"endColumn":22},{"ruleId":"426","severity":1,"message":"427","line":80,"column":55,"nodeType":"428","messageId":"429","endLine":80,"endColumn":57},{"ruleId":"420","severity":1,"message":"421","line":11,"column":12,"nodeType":"422","messageId":"423","endLine":11,"endColumn":16},{"ruleId":"420","severity":1,"message":"421","line":15,"column":12,"nodeType":"422","messageId":"423","endLine":15,"endColumn":16},{"ruleId":"420","severity":1,"message":"430","line":2,"column":8,"nodeType":"422","messageId":"423","endLine":2,"endColumn":23},{"ruleId":"420","severity":1,"message":"431","line":122,"column":16,"nodeType":"422","messageId":"423","endLine":122,"endColumn":21},{"ruleId":"420","severity":1,"message":"430","line":3,"column":8,"nodeType":"422","messageId":"423","endLine":3,"endColumn":23},{"ruleId":"420","severity":1,"message":"432","line":5,"column":31,"nodeType":"422","messageId":"423","endLine":5,"endColumn":37},{"ruleId":"420","severity":1,"message":"421","line":17,"column":12,"nodeType":"422","messageId":"423","endLine":17,"endColumn":16},{"ruleId":"420","severity":1,"message":"432","line":4,"column":31,"nodeType":"422","messageId":"423","endLine":4,"endColumn":37},{"ruleId":"420","severity":1,"message":"421","line":15,"column":12,"nodeType":"422","messageId":"423","endLine":15,"endColumn":16},{"ruleId":"420","severity":1,"message":"433","line":152,"column":7,"nodeType":"422","messageId":"423","endLine":152,"endColumn":16},{"ruleId":"420","severity":1,"message":"434","line":195,"column":7,"nodeType":"422","messageId":"423","endLine":195,"endColumn":17},{"ruleId":"420","severity":1,"message":"435","line":200,"column":7,"nodeType":"422","messageId":"423","endLine":200,"endColumn":20},{"ruleId":"426","severity":1,"message":"427","line":12,"column":20,"nodeType":"428","messageId":"429","endLine":12,"endColumn":22},{"ruleId":"426","severity":1,"message":"427","line":80,"column":55,"nodeType":"428","messageId":"429","endLine":80,"endColumn":57},{"ruleId":"420","severity":1,"message":"421","line":27,"column":12,"nodeType":"422","messageId":"423","endLine":27,"endColumn":16},{"ruleId":"436","severity":1,"message":"437","line":57,"column":9,"nodeType":"438","endLine":57,"endColumn":11,"suggestions":"439"},{"ruleId":"426","severity":1,"message":"427","line":81,"column":22,"nodeType":"428","messageId":"429","endLine":81,"endColumn":24},{"ruleId":"426","severity":1,"message":"427","line":105,"column":21,"nodeType":"428","messageId":"429","endLine":105,"endColumn":23},{"ruleId":"426","severity":1,"message":"427","line":107,"column":27,"nodeType":"428","messageId":"429","endLine":107,"endColumn":29},{"ruleId":"426","severity":1,"message":"427","line":109,"column":27,"nodeType":"428","messageId":"429","endLine":109,"endColumn":29},{"ruleId":"426","severity":1,"message":"427","line":111,"column":27,"nodeType":"428","messageId":"429","endLine":111,"endColumn":29},{"ruleId":"426","severity":1,"message":"427","line":113,"column":27,"nodeType":"428","messageId":"429","endLine":113,"endColumn":29},{"ruleId":"426","severity":1,"message":"440","line":160,"column":76,"nodeType":"428","messageId":"429","endLine":160,"endColumn":78},{"ruleId":"436","severity":1,"message":"441","line":197,"column":9,"nodeType":"438","endLine":197,"endColumn":11,"suggestions":"442"},{"ruleId":"443","severity":1,"message":"444","line":266,"column":37,"nodeType":"445","endLine":266,"endColumn":81},{"ruleId":"443","severity":1,"message":"444","line":273,"column":33,"nodeType":"445","endLine":273,"endColumn":76},{"ruleId":"443","severity":1,"message":"444","line":278,"column":33,"nodeType":"445","endLine":278,"endColumn":80},{"ruleId":"443","severity":1,"message":"444","line":283,"column":33,"nodeType":"445","endLine":283,"endColumn":83},{"ruleId":"420","severity":1,"message":"446","line":344,"column":7,"nodeType":"422","messageId":"423","endLine":344,"endColumn":23},{"ruleId":"420","severity":1,"message":"447","line":359,"column":7,"nodeType":"422","messageId":"423","endLine":359,"endColumn":25},{"ruleId":"420","severity":1,"message":"448","line":370,"column":7,"nodeType":"422","messageId":"423","endLine":370,"endColumn":33},{"ruleId":"420","severity":1,"message":"449","line":378,"column":7,"nodeType":"422","messageId":"423","endLine":378,"endColumn":24},{"ruleId":"450","severity":1,"message":"451","line":542,"column":5,"nodeType":"452","messageId":"429","endLine":542,"endColumn":10},{"ruleId":"420","severity":1,"message":"421","line":15,"column":12,"nodeType":"422","messageId":"423","endLine":15,"endColumn":16},{"ruleId":"420","severity":1,"message":"453","line":3,"column":8,"nodeType":"422","messageId":"423","endLine":3,"endColumn":18},{"ruleId":"420","severity":1,"message":"454","line":4,"column":8,"nodeType":"422","messageId":"423","endLine":4,"endColumn":26},{"ruleId":"420","severity":1,"message":"421","line":17,"column":12,"nodeType":"422","messageId":"423","endLine":17,"endColumn":16},{"ruleId":"426","severity":1,"message":"427","line":65,"column":20,"nodeType":"428","messageId":"429","endLine":65,"endColumn":22},{"ruleId":"426","severity":1,"message":"427","line":89,"column":19,"nodeType":"428","messageId":"429","endLine":89,"endColumn":21},{"ruleId":"426","severity":1,"message":"427","line":91,"column":25,"nodeType":"428","messageId":"429","endLine":91,"endColumn":27},{"ruleId":"426","severity":1,"message":"427","line":93,"column":25,"nodeType":"428","messageId":"429","endLine":93,"endColumn":27},{"ruleId":"426","severity":1,"message":"427","line":95,"column":25,"nodeType":"428","messageId":"429","endLine":95,"endColumn":27},{"ruleId":"426","severity":1,"message":"427","line":97,"column":25,"nodeType":"428","messageId":"429","endLine":97,"endColumn":27},{"ruleId":"436","severity":1,"message":"441","line":197,"column":9,"nodeType":"438","endLine":197,"endColumn":11,"suggestions":"455"},{"ruleId":"420","severity":1,"message":"456","line":390,"column":7,"nodeType":"422","messageId":"423","endLine":390,"endColumn":21},{"ruleId":"420","severity":1,"message":"457","line":399,"column":7,"nodeType":"422","messageId":"423","endLine":399,"endColumn":22},{"ruleId":"420","severity":1,"message":"458","line":405,"column":7,"nodeType":"422","messageId":"423","endLine":405,"endColumn":11},{"ruleId":"420","severity":1,"message":"421","line":15,"column":12,"nodeType":"422","messageId":"423","endLine":15,"endColumn":16},{"ruleId":"420","severity":1,"message":"434","line":278,"column":7,"nodeType":"422","messageId":"423","endLine":278,"endColumn":17},{"ruleId":"420","severity":1,"message":"459","line":322,"column":7,"nodeType":"422","messageId":"423","endLine":322,"endColumn":21},{"ruleId":"420","severity":1,"message":"421","line":15,"column":12,"nodeType":"422","messageId":"423","endLine":15,"endColumn":16},{"ruleId":"420","severity":1,"message":"453","line":3,"column":8,"nodeType":"422","messageId":"423","endLine":3,"endColumn":18},{"ruleId":"420","severity":1,"message":"454","line":4,"column":8,"nodeType":"422","messageId":"423","endLine":4,"endColumn":26},{"ruleId":"420","severity":1,"message":"421","line":17,"column":12,"nodeType":"422","messageId":"423","endLine":17,"endColumn":16},{"ruleId":"420","severity":1,"message":"460","line":23,"column":21,"nodeType":"422","messageId":"423","endLine":23,"endColumn":31},{"ruleId":"420","severity":1,"message":"461","line":26,"column":18,"nodeType":"422","messageId":"423","endLine":26,"endColumn":25},{"ruleId":"420","severity":1,"message":"462","line":41,"column":11,"nodeType":"422","messageId":"423","endLine":41,"endColumn":30},{"ruleId":"426","severity":1,"message":"427","line":79,"column":24,"nodeType":"428","messageId":"429","endLine":79,"endColumn":26},{"ruleId":"426","severity":1,"message":"427","line":103,"column":23,"nodeType":"428","messageId":"429","endLine":103,"endColumn":25},{"ruleId":"426","severity":1,"message":"427","line":105,"column":29,"nodeType":"428","messageId":"429","endLine":105,"endColumn":31},{"ruleId":"426","severity":1,"message":"427","line":107,"column":29,"nodeType":"428","messageId":"429","endLine":107,"endColumn":31},{"ruleId":"426","severity":1,"message":"427","line":109,"column":29,"nodeType":"428","messageId":"429","endLine":109,"endColumn":31},{"ruleId":"426","severity":1,"message":"427","line":111,"column":29,"nodeType":"428","messageId":"429","endLine":111,"endColumn":31},{"ruleId":"420","severity":1,"message":"463","line":279,"column":7,"nodeType":"422","messageId":"423","endLine":279,"endColumn":21},{"ruleId":"420","severity":1,"message":"456","line":347,"column":7,"nodeType":"422","messageId":"423","endLine":347,"endColumn":21},{"ruleId":"420","severity":1,"message":"457","line":356,"column":7,"nodeType":"422","messageId":"423","endLine":356,"endColumn":22},{"ruleId":"420","severity":1,"message":"458","line":362,"column":7,"nodeType":"422","messageId":"423","endLine":362,"endColumn":11},{"ruleId":"420","severity":1,"message":"421","line":27,"column":12,"nodeType":"422","messageId":"423","endLine":27,"endColumn":16},{"ruleId":"436","severity":1,"message":"437","line":57,"column":9,"nodeType":"438","endLine":57,"endColumn":11,"suggestions":"464"},{"ruleId":"426","severity":1,"message":"427","line":81,"column":22,"nodeType":"428","messageId":"429","endLine":81,"endColumn":24},{"ruleId":"426","severity":1,"message":"427","line":105,"column":21,"nodeType":"428","messageId":"429","endLine":105,"endColumn":23},{"ruleId":"426","severity":1,"message":"427","line":107,"column":27,"nodeType":"428","messageId":"429","endLine":107,"endColumn":29},{"ruleId":"426","severity":1,"message":"427","line":109,"column":27,"nodeType":"428","messageId":"429","endLine":109,"endColumn":29},{"ruleId":"426","severity":1,"message":"427","line":111,"column":27,"nodeType":"428","messageId":"429","endLine":111,"endColumn":29},{"ruleId":"426","severity":1,"message":"427","line":113,"column":27,"nodeType":"428","messageId":"429","endLine":113,"endColumn":29},{"ruleId":"426","severity":1,"message":"440","line":160,"column":76,"nodeType":"428","messageId":"429","endLine":160,"endColumn":78},{"ruleId":"436","severity":1,"message":"441","line":197,"column":9,"nodeType":"438","endLine":197,"endColumn":11,"suggestions":"465"},{"ruleId":"443","severity":1,"message":"444","line":266,"column":37,"nodeType":"445","endLine":266,"endColumn":81},{"ruleId":"443","severity":1,"message":"444","line":273,"column":33,"nodeType":"445","endLine":273,"endColumn":76},{"ruleId":"443","severity":1,"message":"444","line":278,"column":33,"nodeType":"445","endLine":278,"endColumn":80},{"ruleId":"443","severity":1,"message":"444","line":283,"column":33,"nodeType":"445","endLine":283,"endColumn":83},{"ruleId":"420","severity":1,"message":"446","line":344,"column":7,"nodeType":"422","messageId":"423","endLine":344,"endColumn":23},{"ruleId":"420","severity":1,"message":"447","line":359,"column":7,"nodeType":"422","messageId":"423","endLine":359,"endColumn":25},{"ruleId":"420","severity":1,"message":"448","line":370,"column":7,"nodeType":"422","messageId":"423","endLine":370,"endColumn":33},{"ruleId":"420","severity":1,"message":"449","line":378,"column":7,"nodeType":"422","messageId":"423","endLine":378,"endColumn":24},{"ruleId":"450","severity":1,"message":"451","line":542,"column":5,"nodeType":"452","messageId":"429","endLine":542,"endColumn":10},{"ruleId":"420","severity":1,"message":"421","line":15,"column":12,"nodeType":"422","messageId":"423","endLine":15,"endColumn":16},{"ruleId":"420","severity":1,"message":"421","line":15,"column":12,"nodeType":"422","messageId":"423","endLine":15,"endColumn":16},{"ruleId":"420","severity":1,"message":"434","line":271,"column":7,"nodeType":"422","messageId":"423","endLine":271,"endColumn":17},{"ruleId":"426","severity":1,"message":"427","line":10,"column":20,"nodeType":"428","messageId":"429","endLine":10,"endColumn":22},{"ruleId":"420","severity":1,"message":"466","line":93,"column":15,"nodeType":"422","messageId":"423","endLine":93,"endColumn":25},{"ruleId":"426","severity":1,"message":"427","line":12,"column":20,"nodeType":"428","messageId":"429","endLine":12,"endColumn":22},{"ruleId":"426","severity":1,"message":"427","line":80,"column":55,"nodeType":"428","messageId":"429","endLine":80,"endColumn":57},{"ruleId":"426","severity":1,"message":"427","line":10,"column":20,"nodeType":"428","messageId":"429","endLine":10,"endColumn":22},{"ruleId":"420","severity":1,"message":"466","line":93,"column":15,"nodeType":"422","messageId":"423","endLine":93,"endColumn":25},{"ruleId":"426","severity":1,"message":"427","line":10,"column":20,"nodeType":"428","messageId":"429","endLine":10,"endColumn":22},{"ruleId":"420","severity":1,"message":"466","line":93,"column":15,"nodeType":"422","messageId":"423","endLine":93,"endColumn":25},{"ruleId":"420","severity":1,"message":"453","line":3,"column":8,"nodeType":"422","messageId":"423","endLine":3,"endColumn":18},{"ruleId":"420","severity":1,"message":"454","line":4,"column":8,"nodeType":"422","messageId":"423","endLine":4,"endColumn":26},{"ruleId":"420","severity":1,"message":"421","line":17,"column":12,"nodeType":"422","messageId":"423","endLine":17,"endColumn":16},{"ruleId":"426","severity":1,"message":"427","line":79,"column":24,"nodeType":"428","messageId":"429","endLine":79,"endColumn":26},{"ruleId":"426","severity":1,"message":"427","line":103,"column":23,"nodeType":"428","messageId":"429","endLine":103,"endColumn":25},{"ruleId":"426","severity":1,"message":"427","line":105,"column":29,"nodeType":"428","messageId":"429","endLine":105,"endColumn":31},{"ruleId":"426","severity":1,"message":"427","line":107,"column":29,"nodeType":"428","messageId":"429","endLine":107,"endColumn":31},{"ruleId":"426","severity":1,"message":"427","line":109,"column":29,"nodeType":"428","messageId":"429","endLine":109,"endColumn":31},{"ruleId":"426","severity":1,"message":"427","line":111,"column":29,"nodeType":"428","messageId":"429","endLine":111,"endColumn":31},{"ruleId":"420","severity":1,"message":"463","line":279,"column":7,"nodeType":"422","messageId":"423","endLine":279,"endColumn":21},{"ruleId":"420","severity":1,"message":"456","line":347,"column":7,"nodeType":"422","messageId":"423","endLine":347,"endColumn":21},{"ruleId":"420","severity":1,"message":"457","line":356,"column":7,"nodeType":"422","messageId":"423","endLine":356,"endColumn":22},{"ruleId":"420","severity":1,"message":"458","line":362,"column":7,"nodeType":"422","messageId":"423","endLine":362,"endColumn":11},{"ruleId":"420","severity":1,"message":"421","line":27,"column":12,"nodeType":"422","messageId":"423","endLine":27,"endColumn":16},{"ruleId":"436","severity":1,"message":"437","line":57,"column":9,"nodeType":"438","endLine":57,"endColumn":11,"suggestions":"467"},{"ruleId":"426","severity":1,"message":"427","line":81,"column":22,"nodeType":"428","messageId":"429","endLine":81,"endColumn":24},{"ruleId":"426","severity":1,"message":"427","line":105,"column":21,"nodeType":"428","messageId":"429","endLine":105,"endColumn":23},{"ruleId":"426","severity":1,"message":"427","line":107,"column":27,"nodeType":"428","messageId":"429","endLine":107,"endColumn":29},{"ruleId":"426","severity":1,"message":"427","line":109,"column":27,"nodeType":"428","messageId":"429","endLine":109,"endColumn":29},{"ruleId":"426","severity":1,"message":"427","line":111,"column":27,"nodeType":"428","messageId":"429","endLine":111,"endColumn":29},{"ruleId":"426","severity":1,"message":"427","line":113,"column":27,"nodeType":"428","messageId":"429","endLine":113,"endColumn":29},{"ruleId":"426","severity":1,"message":"440","line":160,"column":76,"nodeType":"428","messageId":"429","endLine":160,"endColumn":78},{"ruleId":"436","severity":1,"message":"441","line":197,"column":9,"nodeType":"438","endLine":197,"endColumn":11,"suggestions":"468"},{"ruleId":"443","severity":1,"message":"444","line":266,"column":37,"nodeType":"445","endLine":266,"endColumn":81},{"ruleId":"443","severity":1,"message":"444","line":273,"column":33,"nodeType":"445","endLine":273,"endColumn":76},{"ruleId":"443","severity":1,"message":"444","line":278,"column":33,"nodeType":"445","endLine":278,"endColumn":80},{"ruleId":"443","severity":1,"message":"444","line":283,"column":33,"nodeType":"445","endLine":283,"endColumn":83},{"ruleId":"420","severity":1,"message":"446","line":344,"column":7,"nodeType":"422","messageId":"423","endLine":344,"endColumn":23},{"ruleId":"420","severity":1,"message":"447","line":359,"column":7,"nodeType":"422","messageId":"423","endLine":359,"endColumn":25},{"ruleId":"420","severity":1,"message":"448","line":370,"column":7,"nodeType":"422","messageId":"423","endLine":370,"endColumn":33},{"ruleId":"420","severity":1,"message":"449","line":378,"column":7,"nodeType":"422","messageId":"423","endLine":378,"endColumn":24},{"ruleId":"450","severity":1,"message":"451","line":542,"column":5,"nodeType":"452","messageId":"429","endLine":542,"endColumn":10},{"ruleId":"420","severity":1,"message":"421","line":15,"column":12,"nodeType":"422","messageId":"423","endLine":15,"endColumn":16},{"ruleId":"420","severity":1,"message":"434","line":273,"column":7,"nodeType":"422","messageId":"423","endLine":273,"endColumn":17},{"ruleId":"426","severity":1,"message":"427","line":12,"column":20,"nodeType":"428","messageId":"429","endLine":12,"endColumn":22},{"ruleId":"426","severity":1,"message":"427","line":80,"column":55,"nodeType":"428","messageId":"429","endLine":80,"endColumn":57},{"ruleId":"420","severity":1,"message":"421","line":15,"column":12,"nodeType":"422","messageId":"423","endLine":15,"endColumn":16},{"ruleId":"426","severity":1,"message":"427","line":41,"column":22,"nodeType":"428","messageId":"429","endLine":41,"endColumn":24},{"ruleId":"426","severity":1,"message":"427","line":65,"column":21,"nodeType":"428","messageId":"429","endLine":65,"endColumn":23},{"ruleId":"426","severity":1,"message":"427","line":67,"column":27,"nodeType":"428","messageId":"429","endLine":67,"endColumn":29},{"ruleId":"426","severity":1,"message":"427","line":69,"column":27,"nodeType":"428","messageId":"429","endLine":69,"endColumn":29},{"ruleId":"426","severity":1,"message":"427","line":71,"column":27,"nodeType":"428","messageId":"429","endLine":71,"endColumn":29},{"ruleId":"426","severity":1,"message":"427","line":73,"column":27,"nodeType":"428","messageId":"429","endLine":73,"endColumn":29},{"ruleId":"436","severity":1,"message":"441","line":125,"column":9,"nodeType":"438","endLine":125,"endColumn":11,"suggestions":"469"},{"ruleId":"420","severity":1,"message":"421","line":15,"column":12,"nodeType":"422","messageId":"423","endLine":15,"endColumn":16},{"ruleId":"436","severity":1,"message":"470","line":85,"column":10,"nodeType":"438","endLine":85,"endColumn":38,"suggestions":"471"},{"ruleId":"420","severity":1,"message":"421","line":18,"column":12,"nodeType":"422","messageId":"423","endLine":18,"endColumn":16},{"ruleId":"420","severity":1,"message":"472","line":69,"column":7,"nodeType":"422","messageId":"423","endLine":69,"endColumn":20},{"ruleId":"420","severity":1,"message":"473","line":77,"column":7,"nodeType":"422","messageId":"423","endLine":77,"endColumn":22},{"ruleId":"420","severity":1,"message":"474","line":88,"column":7,"nodeType":"422","messageId":"423","endLine":88,"endColumn":19},{"ruleId":"420","severity":1,"message":"421","line":42,"column":12,"nodeType":"422","messageId":"423","endLine":42,"endColumn":16},{"ruleId":"420","severity":1,"message":"475","line":45,"column":30,"nodeType":"422","messageId":"423","endLine":45,"endColumn":49},{"ruleId":"420","severity":1,"message":"476","line":75,"column":34,"nodeType":"422","messageId":"423","endLine":75,"endColumn":57},{"ruleId":"420","severity":1,"message":"477","line":91,"column":29,"nodeType":"422","messageId":"423","endLine":91,"endColumn":47},{"ruleId":"436","severity":1,"message":"478","line":115,"column":5,"nodeType":"422","endLine":115,"endColumn":14,"suggestions":"479"},{"ruleId":"420","severity":1,"message":"480","line":118,"column":21,"nodeType":"422","messageId":"423","endLine":118,"endColumn":22},{"ruleId":"443","severity":1,"message":"444","line":176,"column":25,"nodeType":"445","endLine":176,"endColumn":47},{"ruleId":"420","severity":1,"message":"449","line":106,"column":7,"nodeType":"422","messageId":"423","endLine":106,"endColumn":24},{"ruleId":"481","severity":1,"message":"482","line":43,"column":38,"nodeType":"422","messageId":"483","endLine":43,"endColumn":44},{"ruleId":"420","severity":1,"message":"484","line":4,"column":20,"nodeType":"422","messageId":"423","endLine":4,"endColumn":29},{"ruleId":"420","severity":1,"message":"432","line":4,"column":31,"nodeType":"422","messageId":"423","endLine":4,"endColumn":37},{"ruleId":"420","severity":1,"message":"485","line":6,"column":8,"nodeType":"422","messageId":"423","endLine":6,"endColumn":15},{"ruleId":"420","severity":1,"message":"486","line":8,"column":8,"nodeType":"422","messageId":"423","endLine":8,"endColumn":17},{"ruleId":"420","severity":1,"message":"487","line":48,"column":13,"nodeType":"422","messageId":"423","endLine":48,"endColumn":14},{"ruleId":"420","severity":1,"message":"488","line":49,"column":13,"nodeType":"422","messageId":"423","endLine":49,"endColumn":14},{"ruleId":"443","severity":1,"message":"444","line":61,"column":37,"nodeType":"445","endLine":61,"endColumn":107},{"ruleId":"443","severity":1,"message":"444","line":97,"column":45,"nodeType":"445","endLine":97,"endColumn":125},{"ruleId":"443","severity":1,"message":"444","line":101,"column":45,"nodeType":"445","endLine":101,"endColumn":115},{"ruleId":"443","severity":1,"message":"444","line":105,"column":45,"nodeType":"445","endLine":105,"endColumn":87},{"ruleId":"443","severity":1,"message":"444","line":109,"column":45,"nodeType":"445","endLine":109,"endColumn":90},{"ruleId":"443","severity":1,"message":"444","line":123,"column":13,"nodeType":"445","endLine":123,"endColumn":84},{"ruleId":"420","severity":1,"message":"484","line":6,"column":20,"nodeType":"422","messageId":"423","endLine":6,"endColumn":29},{"ruleId":"420","severity":1,"message":"432","line":6,"column":31,"nodeType":"422","messageId":"423","endLine":6,"endColumn":37},{"ruleId":"420","severity":1,"message":"489","line":52,"column":11,"nodeType":"422","messageId":"423","endLine":52,"endColumn":25},{"ruleId":"443","severity":1,"message":"444","line":113,"column":17,"nodeType":"445","endLine":113,"endColumn":244},{"ruleId":"443","severity":1,"message":"444","line":114,"column":17,"nodeType":"445","endLine":114,"endColumn":88},{"ruleId":"443","severity":1,"message":"444","line":115,"column":78,"nodeType":"445","endLine":115,"endColumn":95},{"ruleId":"443","severity":1,"message":"444","line":117,"column":21,"nodeType":"445","endLine":117,"endColumn":61},{"ruleId":"420","severity":1,"message":"484","line":3,"column":20,"nodeType":"422","messageId":"423","endLine":3,"endColumn":29},{"ruleId":"420","severity":1,"message":"432","line":3,"column":31,"nodeType":"422","messageId":"423","endLine":3,"endColumn":37},{"ruleId":"420","severity":1,"message":"490","line":128,"column":7,"nodeType":"422","messageId":"423","endLine":128,"endColumn":16},"no-native-reassign",["491"],"no-negated-in-lhs",["492"],"no-unused-vars","'user' is assigned a value but never used.","Identifier","unusedVar","'tempUsername' is assigned a value but never used.","'tempPass' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'TimeRangePicker' is defined but never used.","'value' is assigned a value but never used.","'useRef' is defined but never used.","'dropdowns' is assigned a value but never used.","'radioStyle' is assigned a value but never used.","'dropdownStyle' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["493"],"Expected '!==' and instead saw '!='.","React Hook useEffect has a missing dependency: 'convertSchedule'. Either include it or remove the dependency array.",["494"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'pendingLockedBox' is assigned a value but never used.","'pendingLockedTitle' is assigned a value but never used.","'pendingLockedNameContainer' is assigned a value but never used.","'pendingLockedName' is assigned a value but never used.","no-dupe-keys","Duplicate key 'color'.","ObjectExpression","'SideNavBar' is defined but never used.","'SortingPagesNavbar' is defined but never used.",["495"],"'firebaseRoster' is assigned a value but never used.","'mentorContainer' is assigned a value but never used.","'data' is assigned a value but never used.","'disabledOption' is assigned a value but never used.","'setQuarter' is assigned a value but never used.","'setYear' is assigned a value but never used.","'quarterYearDatabase' is assigned a value but never used.","'programSchools' is assigned a value but never used.",["496"],["497"],"'wellStyles' is assigned a value but never used.",["498"],["499"],["500"],"React Hook useEffect has a missing dependency: 'urlPath'. Either include it or remove the dependency array.",["501"],"'rosterbuttons' is assigned a value but never used.","'uddateRosterBtn' is assigned a value but never used.","'newRosterBtn' is assigned a value but never used.","'setAnimalIconsArray' is assigned a value but never used.","'setUncollapsedCardStyle' is assigned a value but never used.","'setSchoolInfoStyle' is assigned a value but never used.","React Hook useEffect contains a call to 'setInstructorsCount'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [instructors, savedIcon, instructorsCount, animalIconsArray] as a second argument to the useEffect Hook.",["502"],"'k' is assigned a value but never used.","no-redeclare","'school' is already defined.","redeclared","'useEffect' is defined but never used.","'options' is defined but never used.","'carMentor' is defined but never used.","'x' is assigned a value but never used.","'y' is assigned a value but never used.","'moveBtnClicked' is assigned a value but never used.","'formStyle' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"503","fix":"504"},{"desc":"505","fix":"506"},{"desc":"505","fix":"507"},{"desc":"503","fix":"508"},{"desc":"505","fix":"509"},{"desc":"503","fix":"510"},{"desc":"505","fix":"511"},{"desc":"505","fix":"512"},{"desc":"513","fix":"514"},{"desc":"515","fix":"516"},"Update the dependencies array to be: [history]",{"range":"517","text":"518"},"Update the dependencies array to be: [convertSchedule]",{"range":"519","text":"520"},{"range":"521","text":"520"},{"range":"522","text":"518"},{"range":"523","text":"520"},{"range":"524","text":"518"},{"range":"525","text":"520"},{"range":"526","text":"520"},"Update the dependencies array to be: [location.pathname, history, urlPath]",{"range":"527","text":"528"},"Add dependencies array: [instructors, savedIcon, instructorsCount, animalIconsArray]",{"range":"529","text":"530"},[1893,1895],"[history]",[8175,8177],"[convertSchedule]",[7621,7623],[1893,1895],[8193,8195],[1893,1895],[8173,8175],[4208,4210],[2665,2693],"[location.pathname, history, urlPath]",[4923,4923],", [instructors, savedIcon, instructorsCount, animalIconsArray]"]